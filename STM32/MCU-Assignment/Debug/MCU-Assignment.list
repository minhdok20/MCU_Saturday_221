
MCU-Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005478  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005588  08005588  00015588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055f4  080055f4  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  080055f4  080055f4  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055f4  080055f4  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055f4  080055f4  000155f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055f8  080055f8  000155f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  080055fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  200000c8  080056c4  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  080056c4  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4c2  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025bf  00000000  00000000  0002f5b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00031b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  000328c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ba9  00000000  00000000  00033508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f36e  00000000  00000000  0004c0b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b1e9  00000000  00000000  0005b41f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e6608  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003abc  00000000  00000000  000e665c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000c8 	.word	0x200000c8
 800012c:	00000000 	.word	0x00000000
 8000130:	08005570 	.word	0x08005570

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000cc 	.word	0x200000cc
 800014c:	08005570 	.word	0x08005570

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <isButtonPressed>:

// Khoi tao cac bien dem chu ki de xac dinh hai su kien co the xay ra cua nut nhan
int TimeOutForKeyPress[NUM_OF_BUTTONS] = {0};

// Xac dinh flag da duoc bao len gia tri 1
int isButtonPressed(int index) {
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000944:	4a09      	ldr	r2, [pc, #36]	; (800096c <isButtonPressed+0x30>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d106      	bne.n	800095e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000950:	4a06      	ldr	r2, [pc, #24]	; (800096c <isButtonPressed+0x30>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2100      	movs	r1, #0
 8000956:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800095a:	2301      	movs	r3, #1
 800095c:	e000      	b.n	8000960 <isButtonPressed+0x24>
	}
	return 0;
 800095e:	2300      	movs	r3, #0
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	200000e4 	.word	0x200000e4

08000970 <subKeyProcess>:

// Set flag = 1
void subKeyProcess(int index){
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000978:	4a04      	ldr	r2, [pc, #16]	; (800098c <subKeyProcess+0x1c>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2101      	movs	r1, #1
 800097e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	200000e4 	.word	0x200000e4

08000990 <getKeyInput>:

// getKeyInput()
void getKeyInput() {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	e0b5      	b.n	8000b08 <getKeyInput+0x178>
		KeyReg0[i] = KeyReg1[i];	// Xu li chong rung
 800099c:	4a5f      	ldr	r2, [pc, #380]	; (8000b1c <getKeyInput+0x18c>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009a4:	495e      	ldr	r1, [pc, #376]	; (8000b20 <getKeyInput+0x190>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80009ac:	4a5d      	ldr	r2, [pc, #372]	; (8000b24 <getKeyInput+0x194>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009b4:	4959      	ldr	r1, [pc, #356]	; (8000b1c <getKeyInput+0x18c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// Doc cac tin hieu tu cac nut nhan
		if (i == 0) {
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d10a      	bne.n	80009d8 <getKeyInput+0x48>
			KeyReg2[i] = HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin); // MODE
 80009c2:	2102      	movs	r1, #2
 80009c4:	4858      	ldr	r0, [pc, #352]	; (8000b28 <getKeyInput+0x198>)
 80009c6:	f002 f84d 	bl	8002a64 <HAL_GPIO_ReadPin>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4619      	mov	r1, r3
 80009ce:	4a55      	ldr	r2, [pc, #340]	; (8000b24 <getKeyInput+0x194>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009d6:	e028      	b.n	8000a2a <getKeyInput+0x9a>
		}
		else if (i == 1) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d10a      	bne.n	80009f4 <getKeyInput+0x64>
			KeyReg2[i] = HAL_GPIO_ReadPin(A2_GPIO_Port, A2_Pin); // INC
 80009de:	2110      	movs	r1, #16
 80009e0:	4851      	ldr	r0, [pc, #324]	; (8000b28 <getKeyInput+0x198>)
 80009e2:	f002 f83f 	bl	8002a64 <HAL_GPIO_ReadPin>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4619      	mov	r1, r3
 80009ea:	4a4e      	ldr	r2, [pc, #312]	; (8000b24 <getKeyInput+0x194>)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009f2:	e01a      	b.n	8000a2a <getKeyInput+0x9a>
		}
		else if (i == 2) {
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d10a      	bne.n	8000a10 <getKeyInput+0x80>
			KeyReg2[i] = HAL_GPIO_ReadPin(A3_GPIO_Port, A3_Pin); // SET
 80009fa:	2101      	movs	r1, #1
 80009fc:	484b      	ldr	r0, [pc, #300]	; (8000b2c <getKeyInput+0x19c>)
 80009fe:	f002 f831 	bl	8002a64 <HAL_GPIO_ReadPin>
 8000a02:	4603      	mov	r3, r0
 8000a04:	4619      	mov	r1, r3
 8000a06:	4a47      	ldr	r2, [pc, #284]	; (8000b24 <getKeyInput+0x194>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a0e:	e00c      	b.n	8000a2a <getKeyInput+0x9a>
		}
		else if (i == 3) {
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2b03      	cmp	r3, #3
 8000a14:	d109      	bne.n	8000a2a <getKeyInput+0x9a>
			KeyReg2[i] = HAL_GPIO_ReadPin(A0_GPIO_Port, A0_Pin); // PEDESTRIAN BUTTON
 8000a16:	2180      	movs	r1, #128	; 0x80
 8000a18:	4843      	ldr	r0, [pc, #268]	; (8000b28 <getKeyInput+0x198>)
 8000a1a:	f002 f823 	bl	8002a64 <HAL_GPIO_ReadPin>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	4619      	mov	r1, r3
 8000a22:	4a40      	ldr	r2, [pc, #256]	; (8000b24 <getKeyInput+0x194>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		// Xu li tin hieu
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000a2a:	4a3c      	ldr	r2, [pc, #240]	; (8000b1c <getKeyInput+0x18c>)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a32:	493b      	ldr	r1, [pc, #236]	; (8000b20 <getKeyInput+0x190>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d15a      	bne.n	8000af4 <getKeyInput+0x164>
 8000a3e:	4a37      	ldr	r2, [pc, #220]	; (8000b1c <getKeyInput+0x18c>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a46:	4937      	ldr	r1, [pc, #220]	; (8000b24 <getKeyInput+0x194>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d150      	bne.n	8000af4 <getKeyInput+0x164>
			if (KeyReg3[i] != KeyReg2[i]){
 8000a52:	4a37      	ldr	r2, [pc, #220]	; (8000b30 <getKeyInput+0x1a0>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a5a:	4932      	ldr	r1, [pc, #200]	; (8000b24 <getKeyInput+0x194>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d02c      	beq.n	8000ac0 <getKeyInput+0x130>
				KeyReg3[i] = KeyReg2[i];
 8000a66:	4a2f      	ldr	r2, [pc, #188]	; (8000b24 <getKeyInput+0x194>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a6e:	4930      	ldr	r1, [pc, #192]	; (8000b30 <getKeyInput+0x1a0>)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE){
 8000a76:	4a2b      	ldr	r2, [pc, #172]	; (8000b24 <getKeyInput+0x194>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d13e      	bne.n	8000b00 <getKeyInput+0x170>
					subKeyProcess(i);	// Kich timer_flag[i] = 1;
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ff74 	bl	8000970 <subKeyProcess>
					if (buttonlong_flag[i] == 0) {
 8000a88:	4a2a      	ldr	r2, [pc, #168]	; (8000b34 <getKeyInput+0x1a4>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d10a      	bne.n	8000aaa <getKeyInput+0x11a>
						TimeOutForKeyPress[i] = longkeyPress / TIME_CYCLE; // Set thoi gian dieu kien cho su kien longkeyPress dien ra
 8000a94:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <getKeyInput+0x1a8>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <getKeyInput+0x1ac>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000aa0:	4927      	ldr	r1, [pc, #156]	; (8000b40 <getKeyInput+0x1b0>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 8000aa8:	e02a      	b.n	8000b00 <getKeyInput+0x170>
					}
					else {
						TimeOutForKeyPress[i] = change_statelongkey / TIME_CYCLE;  // Set thoi gian dieu kien cho nhung lan thay doi trang thai tiep theo
 8000aaa:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <getKeyInput+0x1b4>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <getKeyInput+0x1ac>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	fb92 f2f3 	sdiv	r2, r2, r3
 8000ab6:	4922      	ldr	r1, [pc, #136]	; (8000b40 <getKeyInput+0x1b0>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 8000abe:	e01f      	b.n	8000b00 <getKeyInput+0x170>
					}
				}
			} else {
				TimeOutForKeyPress[i]--;
 8000ac0:	4a1f      	ldr	r2, [pc, #124]	; (8000b40 <getKeyInput+0x1b0>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac8:	1e5a      	subs	r2, r3, #1
 8000aca:	491d      	ldr	r1, [pc, #116]	; (8000b40 <getKeyInput+0x1b0>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				// Neu sau khoang thoi gian TimeOutForKeyPress lan dau tien ma van con nhan giu button, thi buttonlong_flag[i] se bang 1, nguoc lai se bang 0
				if (TimeOutForKeyPress[i] == 0){
 8000ad2:	4a1b      	ldr	r2, [pc, #108]	; (8000b40 <getKeyInput+0x1b0>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d110      	bne.n	8000b00 <getKeyInput+0x170>
					KeyReg3[i] = NORMAL_STATE;
 8000ade:	4a14      	ldr	r2, [pc, #80]	; (8000b30 <getKeyInput+0x1a0>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					buttonlong_flag[i] = 1;
 8000ae8:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <getKeyInput+0x1a4>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2101      	movs	r1, #1
 8000aee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 8000af2:	e005      	b.n	8000b00 <getKeyInput+0x170>
				}
			}
		}
		else {
			buttonlong_flag[i] = 0;
 8000af4:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <getKeyInput+0x1a4>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2100      	movs	r1, #0
 8000afa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000afe:	e000      	b.n	8000b02 <getKeyInput+0x172>
			if (KeyReg3[i] != KeyReg2[i]){
 8000b00:	bf00      	nop
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	3301      	adds	r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b03      	cmp	r3, #3
 8000b0c:	f77f af46 	ble.w	800099c <getKeyInput+0xc>
		}
	}
}
 8000b10:	bf00      	nop
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000018 	.word	0x20000018
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20000028 	.word	0x20000028
 8000b28:	40010800 	.word	0x40010800
 8000b2c:	40010c00 	.word	0x40010c00
 8000b30:	20000038 	.word	0x20000038
 8000b34:	200000f4 	.word	0x200000f4
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	20000290 	.word	0x20000290
 8000b40:	20000104 	.word	0x20000104
 8000b44:	20000004 	.word	0x20000004

08000b48 <redl_greenp>:
#include "display.h"

UART_HandleTypeDef huart2;

// Display traffic light
void redl_greenp() {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b52:	480a      	ldr	r0, [pc, #40]	; (8000b7c <redl_greenp+0x34>)
 8000b54:	f001 ff9d 	bl	8002a92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2108      	movs	r1, #8
 8000b5c:	4808      	ldr	r0, [pc, #32]	; (8000b80 <redl_greenp+0x38>)
 8000b5e:	f001 ff98 	bl	8002a92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2120      	movs	r1, #32
 8000b66:	4806      	ldr	r0, [pc, #24]	; (8000b80 <redl_greenp+0x38>)
 8000b68:	f001 ff93 	bl	8002a92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2110      	movs	r1, #16
 8000b70:	4803      	ldr	r0, [pc, #12]	; (8000b80 <redl_greenp+0x38>)
 8000b72:	f001 ff8e 	bl	8002a92 <HAL_GPIO_WritePin>
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40010800 	.word	0x40010800
 8000b80:	40010c00 	.word	0x40010c00

08000b84 <redl_yellowp>:

void redl_yellowp() {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b8e:	480a      	ldr	r0, [pc, #40]	; (8000bb8 <redl_yellowp+0x34>)
 8000b90:	f001 ff7f 	bl	8002a92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2108      	movs	r1, #8
 8000b98:	4808      	ldr	r0, [pc, #32]	; (8000bbc <redl_yellowp+0x38>)
 8000b9a:	f001 ff7a 	bl	8002a92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2120      	movs	r1, #32
 8000ba2:	4806      	ldr	r0, [pc, #24]	; (8000bbc <redl_yellowp+0x38>)
 8000ba4:	f001 ff75 	bl	8002a92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2110      	movs	r1, #16
 8000bac:	4803      	ldr	r0, [pc, #12]	; (8000bbc <redl_yellowp+0x38>)
 8000bae:	f001 ff70 	bl	8002a92 <HAL_GPIO_WritePin>
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40010800 	.word	0x40010800
 8000bbc:	40010c00 	.word	0x40010c00

08000bc0 <redp_greenl>:

void redp_greenl() {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bca:	480a      	ldr	r0, [pc, #40]	; (8000bf4 <redp_greenl+0x34>)
 8000bcc:	f001 ff61 	bl	8002a92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2108      	movs	r1, #8
 8000bd4:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <redp_greenl+0x38>)
 8000bd6:	f001 ff5c 	bl	8002a92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	2120      	movs	r1, #32
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <redp_greenl+0x38>)
 8000be0:	f001 ff57 	bl	8002a92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2110      	movs	r1, #16
 8000be8:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <redp_greenl+0x38>)
 8000bea:	f001 ff52 	bl	8002a92 <HAL_GPIO_WritePin>
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40010800 	.word	0x40010800
 8000bf8:	40010c00 	.word	0x40010c00

08000bfc <redp_yellowl>:

void redp_yellowl() {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c06:	480a      	ldr	r0, [pc, #40]	; (8000c30 <redp_yellowl+0x34>)
 8000c08:	f001 ff43 	bl	8002a92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2108      	movs	r1, #8
 8000c10:	4808      	ldr	r0, [pc, #32]	; (8000c34 <redp_yellowl+0x38>)
 8000c12:	f001 ff3e 	bl	8002a92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	2120      	movs	r1, #32
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <redp_yellowl+0x38>)
 8000c1c:	f001 ff39 	bl	8002a92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2110      	movs	r1, #16
 8000c24:	4803      	ldr	r0, [pc, #12]	; (8000c34 <redp_yellowl+0x38>)
 8000c26:	f001 ff34 	bl	8002a92 <HAL_GPIO_WritePin>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40010800 	.word	0x40010800
 8000c34:	40010c00 	.word	0x40010c00

08000c38 <toggle_red>:

void toggle_red() {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8000c3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c40:	4809      	ldr	r0, [pc, #36]	; (8000c68 <toggle_red+0x30>)
 8000c42:	f001 ff3e 	bl	8002ac2 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2108      	movs	r1, #8
 8000c4a:	4808      	ldr	r0, [pc, #32]	; (8000c6c <toggle_red+0x34>)
 8000c4c:	f001 ff21 	bl	8002a92 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000c50:	2120      	movs	r1, #32
 8000c52:	4806      	ldr	r0, [pc, #24]	; (8000c6c <toggle_red+0x34>)
 8000c54:	f001 ff35 	bl	8002ac2 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2110      	movs	r1, #16
 8000c5c:	4803      	ldr	r0, [pc, #12]	; (8000c6c <toggle_red+0x34>)
 8000c5e:	f001 ff18 	bl	8002a92 <HAL_GPIO_WritePin>
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40010800 	.word	0x40010800
 8000c6c:	40010c00 	.word	0x40010c00

08000c70 <toggle_yellow>:

int toggle = 0;
void toggle_yellow() {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	if (toggle == 0) {
 8000c74:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <toggle_yellow+0x74>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d118      	bne.n	8000cae <toggle_yellow+0x3e>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c82:	4819      	ldr	r0, [pc, #100]	; (8000ce8 <toggle_yellow+0x78>)
 8000c84:	f001 ff05 	bl	8002a92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2108      	movs	r1, #8
 8000c8c:	4817      	ldr	r0, [pc, #92]	; (8000cec <toggle_yellow+0x7c>)
 8000c8e:	f001 ff00 	bl	8002a92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2120      	movs	r1, #32
 8000c96:	4815      	ldr	r0, [pc, #84]	; (8000cec <toggle_yellow+0x7c>)
 8000c98:	f001 fefb 	bl	8002a92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2110      	movs	r1, #16
 8000ca0:	4812      	ldr	r0, [pc, #72]	; (8000cec <toggle_yellow+0x7c>)
 8000ca2:	f001 fef6 	bl	8002a92 <HAL_GPIO_WritePin>
		toggle = 1;
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <toggle_yellow+0x74>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
		toggle = 0;
	}
}
 8000cac:	e017      	b.n	8000cde <toggle_yellow+0x6e>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cb4:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <toggle_yellow+0x78>)
 8000cb6:	f001 feec 	bl	8002a92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2108      	movs	r1, #8
 8000cbe:	480b      	ldr	r0, [pc, #44]	; (8000cec <toggle_yellow+0x7c>)
 8000cc0:	f001 fee7 	bl	8002a92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2120      	movs	r1, #32
 8000cc8:	4808      	ldr	r0, [pc, #32]	; (8000cec <toggle_yellow+0x7c>)
 8000cca:	f001 fee2 	bl	8002a92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2110      	movs	r1, #16
 8000cd2:	4806      	ldr	r0, [pc, #24]	; (8000cec <toggle_yellow+0x7c>)
 8000cd4:	f001 fedd 	bl	8002a92 <HAL_GPIO_WritePin>
		toggle = 0;
 8000cd8:	4b02      	ldr	r3, [pc, #8]	; (8000ce4 <toggle_yellow+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000114 	.word	0x20000114
 8000ce8:	40010800 	.word	0x40010800
 8000cec:	40010c00 	.word	0x40010c00

08000cf0 <toggle_green>:

void toggle_green() {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000cf4:	2108      	movs	r1, #8
 8000cf6:	480a      	ldr	r0, [pc, #40]	; (8000d20 <toggle_green+0x30>)
 8000cf8:	f001 fee3 	bl	8002ac2 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d02:	4808      	ldr	r0, [pc, #32]	; (8000d24 <toggle_green+0x34>)
 8000d04:	f001 fec5 	bl	8002a92 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8000d08:	2110      	movs	r1, #16
 8000d0a:	4805      	ldr	r0, [pc, #20]	; (8000d20 <toggle_green+0x30>)
 8000d0c:	f001 fed9 	bl	8002ac2 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2120      	movs	r1, #32
 8000d14:	4802      	ldr	r0, [pc, #8]	; (8000d20 <toggle_green+0x30>)
 8000d16:	f001 febc 	bl	8002a92 <HAL_GPIO_WritePin>
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40010c00 	.word	0x40010c00
 8000d24:	40010800 	.word	0x40010800

08000d28 <display>:


void display(int counter, UART_HandleTypeDef huart2) {
 8000d28:	b084      	sub	sp, #16
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b084      	sub	sp, #16
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	f107 001c 	add.w	r0, r7, #28
 8000d36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int t = counter / 10;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <display+0x68>)
 8000d3e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d42:	1092      	asrs	r2, r2, #2
 8000d44:	17db      	asrs	r3, r3, #31
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	60fb      	str	r3, [r7, #12]
	int u = counter % 10;
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <display+0x68>)
 8000d4e:	fb83 1302 	smull	r1, r3, r3, r2
 8000d52:	1099      	asrs	r1, r3, #2
 8000d54:	17d3      	asrs	r3, r2, #31
 8000d56:	1ac9      	subs	r1, r1, r3
 8000d58:	460b      	mov	r3, r1
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	60bb      	str	r3, [r7, #8]
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!7SEG=%u%u#\r\n", t, u), 1000);
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	490a      	ldr	r1, [pc, #40]	; (8000d94 <display+0x6c>)
 8000d6a:	480b      	ldr	r0, [pc, #44]	; (8000d98 <display+0x70>)
 8000d6c:	f003 ffc6 	bl	8004cfc <siprintf>
 8000d70:	4603      	mov	r3, r0
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	f107 001c 	add.w	r0, r7, #28
 8000d78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7c:	4906      	ldr	r1, [pc, #24]	; (8000d98 <display+0x70>)
 8000d7e:	f003 faa0 	bl	80042c2 <HAL_UART_Transmit>
}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d8c:	b004      	add	sp, #16
 8000d8e:	4770      	bx	lr
 8000d90:	66666667 	.word	0x66666667
 8000d94:	08005588 	.word	0x08005588
 8000d98:	200001cc 	.word	0x200001cc

08000d9c <update>:

int indexL, indexP;
void update() {
 8000d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d9e:	b091      	sub	sp, #68	; 0x44
 8000da0:	af0e      	add	r7, sp, #56	; 0x38
	if (indexL != -1)
 8000da2:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <update+0x7c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000daa:	d015      	beq.n	8000dd8 <update+0x3c>
		display(indexL, huart2);
 8000dac:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <update+0x7c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	4e1a      	ldr	r6, [pc, #104]	; (8000e1c <update+0x80>)
 8000db4:	466d      	mov	r5, sp
 8000db6:	f106 040c 	add.w	r4, r6, #12
 8000dba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000dca:	e885 0003 	stmia.w	r5, {r0, r1}
 8000dce:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffa8 	bl	8000d28 <display>
	if (indexP != -1)
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <update+0x84>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de0:	d015      	beq.n	8000e0e <update+0x72>
		display(indexP, huart2);
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <update+0x84>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	4e0c      	ldr	r6, [pc, #48]	; (8000e1c <update+0x80>)
 8000dea:	466d      	mov	r5, sp
 8000dec:	f106 040c 	add.w	r4, r6, #12
 8000df0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000df2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000df4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000df6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000df8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e00:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e04:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ff8d 	bl	8000d28 <display>
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000180 	.word	0x20000180
 8000e1c:	20000188 	.word	0x20000188
 8000e20:	20000178 	.word	0x20000178

08000e24 <updateClockBufferMode1>:


int counterL, counterP;
void updateClockBufferMode1() {
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
	// Cap nhat gia tri thoi gian vao trong clockBuffer
	// Doi voi Landscape
	/* Den RED-Landscape sang (dem nguoc tu RED-1 -> 0) */
	if (counterL <= RED) {
 8000e28:	4b58      	ldr	r3, [pc, #352]	; (8000f8c <updateClockBufferMode1+0x168>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b58      	ldr	r3, [pc, #352]	; (8000f90 <updateClockBufferMode1+0x16c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	dc0b      	bgt.n	8000e4c <updateClockBufferMode1+0x28>
		indexL = RED - counterL;
 8000e34:	4b56      	ldr	r3, [pc, #344]	; (8000f90 <updateClockBufferMode1+0x16c>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b54      	ldr	r3, [pc, #336]	; (8000f8c <updateClockBufferMode1+0x168>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	4a55      	ldr	r2, [pc, #340]	; (8000f94 <updateClockBufferMode1+0x170>)
 8000e40:	6013      	str	r3, [r2, #0]
		sec_RED = indexL;
 8000e42:	4b54      	ldr	r3, [pc, #336]	; (8000f94 <updateClockBufferMode1+0x170>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a54      	ldr	r2, [pc, #336]	; (8000f98 <updateClockBufferMode1+0x174>)
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	e02c      	b.n	8000ea6 <updateClockBufferMode1+0x82>
	}
	/* Den GREEN-Landscape sang (dem nguoc tu GREEN-1 -> 0) */
	else if (counterL <= (RED + GREEN)) {
 8000e4c:	4b50      	ldr	r3, [pc, #320]	; (8000f90 <updateClockBufferMode1+0x16c>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b52      	ldr	r3, [pc, #328]	; (8000f9c <updateClockBufferMode1+0x178>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	441a      	add	r2, r3
 8000e56:	4b4d      	ldr	r3, [pc, #308]	; (8000f8c <updateClockBufferMode1+0x168>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	db0a      	blt.n	8000e74 <updateClockBufferMode1+0x50>
		indexL = RED + GREEN - counterL;
 8000e5e:	4b4c      	ldr	r3, [pc, #304]	; (8000f90 <updateClockBufferMode1+0x16c>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4b4e      	ldr	r3, [pc, #312]	; (8000f9c <updateClockBufferMode1+0x178>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	441a      	add	r2, r3
 8000e68:	4b48      	ldr	r3, [pc, #288]	; (8000f8c <updateClockBufferMode1+0x168>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	4a49      	ldr	r2, [pc, #292]	; (8000f94 <updateClockBufferMode1+0x170>)
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	e018      	b.n	8000ea6 <updateClockBufferMode1+0x82>
	}
	/* Den YELLOW-Landscape sang (dem nguoc tu YELLOW-1 -> 0) */
	else if (counterL <= (RED + GREEN + YELLOW)){
 8000e74:	4b46      	ldr	r3, [pc, #280]	; (8000f90 <updateClockBufferMode1+0x16c>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b48      	ldr	r3, [pc, #288]	; (8000f9c <updateClockBufferMode1+0x178>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	441a      	add	r2, r3
 8000e7e:	4b48      	ldr	r3, [pc, #288]	; (8000fa0 <updateClockBufferMode1+0x17c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	441a      	add	r2, r3
 8000e84:	4b41      	ldr	r3, [pc, #260]	; (8000f8c <updateClockBufferMode1+0x168>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	db0c      	blt.n	8000ea6 <updateClockBufferMode1+0x82>
		indexL = RED + GREEN + YELLOW - counterL;
 8000e8c:	4b40      	ldr	r3, [pc, #256]	; (8000f90 <updateClockBufferMode1+0x16c>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b42      	ldr	r3, [pc, #264]	; (8000f9c <updateClockBufferMode1+0x178>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	441a      	add	r2, r3
 8000e96:	4b42      	ldr	r3, [pc, #264]	; (8000fa0 <updateClockBufferMode1+0x17c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	441a      	add	r2, r3
 8000e9c:	4b3b      	ldr	r3, [pc, #236]	; (8000f8c <updateClockBufferMode1+0x168>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	4a3c      	ldr	r2, [pc, #240]	; (8000f94 <updateClockBufferMode1+0x170>)
 8000ea4:	6013      	str	r3, [r2, #0]
	}
	counterL++;
 8000ea6:	4b39      	ldr	r3, [pc, #228]	; (8000f8c <updateClockBufferMode1+0x168>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	4a37      	ldr	r2, [pc, #220]	; (8000f8c <updateClockBufferMode1+0x168>)
 8000eae:	6013      	str	r3, [r2, #0]
	/* Neu thoi gian YELLOW-Landscape ket thuc, quay tro lai setup thoi gian cho RED-Landscape sang lai */
	if (counterL > RED + YELLOW + GREEN) {
 8000eb0:	4b37      	ldr	r3, [pc, #220]	; (8000f90 <updateClockBufferMode1+0x16c>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b3a      	ldr	r3, [pc, #232]	; (8000fa0 <updateClockBufferMode1+0x17c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	441a      	add	r2, r3
 8000eba:	4b38      	ldr	r3, [pc, #224]	; (8000f9c <updateClockBufferMode1+0x178>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	441a      	add	r2, r3
 8000ec0:	4b32      	ldr	r3, [pc, #200]	; (8000f8c <updateClockBufferMode1+0x168>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	da0d      	bge.n	8000ee4 <updateClockBufferMode1+0xc0>
		counterL = 1;
 8000ec8:	4b30      	ldr	r3, [pc, #192]	; (8000f8c <updateClockBufferMode1+0x168>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	601a      	str	r2, [r3, #0]
		indexL = RED - counterL;
 8000ece:	4b30      	ldr	r3, [pc, #192]	; (8000f90 <updateClockBufferMode1+0x16c>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	4b2e      	ldr	r3, [pc, #184]	; (8000f8c <updateClockBufferMode1+0x168>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	4a2e      	ldr	r2, [pc, #184]	; (8000f94 <updateClockBufferMode1+0x170>)
 8000eda:	6013      	str	r3, [r2, #0]
		sec_RED = indexL;
 8000edc:	4b2d      	ldr	r3, [pc, #180]	; (8000f94 <updateClockBufferMode1+0x170>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a2d      	ldr	r2, [pc, #180]	; (8000f98 <updateClockBufferMode1+0x174>)
 8000ee2:	6013      	str	r3, [r2, #0]



	// Doi voi 2 LED 7-SEG Portrait
	/* Den GREEN-Portrait sang (dem nguoc tu GREEN-1 -> 0) */
	if (counterP <= GREEN) {
 8000ee4:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <updateClockBufferMode1+0x180>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b2c      	ldr	r3, [pc, #176]	; (8000f9c <updateClockBufferMode1+0x178>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	dc07      	bgt.n	8000f00 <updateClockBufferMode1+0xdc>
		indexP = GREEN - counterP;
 8000ef0:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <updateClockBufferMode1+0x178>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b2b      	ldr	r3, [pc, #172]	; (8000fa4 <updateClockBufferMode1+0x180>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	4a2b      	ldr	r2, [pc, #172]	; (8000fa8 <updateClockBufferMode1+0x184>)
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	e02c      	b.n	8000f5a <updateClockBufferMode1+0x136>
	}
	/* Den YELLOW-Portrait sang (dem nguoc tu YELLOW-1 -> 0) */
	else if (counterP <= (YELLOW + GREEN)) {
 8000f00:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <updateClockBufferMode1+0x17c>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b25      	ldr	r3, [pc, #148]	; (8000f9c <updateClockBufferMode1+0x178>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	441a      	add	r2, r3
 8000f0a:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <updateClockBufferMode1+0x180>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	db0a      	blt.n	8000f28 <updateClockBufferMode1+0x104>
		indexP = YELLOW + GREEN - counterP;
 8000f12:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <updateClockBufferMode1+0x17c>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <updateClockBufferMode1+0x178>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	441a      	add	r2, r3
 8000f1c:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <updateClockBufferMode1+0x180>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	4a21      	ldr	r2, [pc, #132]	; (8000fa8 <updateClockBufferMode1+0x184>)
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	e018      	b.n	8000f5a <updateClockBufferMode1+0x136>
	}
	/* Den RED-Portrait sang (dem nguoc tu RED-1 -> 0) */
	else if (counterP <= (RED + GREEN + YELLOW)) {
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <updateClockBufferMode1+0x16c>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <updateClockBufferMode1+0x178>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	441a      	add	r2, r3
 8000f32:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <updateClockBufferMode1+0x17c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	441a      	add	r2, r3
 8000f38:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <updateClockBufferMode1+0x180>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	db0c      	blt.n	8000f5a <updateClockBufferMode1+0x136>
		indexP = RED + GREEN + YELLOW - counterP;
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <updateClockBufferMode1+0x16c>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <updateClockBufferMode1+0x178>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	441a      	add	r2, r3
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <updateClockBufferMode1+0x17c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	441a      	add	r2, r3
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <updateClockBufferMode1+0x180>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <updateClockBufferMode1+0x184>)
 8000f58:	6013      	str	r3, [r2, #0]
	}
	counterP++;
 8000f5a:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <updateClockBufferMode1+0x180>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <updateClockBufferMode1+0x180>)
 8000f62:	6013      	str	r3, [r2, #0]
	/* Neu thoi gian RED-Portrait ket thuc, quay tro lai setup thoi gian cho GREEN-Portrait sang lai */
	if (counterP > RED + YELLOW + GREEN) counterP = 1;
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <updateClockBufferMode1+0x16c>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <updateClockBufferMode1+0x17c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	441a      	add	r2, r3
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <updateClockBufferMode1+0x178>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	441a      	add	r2, r3
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <updateClockBufferMode1+0x180>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	da02      	bge.n	8000f82 <updateClockBufferMode1+0x15e>
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <updateClockBufferMode1+0x180>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	601a      	str	r2, [r3, #0]
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000184 	.word	0x20000184
 8000f90:	2000004c 	.word	0x2000004c
 8000f94:	20000180 	.word	0x20000180
 8000f98:	2000011c 	.word	0x2000011c
 8000f9c:	20000054 	.word	0x20000054
 8000fa0:	20000050 	.word	0x20000050
 8000fa4:	2000017c 	.word	0x2000017c
 8000fa8:	20000178 	.word	0x20000178

08000fac <updateClockBufferRed>:

void updateClockBufferRed() {
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
	// Hien thi value RED
	indexL = RED;
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <updateClockBufferRed+0x1c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <updateClockBufferRed+0x20>)
 8000fb6:	6013      	str	r3, [r2, #0]
	indexP = -1;
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <updateClockBufferRed+0x24>)
 8000fba:	f04f 32ff 	mov.w	r2, #4294967295
 8000fbe:	601a      	str	r2, [r3, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	2000004c 	.word	0x2000004c
 8000fcc:	20000180 	.word	0x20000180
 8000fd0:	20000178 	.word	0x20000178

08000fd4 <updateClockBufferYellow>:

void updateClockBufferYellow() {
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
	// Hien thi value YELLOW
	indexL = YELLOW;
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <updateClockBufferYellow+0x1c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <updateClockBufferYellow+0x20>)
 8000fde:	6013      	str	r3, [r2, #0]
	indexP = -1;
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <updateClockBufferYellow+0x24>)
 8000fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe6:	601a      	str	r2, [r3, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	20000050 	.word	0x20000050
 8000ff4:	20000180 	.word	0x20000180
 8000ff8:	20000178 	.word	0x20000178

08000ffc <updateClockBufferGreen>:

void updateClockBufferGreen() {
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
	// Hien thi value GREEN
	indexL = GREEN;
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <updateClockBufferGreen+0x1c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a05      	ldr	r2, [pc, #20]	; (800101c <updateClockBufferGreen+0x20>)
 8001006:	6013      	str	r3, [r2, #0]
	indexP = -1;
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <updateClockBufferGreen+0x24>)
 800100a:	f04f 32ff 	mov.w	r2, #4294967295
 800100e:	601a      	str	r2, [r3, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	20000054 	.word	0x20000054
 800101c:	20000180 	.word	0x20000180
 8001020:	20000178 	.word	0x20000178

08001024 <fsm_pedestrian_light>:
 */

#include "fsm_pedestrian_light.h"


void fsm_pedestrian_light(TIM_HandleTypeDef htim3){
 8001024:	b084      	sub	sp, #16
 8001026:	b580      	push	{r7, lr}
 8001028:	af00      	add	r7, sp, #0
 800102a:	f107 0c08 	add.w	ip, r7, #8
 800102e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//	sec_RED = RED - counterL;
	if (isButtonPressed(3) == 1){
 8001032:	2003      	movs	r0, #3
 8001034:	f7ff fc82 	bl	800093c <isButtonPressed>
 8001038:	4603      	mov	r3, r0
 800103a:	2b01      	cmp	r3, #1
 800103c:	d11e      	bne.n	800107c <fsm_pedestrian_light+0x58>
		setTimer(4, (RED + YELLOW + GREEN) * 2000);
 800103e:	4baf      	ldr	r3, [pc, #700]	; (80012fc <fsm_pedestrian_light+0x2d8>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	4baf      	ldr	r3, [pc, #700]	; (8001300 <fsm_pedestrian_light+0x2dc>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	441a      	add	r2, r3
 8001048:	4bae      	ldr	r3, [pc, #696]	; (8001304 <fsm_pedestrian_light+0x2e0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4413      	add	r3, r2
 800104e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001052:	fb02 f303 	mul.w	r3, r2, r3
 8001056:	4619      	mov	r1, r3
 8001058:	2004      	movs	r0, #4
 800105a:	f000 ff5f 	bl	8001f1c <setTimer>
		//__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, 0);
		//setPWM(0);
		timer_counter[6] = 0;
 800105e:	4baa      	ldr	r3, [pc, #680]	; (8001308 <fsm_pedestrian_light+0x2e4>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
		timer_flag[6] = 0;
 8001064:	4ba9      	ldr	r3, [pc, #676]	; (800130c <fsm_pedestrian_light+0x2e8>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]
		timer_counter[7] = 0;
 800106a:	4ba7      	ldr	r3, [pc, #668]	; (8001308 <fsm_pedestrian_light+0x2e4>)
 800106c:	2200      	movs	r2, #0
 800106e:	61da      	str	r2, [r3, #28]
		timer_flag[7] = 0;
 8001070:	4ba6      	ldr	r3, [pc, #664]	; (800130c <fsm_pedestrian_light+0x2e8>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
		timer_flag[5] = 1;
 8001076:	4ba5      	ldr	r3, [pc, #660]	; (800130c <fsm_pedestrian_light+0x2e8>)
 8001078:	2201      	movs	r2, #1
 800107a:	615a      	str	r2, [r3, #20]
	}
	if (timer_flag[4] == 0) {
 800107c:	4ba3      	ldr	r3, [pc, #652]	; (800130c <fsm_pedestrian_light+0x2e8>)
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	2b00      	cmp	r3, #0
 8001082:	f040 8122 	bne.w	80012ca <fsm_pedestrian_light+0x2a6>
		switch (status){
 8001086:	4ba2      	ldr	r3, [pc, #648]	; (8001310 <fsm_pedestrian_light+0x2ec>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	3b0b      	subs	r3, #11
 800108c:	2b03      	cmp	r3, #3
 800108e:	f200 8103 	bhi.w	8001298 <fsm_pedestrian_light+0x274>
 8001092:	a201      	add	r2, pc, #4	; (adr r2, 8001098 <fsm_pedestrian_light+0x74>)
 8001094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001098:	080010a9 	.word	0x080010a9
 800109c:	08001171 	.word	0x08001171
 80010a0:	08001241 	.word	0x08001241
 80010a4:	0800126d 	.word	0x0800126d
		case AUTO_REDL_GREENP:
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ae:	4899      	ldr	r0, [pc, #612]	; (8001314 <fsm_pedestrian_light+0x2f0>)
 80010b0:	f001 fcef 	bl	8002a92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 1);
 80010b4:	2201      	movs	r2, #1
 80010b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ba:	4897      	ldr	r0, [pc, #604]	; (8001318 <fsm_pedestrian_light+0x2f4>)
 80010bc:	f001 fce9 	bl	8002a92 <HAL_GPIO_WritePin>
			//sec_RED = RED - counterL;
			if (sec_RED <= 10 && sec_RED > 0){
 80010c0:	4b96      	ldr	r3, [pc, #600]	; (800131c <fsm_pedestrian_light+0x2f8>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b0a      	cmp	r3, #10
 80010c6:	dc40      	bgt.n	800114a <fsm_pedestrian_light+0x126>
 80010c8:	4b94      	ldr	r3, [pc, #592]	; (800131c <fsm_pedestrian_light+0x2f8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	dd3c      	ble.n	800114a <fsm_pedestrian_light+0x126>
				if (timer_counter[6] == 0 && timer_counter[7] == 0 && !timer_flag[6] && !timer_flag[7]){
 80010d0:	4b8d      	ldr	r3, [pc, #564]	; (8001308 <fsm_pedestrian_light+0x2e4>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d114      	bne.n	8001102 <fsm_pedestrian_light+0xde>
 80010d8:	4b8b      	ldr	r3, [pc, #556]	; (8001308 <fsm_pedestrian_light+0x2e4>)
 80010da:	69db      	ldr	r3, [r3, #28]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d110      	bne.n	8001102 <fsm_pedestrian_light+0xde>
 80010e0:	4b8a      	ldr	r3, [pc, #552]	; (800130c <fsm_pedestrian_light+0x2e8>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d10c      	bne.n	8001102 <fsm_pedestrian_light+0xde>
 80010e8:	4b88      	ldr	r3, [pc, #544]	; (800130c <fsm_pedestrian_light+0x2e8>)
 80010ea:	69db      	ldr	r3, [r3, #28]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d108      	bne.n	8001102 <fsm_pedestrian_light+0xde>
					setTimer(6, sec_RED*100);
 80010f0:	4b8a      	ldr	r3, [pc, #552]	; (800131c <fsm_pedestrian_light+0x2f8>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2264      	movs	r2, #100	; 0x64
 80010f6:	fb02 f303 	mul.w	r3, r2, r3
 80010fa:	4619      	mov	r1, r3
 80010fc:	2006      	movs	r0, #6
 80010fe:	f000 ff0d 	bl	8001f1c <setTimer>
				}
				if (timer_flag[6]){
 8001102:	4b82      	ldr	r3, [pc, #520]	; (800130c <fsm_pedestrian_light+0x2e8>)
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d014      	beq.n	8001134 <fsm_pedestrian_light+0x110>
					timer_flag[6] = 0;
 800110a:	4b80      	ldr	r3, [pc, #512]	; (800130c <fsm_pedestrian_light+0x2e8>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
					__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, (10 - sec_RED)*9);
 8001110:	4b82      	ldr	r3, [pc, #520]	; (800131c <fsm_pedestrian_light+0x2f8>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f1c3 020a 	rsb	r2, r3, #10
 8001118:	4613      	mov	r3, r2
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	441a      	add	r2, r3
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	635a      	str	r2, [r3, #52]	; 0x34
					setTimer(7, sec_RED*100);
 8001122:	4b7e      	ldr	r3, [pc, #504]	; (800131c <fsm_pedestrian_light+0x2f8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2264      	movs	r2, #100	; 0x64
 8001128:	fb02 f303 	mul.w	r3, r2, r3
 800112c:	4619      	mov	r1, r3
 800112e:	2007      	movs	r0, #7
 8001130:	f000 fef4 	bl	8001f1c <setTimer>
					//setPWM((10 - sec_RED)*50-1);
				}
				if (timer_flag[7]){
 8001134:	4b75      	ldr	r3, [pc, #468]	; (800130c <fsm_pedestrian_light+0x2e8>)
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d018      	beq.n	800116e <fsm_pedestrian_light+0x14a>
					timer_flag[7] = 0;
 800113c:	4b73      	ldr	r3, [pc, #460]	; (800130c <fsm_pedestrian_light+0x2e8>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
					__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, 0);
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	2200      	movs	r2, #0
 8001146:	635a      	str	r2, [r3, #52]	; 0x34
				if (timer_flag[7]){
 8001148:	e011      	b.n	800116e <fsm_pedestrian_light+0x14a>
					//setPWM(0);
				}
			  }
			else {
				if (sec_RED == 0){__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, (10 - sec_RED)*9);}
 800114a:	4b74      	ldr	r3, [pc, #464]	; (800131c <fsm_pedestrian_light+0x2f8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d109      	bne.n	8001166 <fsm_pedestrian_light+0x142>
 8001152:	4b72      	ldr	r3, [pc, #456]	; (800131c <fsm_pedestrian_light+0x2f8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f1c3 020a 	rsb	r2, r3, #10
 800115a:	4613      	mov	r3, r2
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	441a      	add	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	635a      	str	r2, [r3, #52]	; 0x34
				else {
				__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, 0);
				}
				//setPWM(0);
			}
			break;
 8001164:	e0dd      	b.n	8001322 <fsm_pedestrian_light+0x2fe>
				__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, 0);
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	2200      	movs	r2, #0
 800116a:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800116c:	e0d9      	b.n	8001322 <fsm_pedestrian_light+0x2fe>
 800116e:	e0d8      	b.n	8001322 <fsm_pedestrian_light+0x2fe>
		case AUTO_REDL_YELLOWP:
			//sec_RED = RED - counterL;
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001176:	4867      	ldr	r0, [pc, #412]	; (8001314 <fsm_pedestrian_light+0x2f0>)
 8001178:	f001 fc8b 	bl	8002a92 <HAL_GPIO_WritePin>
			if (timer_flag[5] == 1){
 800117c:	4b63      	ldr	r3, [pc, #396]	; (800130c <fsm_pedestrian_light+0x2e8>)
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d109      	bne.n	8001198 <fsm_pedestrian_light+0x174>
				HAL_GPIO_TogglePin(D7_GPIO_Port, D7_Pin);
 8001184:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001188:	4863      	ldr	r0, [pc, #396]	; (8001318 <fsm_pedestrian_light+0x2f4>)
 800118a:	f001 fc9a 	bl	8002ac2 <HAL_GPIO_TogglePin>
				setTimer(5, 500);
 800118e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001192:	2005      	movs	r0, #5
 8001194:	f000 fec2 	bl	8001f1c <setTimer>
			}
			if (sec_RED > 0){
 8001198:	4b60      	ldr	r3, [pc, #384]	; (800131c <fsm_pedestrian_light+0x2f8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	dd3d      	ble.n	800121c <fsm_pedestrian_light+0x1f8>
				if (timer_counter[6] == 0 && timer_counter[7] == 0 && !timer_flag[6] && !timer_flag[7]){
 80011a0:	4b59      	ldr	r3, [pc, #356]	; (8001308 <fsm_pedestrian_light+0x2e4>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d114      	bne.n	80011d2 <fsm_pedestrian_light+0x1ae>
 80011a8:	4b57      	ldr	r3, [pc, #348]	; (8001308 <fsm_pedestrian_light+0x2e4>)
 80011aa:	69db      	ldr	r3, [r3, #28]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d110      	bne.n	80011d2 <fsm_pedestrian_light+0x1ae>
 80011b0:	4b56      	ldr	r3, [pc, #344]	; (800130c <fsm_pedestrian_light+0x2e8>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d10c      	bne.n	80011d2 <fsm_pedestrian_light+0x1ae>
 80011b8:	4b54      	ldr	r3, [pc, #336]	; (800130c <fsm_pedestrian_light+0x2e8>)
 80011ba:	69db      	ldr	r3, [r3, #28]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d108      	bne.n	80011d2 <fsm_pedestrian_light+0x1ae>
					setTimer(6, sec_RED*100);
 80011c0:	4b56      	ldr	r3, [pc, #344]	; (800131c <fsm_pedestrian_light+0x2f8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2264      	movs	r2, #100	; 0x64
 80011c6:	fb02 f303 	mul.w	r3, r2, r3
 80011ca:	4619      	mov	r1, r3
 80011cc:	2006      	movs	r0, #6
 80011ce:	f000 fea5 	bl	8001f1c <setTimer>
				}
				if (timer_flag[6]){
 80011d2:	4b4e      	ldr	r3, [pc, #312]	; (800130c <fsm_pedestrian_light+0x2e8>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d014      	beq.n	8001204 <fsm_pedestrian_light+0x1e0>
					timer_flag[6] = 0;
 80011da:	4b4c      	ldr	r3, [pc, #304]	; (800130c <fsm_pedestrian_light+0x2e8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
					__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, (10-sec_RED)*9);
 80011e0:	4b4e      	ldr	r3, [pc, #312]	; (800131c <fsm_pedestrian_light+0x2f8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f1c3 020a 	rsb	r2, r3, #10
 80011e8:	4613      	mov	r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	441a      	add	r2, r3
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	635a      	str	r2, [r3, #52]	; 0x34
					setTimer(7, sec_RED*100);
 80011f2:	4b4a      	ldr	r3, [pc, #296]	; (800131c <fsm_pedestrian_light+0x2f8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2264      	movs	r2, #100	; 0x64
 80011f8:	fb02 f303 	mul.w	r3, r2, r3
 80011fc:	4619      	mov	r1, r3
 80011fe:	2007      	movs	r0, #7
 8001200:	f000 fe8c 	bl	8001f1c <setTimer>
					//setPWM((10-sec_RED)*50-1);
				}
				if (timer_flag[7]){
 8001204:	4b41      	ldr	r3, [pc, #260]	; (800130c <fsm_pedestrian_light+0x2e8>)
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	2b00      	cmp	r3, #0
 800120a:	f000 8089 	beq.w	8001320 <fsm_pedestrian_light+0x2fc>
					timer_flag[7] = 0;
 800120e:	4b3f      	ldr	r3, [pc, #252]	; (800130c <fsm_pedestrian_light+0x2e8>)
 8001210:	2200      	movs	r2, #0
 8001212:	61da      	str	r2, [r3, #28]
					__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, 0);
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	2200      	movs	r2, #0
 8001218:	635a      	str	r2, [r3, #52]	; 0x34
				else {
				__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, 0);
				}
				//setPWM(0);
			}
			break;
 800121a:	e081      	b.n	8001320 <fsm_pedestrian_light+0x2fc>
				if (sec_RED == 0){__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, (10 - sec_RED)*9);}
 800121c:	4b3f      	ldr	r3, [pc, #252]	; (800131c <fsm_pedestrian_light+0x2f8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d109      	bne.n	8001238 <fsm_pedestrian_light+0x214>
 8001224:	4b3d      	ldr	r3, [pc, #244]	; (800131c <fsm_pedestrian_light+0x2f8>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f1c3 020a 	rsb	r2, r3, #10
 800122c:	4613      	mov	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	441a      	add	r2, r3
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001236:	e073      	b.n	8001320 <fsm_pedestrian_light+0x2fc>
				__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, 0);
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	2200      	movs	r2, #0
 800123c:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800123e:	e06f      	b.n	8001320 <fsm_pedestrian_light+0x2fc>
		case AUTO_REDP_GREENL:
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 8001240:	2201      	movs	r2, #1
 8001242:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001246:	4833      	ldr	r0, [pc, #204]	; (8001314 <fsm_pedestrian_light+0x2f0>)
 8001248:	f001 fc23 	bl	8002a92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001252:	4831      	ldr	r0, [pc, #196]	; (8001318 <fsm_pedestrian_light+0x2f4>)
 8001254:	f001 fc1d 	bl	8002a92 <HAL_GPIO_WritePin>
			__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, 0);
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	2200      	movs	r2, #0
 800125c:	635a      	str	r2, [r3, #52]	; 0x34
			clearTimer(6);
 800125e:	2006      	movs	r0, #6
 8001260:	f000 fe7a 	bl	8001f58 <clearTimer>
			clearTimer(7);
 8001264:	2007      	movs	r0, #7
 8001266:	f000 fe77 	bl	8001f58 <clearTimer>
			//setPWM(0);
			break;
 800126a:	e05a      	b.n	8001322 <fsm_pedestrian_light+0x2fe>
		case AUTO_REDP_YELLOWL:
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 800126c:	2201      	movs	r2, #1
 800126e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001272:	4828      	ldr	r0, [pc, #160]	; (8001314 <fsm_pedestrian_light+0x2f0>)
 8001274:	f001 fc0d 	bl	8002a92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800127e:	4826      	ldr	r0, [pc, #152]	; (8001318 <fsm_pedestrian_light+0x2f4>)
 8001280:	f001 fc07 	bl	8002a92 <HAL_GPIO_WritePin>
			__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, 0);
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	2200      	movs	r2, #0
 8001288:	635a      	str	r2, [r3, #52]	; 0x34
			clearTimer(6);
 800128a:	2006      	movs	r0, #6
 800128c:	f000 fe64 	bl	8001f58 <clearTimer>
			clearTimer(7);
 8001290:	2007      	movs	r0, #7
 8001292:	f000 fe61 	bl	8001f58 <clearTimer>
			//setPWM(0);
			break;
 8001296:	e044      	b.n	8001322 <fsm_pedestrian_light+0x2fe>
		default:
			timer_flag[4] = 1;
 8001298:	4b1c      	ldr	r3, [pc, #112]	; (800130c <fsm_pedestrian_light+0x2e8>)
 800129a:	2201      	movs	r2, #1
 800129c:	611a      	str	r2, [r3, #16]
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012a4:	481b      	ldr	r0, [pc, #108]	; (8001314 <fsm_pedestrian_light+0x2f0>)
 80012a6:	f001 fbf4 	bl	8002a92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012b0:	4819      	ldr	r0, [pc, #100]	; (8001318 <fsm_pedestrian_light+0x2f4>)
 80012b2:	f001 fbee 	bl	8002a92 <HAL_GPIO_WritePin>
			__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, 0);
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	2200      	movs	r2, #0
 80012ba:	635a      	str	r2, [r3, #52]	; 0x34
			clearTimer(6);
 80012bc:	2006      	movs	r0, #6
 80012be:	f000 fe4b 	bl	8001f58 <clearTimer>
			clearTimer(7);
 80012c2:	2007      	movs	r0, #7
 80012c4:	f000 fe48 	bl	8001f58 <clearTimer>
			//setPWM(0);
			break;
 80012c8:	e02b      	b.n	8001322 <fsm_pedestrian_light+0x2fe>
		}
	} else {
		timer_flag[4] = 1;
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <fsm_pedestrian_light+0x2e8>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	611a      	str	r2, [r3, #16]
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012d6:	480f      	ldr	r0, [pc, #60]	; (8001314 <fsm_pedestrian_light+0x2f0>)
 80012d8:	f001 fbdb 	bl	8002a92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 80012dc:	2200      	movs	r2, #0
 80012de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e2:	480d      	ldr	r0, [pc, #52]	; (8001318 <fsm_pedestrian_light+0x2f4>)
 80012e4:	f001 fbd5 	bl	8002a92 <HAL_GPIO_WritePin>
		__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, 0);
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	2200      	movs	r2, #0
 80012ec:	635a      	str	r2, [r3, #52]	; 0x34
		clearTimer(6);
 80012ee:	2006      	movs	r0, #6
 80012f0:	f000 fe32 	bl	8001f58 <clearTimer>
		clearTimer(7);
 80012f4:	2007      	movs	r0, #7
 80012f6:	f000 fe2f 	bl	8001f58 <clearTimer>
		//setPWM(0);
	}
}
 80012fa:	e012      	b.n	8001322 <fsm_pedestrian_light+0x2fe>
 80012fc:	2000004c 	.word	0x2000004c
 8001300:	20000050 	.word	0x20000050
 8001304:	20000054 	.word	0x20000054
 8001308:	20000124 	.word	0x20000124
 800130c:	20000148 	.word	0x20000148
 8001310:	20000118 	.word	0x20000118
 8001314:	40010c00 	.word	0x40010c00
 8001318:	40010800 	.word	0x40010800
 800131c:	2000011c 	.word	0x2000011c
			break;
 8001320:	bf00      	nop
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800132a:	b004      	add	sp, #16
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop

08001330 <fsm_traffic_light>:

#include "fsm_traffic_light.h"

int man_status = 1;

void fsm_traffic_light() {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
	switch(status){
 8001336:	4bbe      	ldr	r3, [pc, #760]	; (8001630 <fsm_traffic_light+0x300>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b21      	cmp	r3, #33	; 0x21
 800133c:	f200 834b 	bhi.w	80019d6 <fsm_traffic_light+0x6a6>
 8001340:	a201      	add	r2, pc, #4	; (adr r2, 8001348 <fsm_traffic_light+0x18>)
 8001342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001346:	bf00      	nop
 8001348:	080013d1 	.word	0x080013d1
 800134c:	080013d9 	.word	0x080013d9
 8001350:	08001651 	.word	0x08001651
 8001354:	08001781 	.word	0x08001781
 8001358:	080019d7 	.word	0x080019d7
 800135c:	080019d7 	.word	0x080019d7
 8001360:	080019d7 	.word	0x080019d7
 8001364:	080019d7 	.word	0x080019d7
 8001368:	080019d7 	.word	0x080019d7
 800136c:	080019d7 	.word	0x080019d7
 8001370:	080019d7 	.word	0x080019d7
 8001374:	080014d9 	.word	0x080014d9
 8001378:	0800152f 	.word	0x0800152f
 800137c:	08001585 	.word	0x08001585
 8001380:	080015db 	.word	0x080015db
 8001384:	080019d7 	.word	0x080019d7
 8001388:	080019d7 	.word	0x080019d7
 800138c:	080019d7 	.word	0x080019d7
 8001390:	080019d7 	.word	0x080019d7
 8001394:	080019d7 	.word	0x080019d7
 8001398:	080019d7 	.word	0x080019d7
 800139c:	08001671 	.word	0x08001671
 80013a0:	080016b5 	.word	0x080016b5
 80013a4:	080016f9 	.word	0x080016f9
 80013a8:	0800173d 	.word	0x0800173d
 80013ac:	080019d7 	.word	0x080019d7
 80013b0:	080019d7 	.word	0x080019d7
 80013b4:	080019d7 	.word	0x080019d7
 80013b8:	080019d7 	.word	0x080019d7
 80013bc:	080019d7 	.word	0x080019d7
 80013c0:	080019d7 	.word	0x080019d7
 80013c4:	080017ab 	.word	0x080017ab
 80013c8:	0800184d 	.word	0x0800184d
 80013cc:	08001931 	.word	0x08001931

//----------------------------------------------------------------------------------------------
// MODE INIT
	case INIT:
		// Chuyen ve trang thai mode 1
		status = MODE1;
 80013d0:	4b97      	ldr	r3, [pc, #604]	; (8001630 <fsm_traffic_light+0x300>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]
		break;
 80013d6:	e315      	b.n	8001a04 <fsm_traffic_light+0x6d4>

//----------------------------------------------------------------------------------------------
// MODE 1: AUTOMATIC MODE
	case MODE1:
		// Chuyen ve trang thai period AUTO_REDL_GREENP
		switch(man_status) {
 80013d8:	4b96      	ldr	r3, [pc, #600]	; (8001634 <fsm_traffic_light+0x304>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	3b01      	subs	r3, #1
 80013de:	2b03      	cmp	r3, #3
 80013e0:	d86c      	bhi.n	80014bc <fsm_traffic_light+0x18c>
 80013e2:	a201      	add	r2, pc, #4	; (adr r2, 80013e8 <fsm_traffic_light+0xb8>)
 80013e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e8:	080013f9 	.word	0x080013f9
 80013ec:	08001421 	.word	0x08001421
 80013f0:	08001451 	.word	0x08001451
 80013f4:	08001481 	.word	0x08001481
		// Xac dinh trang thai manual set lan gan nhat de setup sang trang thai auto tuong ung
		// Setup ban dau va cap nhat gia tri
		case 1:	// AUTO_REDL_GREENP
			status = AUTO_REDL_GREENP;
 80013f8:	4b8d      	ldr	r3, [pc, #564]	; (8001630 <fsm_traffic_light+0x300>)
 80013fa:	220b      	movs	r2, #11
 80013fc:	601a      	str	r2, [r3, #0]
			setTimer(0, GREEN * 1000);	// Timer
 80013fe:	4b8e      	ldr	r3, [pc, #568]	; (8001638 <fsm_traffic_light+0x308>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001406:	fb02 f303 	mul.w	r3, r2, r3
 800140a:	4619      	mov	r1, r3
 800140c:	2000      	movs	r0, #0
 800140e:	f000 fd85 	bl	8001f1c <setTimer>
			counterL = 1;
 8001412:	4b8a      	ldr	r3, [pc, #552]	; (800163c <fsm_traffic_light+0x30c>)
 8001414:	2201      	movs	r2, #1
 8001416:	601a      	str	r2, [r3, #0]
			counterP = 1;
 8001418:	4b89      	ldr	r3, [pc, #548]	; (8001640 <fsm_traffic_light+0x310>)
 800141a:	2201      	movs	r2, #1
 800141c:	601a      	str	r2, [r3, #0]
			break;
 800141e:	e04e      	b.n	80014be <fsm_traffic_light+0x18e>
		case 2: // AUTO_REDL_YELLOWP
			status = AUTO_REDL_YELLOWP;
 8001420:	4b83      	ldr	r3, [pc, #524]	; (8001630 <fsm_traffic_light+0x300>)
 8001422:	220c      	movs	r2, #12
 8001424:	601a      	str	r2, [r3, #0]
			setTimer(0, YELLOW * 1000);	// Timer
 8001426:	4b87      	ldr	r3, [pc, #540]	; (8001644 <fsm_traffic_light+0x314>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800142e:	fb02 f303 	mul.w	r3, r2, r3
 8001432:	4619      	mov	r1, r3
 8001434:	2000      	movs	r0, #0
 8001436:	f000 fd71 	bl	8001f1c <setTimer>
			counterL = GREEN + 1;
 800143a:	4b7f      	ldr	r3, [pc, #508]	; (8001638 <fsm_traffic_light+0x308>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	3301      	adds	r3, #1
 8001440:	4a7e      	ldr	r2, [pc, #504]	; (800163c <fsm_traffic_light+0x30c>)
 8001442:	6013      	str	r3, [r2, #0]
			counterP = GREEN + 1;
 8001444:	4b7c      	ldr	r3, [pc, #496]	; (8001638 <fsm_traffic_light+0x308>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	3301      	adds	r3, #1
 800144a:	4a7d      	ldr	r2, [pc, #500]	; (8001640 <fsm_traffic_light+0x310>)
 800144c:	6013      	str	r3, [r2, #0]
			break;
 800144e:	e036      	b.n	80014be <fsm_traffic_light+0x18e>
		case 3: // AUTO_REDP_GREENL
			status = AUTO_REDP_GREENL;
 8001450:	4b77      	ldr	r3, [pc, #476]	; (8001630 <fsm_traffic_light+0x300>)
 8001452:	220d      	movs	r2, #13
 8001454:	601a      	str	r2, [r3, #0]
			setTimer(0, GREEN * 1000);	// Timer
 8001456:	4b78      	ldr	r3, [pc, #480]	; (8001638 <fsm_traffic_light+0x308>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800145e:	fb02 f303 	mul.w	r3, r2, r3
 8001462:	4619      	mov	r1, r3
 8001464:	2000      	movs	r0, #0
 8001466:	f000 fd59 	bl	8001f1c <setTimer>
			counterL = RED + 1;
 800146a:	4b77      	ldr	r3, [pc, #476]	; (8001648 <fsm_traffic_light+0x318>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	3301      	adds	r3, #1
 8001470:	4a72      	ldr	r2, [pc, #456]	; (800163c <fsm_traffic_light+0x30c>)
 8001472:	6013      	str	r3, [r2, #0]
			counterP = RED + 1;
 8001474:	4b74      	ldr	r3, [pc, #464]	; (8001648 <fsm_traffic_light+0x318>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	4a71      	ldr	r2, [pc, #452]	; (8001640 <fsm_traffic_light+0x310>)
 800147c:	6013      	str	r3, [r2, #0]
			break;
 800147e:	e01e      	b.n	80014be <fsm_traffic_light+0x18e>
		case 4: // AUTO_REDP_YELLOWL
			status = AUTO_REDP_YELLOWL;
 8001480:	4b6b      	ldr	r3, [pc, #428]	; (8001630 <fsm_traffic_light+0x300>)
 8001482:	220e      	movs	r2, #14
 8001484:	601a      	str	r2, [r3, #0]
			setTimer(0, YELLOW * 1000); // Timer
 8001486:	4b6f      	ldr	r3, [pc, #444]	; (8001644 <fsm_traffic_light+0x314>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800148e:	fb02 f303 	mul.w	r3, r2, r3
 8001492:	4619      	mov	r1, r3
 8001494:	2000      	movs	r0, #0
 8001496:	f000 fd41 	bl	8001f1c <setTimer>
			counterL = RED + GREEN + 1;
 800149a:	4b6b      	ldr	r3, [pc, #428]	; (8001648 <fsm_traffic_light+0x318>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4b66      	ldr	r3, [pc, #408]	; (8001638 <fsm_traffic_light+0x308>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	3301      	adds	r3, #1
 80014a6:	4a65      	ldr	r2, [pc, #404]	; (800163c <fsm_traffic_light+0x30c>)
 80014a8:	6013      	str	r3, [r2, #0]
			counterP = RED + GREEN + 1;
 80014aa:	4b67      	ldr	r3, [pc, #412]	; (8001648 <fsm_traffic_light+0x318>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	4b62      	ldr	r3, [pc, #392]	; (8001638 <fsm_traffic_light+0x308>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	3301      	adds	r3, #1
 80014b6:	4a62      	ldr	r2, [pc, #392]	; (8001640 <fsm_traffic_light+0x310>)
 80014b8:	6013      	str	r3, [r2, #0]
			break;
 80014ba:	e000      	b.n	80014be <fsm_traffic_light+0x18e>
		default:
			break;
 80014bc:	bf00      	nop
		}
		// Set Timer
		setTimer(1, 1000);			// Timer updateClockBufferMode1
 80014be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014c2:	2001      	movs	r0, #1
 80014c4:	f000 fd2a 	bl	8001f1c <setTimer>
		clearTimer(2);				// O mode 1 khong su dung Timer cho blinking LED
 80014c8:	2002      	movs	r0, #2
 80014ca:	f000 fd45 	bl	8001f58 <clearTimer>
		// Hien thi ra UART
		updateClockBufferMode1();
 80014ce:	f7ff fca9 	bl	8000e24 <updateClockBufferMode1>
		update();
 80014d2:	f7ff fc63 	bl	8000d9c <update>
		break;
 80014d6:	e295      	b.n	8001a04 <fsm_traffic_light+0x6d4>

	case AUTO_REDL_GREENP:
		// Setup cho den Landscape_RED va Portrait_GREEN sang
		redl_greenp();
 80014d8:	f7ff fb36 	bl	8000b48 <redl_greenp>
		// Neu timer_flag[0] == 1, chuyen den trang thai AUTO_REDL_YELLOWP dong thoi setTimer cho truong hop ke tiep
		if (timer_flag[0] == 1) {
 80014dc:	4b5b      	ldr	r3, [pc, #364]	; (800164c <fsm_traffic_light+0x31c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d10c      	bne.n	80014fe <fsm_traffic_light+0x1ce>
			status = AUTO_REDL_YELLOWP;
 80014e4:	4b52      	ldr	r3, [pc, #328]	; (8001630 <fsm_traffic_light+0x300>)
 80014e6:	220c      	movs	r2, #12
 80014e8:	601a      	str	r2, [r3, #0]
			setTimer(0, YELLOW * 1000);
 80014ea:	4b56      	ldr	r3, [pc, #344]	; (8001644 <fsm_traffic_light+0x314>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	4619      	mov	r1, r3
 80014f8:	2000      	movs	r0, #0
 80014fa:	f000 fd0f 	bl	8001f1c <setTimer>
		}
		// Neu timer_flag[1] == 1, update gia tri thoi gian dem nguoc va setTimer lai
		if (timer_flag[1] == 1) {
 80014fe:	4b53      	ldr	r3, [pc, #332]	; (800164c <fsm_traffic_light+0x31c>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d108      	bne.n	8001518 <fsm_traffic_light+0x1e8>
			setTimer(1, 1000);
 8001506:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800150a:	2001      	movs	r0, #1
 800150c:	f000 fd06 	bl	8001f1c <setTimer>
			updateClockBufferMode1();
 8001510:	f7ff fc88 	bl	8000e24 <updateClockBufferMode1>
			update();
 8001514:	f7ff fc42 	bl	8000d9c <update>
		}
		// Neu nhan nut MODE, he thong chuyen sang mode 2
		if (isButtonPressed(0) == 1) {
 8001518:	2000      	movs	r0, #0
 800151a:	f7ff fa0f 	bl	800093c <isButtonPressed>
 800151e:	4603      	mov	r3, r0
 8001520:	2b01      	cmp	r3, #1
 8001522:	f040 825a 	bne.w	80019da <fsm_traffic_light+0x6aa>
			status = MODE2;
 8001526:	4b42      	ldr	r3, [pc, #264]	; (8001630 <fsm_traffic_light+0x300>)
 8001528:	2202      	movs	r2, #2
 800152a:	601a      	str	r2, [r3, #0]
		}
		break;
 800152c:	e255      	b.n	80019da <fsm_traffic_light+0x6aa>

	case AUTO_REDL_YELLOWP:
		// Setup cho den Landscape_RED va Portrait_YELLOW sang
		redl_yellowp();
 800152e:	f7ff fb29 	bl	8000b84 <redl_yellowp>
		// Neu timer_flag[0] == 1, chuyen den trang thai AUTO_REDP_GREENL dong thoi setTimer cho truong hop ke tiep
		if (timer_flag[0] == 1) {
 8001532:	4b46      	ldr	r3, [pc, #280]	; (800164c <fsm_traffic_light+0x31c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d10c      	bne.n	8001554 <fsm_traffic_light+0x224>
			status = AUTO_REDP_GREENL;
 800153a:	4b3d      	ldr	r3, [pc, #244]	; (8001630 <fsm_traffic_light+0x300>)
 800153c:	220d      	movs	r2, #13
 800153e:	601a      	str	r2, [r3, #0]
			setTimer(0, GREEN * 1000);
 8001540:	4b3d      	ldr	r3, [pc, #244]	; (8001638 <fsm_traffic_light+0x308>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001548:	fb02 f303 	mul.w	r3, r2, r3
 800154c:	4619      	mov	r1, r3
 800154e:	2000      	movs	r0, #0
 8001550:	f000 fce4 	bl	8001f1c <setTimer>
		}
		// Neu timer_flag[1] == 1, update gia tri thoi gian dem nguoc va setTimer lai
		if (timer_flag[1] == 1) {
 8001554:	4b3d      	ldr	r3, [pc, #244]	; (800164c <fsm_traffic_light+0x31c>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d108      	bne.n	800156e <fsm_traffic_light+0x23e>
			setTimer(1, 1000);
 800155c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001560:	2001      	movs	r0, #1
 8001562:	f000 fcdb 	bl	8001f1c <setTimer>
			updateClockBufferMode1();
 8001566:	f7ff fc5d 	bl	8000e24 <updateClockBufferMode1>
			update();
 800156a:	f7ff fc17 	bl	8000d9c <update>
		}
		// Neu nhan nut MODE, he thong chuyen sang mode 2
		if (isButtonPressed(0) == 1) {
 800156e:	2000      	movs	r0, #0
 8001570:	f7ff f9e4 	bl	800093c <isButtonPressed>
 8001574:	4603      	mov	r3, r0
 8001576:	2b01      	cmp	r3, #1
 8001578:	f040 8231 	bne.w	80019de <fsm_traffic_light+0x6ae>
			status = MODE2;
 800157c:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <fsm_traffic_light+0x300>)
 800157e:	2202      	movs	r2, #2
 8001580:	601a      	str	r2, [r3, #0]
		}
		break;
 8001582:	e22c      	b.n	80019de <fsm_traffic_light+0x6ae>

	case AUTO_REDP_GREENL:
		// Setup cho den Portrait_RED va Landscape_GREEN sang
		redp_greenl();
 8001584:	f7ff fb1c 	bl	8000bc0 <redp_greenl>
		// Neu timer_flag[0] == 1, chuyen den trang thai AUTO_REDP_YELLOWL dong thoi setTimer cho truong hop ke tiep
		if (timer_flag[0] == 1) {
 8001588:	4b30      	ldr	r3, [pc, #192]	; (800164c <fsm_traffic_light+0x31c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d10c      	bne.n	80015aa <fsm_traffic_light+0x27a>
			status = AUTO_REDP_YELLOWL;
 8001590:	4b27      	ldr	r3, [pc, #156]	; (8001630 <fsm_traffic_light+0x300>)
 8001592:	220e      	movs	r2, #14
 8001594:	601a      	str	r2, [r3, #0]
			setTimer(0, YELLOW * 1000);
 8001596:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <fsm_traffic_light+0x314>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800159e:	fb02 f303 	mul.w	r3, r2, r3
 80015a2:	4619      	mov	r1, r3
 80015a4:	2000      	movs	r0, #0
 80015a6:	f000 fcb9 	bl	8001f1c <setTimer>
		}
		// Neu timer_flag[1] == 1, update gia tri thoi gian dem nguoc va setTimer lai
		if (timer_flag[1] == 1) {
 80015aa:	4b28      	ldr	r3, [pc, #160]	; (800164c <fsm_traffic_light+0x31c>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d108      	bne.n	80015c4 <fsm_traffic_light+0x294>
			setTimer(1, 1000);
 80015b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015b6:	2001      	movs	r0, #1
 80015b8:	f000 fcb0 	bl	8001f1c <setTimer>
			updateClockBufferMode1();
 80015bc:	f7ff fc32 	bl	8000e24 <updateClockBufferMode1>
			update();
 80015c0:	f7ff fbec 	bl	8000d9c <update>
		}
		// Neu nhan nut MODE, he thong chuyen sang mode 2
		if (isButtonPressed(0) == 1) {
 80015c4:	2000      	movs	r0, #0
 80015c6:	f7ff f9b9 	bl	800093c <isButtonPressed>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	f040 8208 	bne.w	80019e2 <fsm_traffic_light+0x6b2>
			status = MODE2;
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <fsm_traffic_light+0x300>)
 80015d4:	2202      	movs	r2, #2
 80015d6:	601a      	str	r2, [r3, #0]
		}
		break;
 80015d8:	e203      	b.n	80019e2 <fsm_traffic_light+0x6b2>

	case AUTO_REDP_YELLOWL:
		// Setup cho den Portrait_RED va Landscape_YELLOW sang
		redp_yellowl();
 80015da:	f7ff fb0f 	bl	8000bfc <redp_yellowl>
		// Neu timer_flag[0] == 1, chuyen den trang thai AUTO_REDL_GREENP dong thoi setTimer cho truong hop ke tiep
		if (timer_flag[0] == 1) {
 80015de:	4b1b      	ldr	r3, [pc, #108]	; (800164c <fsm_traffic_light+0x31c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d10c      	bne.n	8001600 <fsm_traffic_light+0x2d0>
			status = AUTO_REDL_GREENP;
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <fsm_traffic_light+0x300>)
 80015e8:	220b      	movs	r2, #11
 80015ea:	601a      	str	r2, [r3, #0]
			setTimer(0, GREEN * 1000);
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <fsm_traffic_light+0x308>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015f4:	fb02 f303 	mul.w	r3, r2, r3
 80015f8:	4619      	mov	r1, r3
 80015fa:	2000      	movs	r0, #0
 80015fc:	f000 fc8e 	bl	8001f1c <setTimer>
		}
		// Neu timer_flag[1] == 1, update gia tri thoi gian dem nguoc va setTimer lai
		if (timer_flag[1] == 1) {
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <fsm_traffic_light+0x31c>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d108      	bne.n	800161a <fsm_traffic_light+0x2ea>
			setTimer(1, 1000);
 8001608:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800160c:	2001      	movs	r0, #1
 800160e:	f000 fc85 	bl	8001f1c <setTimer>
			updateClockBufferMode1();
 8001612:	f7ff fc07 	bl	8000e24 <updateClockBufferMode1>
			update();
 8001616:	f7ff fbc1 	bl	8000d9c <update>
		}
		// Neu nhan nut MODE, he thong chuyen sang mode 2
		if (isButtonPressed(0) == 1) {
 800161a:	2000      	movs	r0, #0
 800161c:	f7ff f98e 	bl	800093c <isButtonPressed>
 8001620:	4603      	mov	r3, r0
 8001622:	2b01      	cmp	r3, #1
 8001624:	f040 81df 	bne.w	80019e6 <fsm_traffic_light+0x6b6>
			status = MODE2;
 8001628:	4b01      	ldr	r3, [pc, #4]	; (8001630 <fsm_traffic_light+0x300>)
 800162a:	2202      	movs	r2, #2
 800162c:	601a      	str	r2, [r3, #0]
		}
		break;
 800162e:	e1da      	b.n	80019e6 <fsm_traffic_light+0x6b6>
 8001630:	20000118 	.word	0x20000118
 8001634:	20000048 	.word	0x20000048
 8001638:	20000054 	.word	0x20000054
 800163c:	20000184 	.word	0x20000184
 8001640:	2000017c 	.word	0x2000017c
 8001644:	20000050 	.word	0x20000050
 8001648:	2000004c 	.word	0x2000004c
 800164c:	20000148 	.word	0x20000148

//----------------------------------------------------------------------------------------------
// MODE 2: MANUAL MODE
	case MODE2:
		// State ban dau o mode 2 se mac dinh la MAN_REDL_GREENP
		status = MAN_REDL_GREENP;
 8001650:	4bb1      	ldr	r3, [pc, #708]	; (8001918 <fsm_traffic_light+0x5e8>)
 8001652:	2215      	movs	r2, #21
 8001654:	601a      	str	r2, [r3, #0]
		// Clear cac timer khong duoc su dung o mode 2
		for (int i = 0; i < NUM_OF_TIMERS; i++)
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	e005      	b.n	8001668 <fsm_traffic_light+0x338>
			clearTimer(i);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f000 fc7b 	bl	8001f58 <clearTimer>
		for (int i = 0; i < NUM_OF_TIMERS; i++)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3301      	adds	r3, #1
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b08      	cmp	r3, #8
 800166c:	ddf6      	ble.n	800165c <fsm_traffic_light+0x32c>
		break;
 800166e:	e1c9      	b.n	8001a04 <fsm_traffic_light+0x6d4>
	case MAN_REDL_GREENP:
		// Setup cho den Landscape_RED va Portrait_GREEN sang
		redl_greenp();
 8001670:	f7ff fa6a 	bl	8000b48 <redl_greenp>
		// Neu nhan nut MODE, chuyen sang MODE3
		if (isButtonPressed(0) == 1) {
 8001674:	2000      	movs	r0, #0
 8001676:	f7ff f961 	bl	800093c <isButtonPressed>
 800167a:	4603      	mov	r3, r0
 800167c:	2b01      	cmp	r3, #1
 800167e:	d102      	bne.n	8001686 <fsm_traffic_light+0x356>
			status = MODE3;
 8001680:	4ba5      	ldr	r3, [pc, #660]	; (8001918 <fsm_traffic_light+0x5e8>)
 8001682:	2203      	movs	r2, #3
 8001684:	601a      	str	r2, [r3, #0]
		}
		// Neu nhan nut INC, chuyen sang trang thai MAN_REDL_YELLOWP
		if (isButtonPressed(1) == 1) {
 8001686:	2001      	movs	r0, #1
 8001688:	f7ff f958 	bl	800093c <isButtonPressed>
 800168c:	4603      	mov	r3, r0
 800168e:	2b01      	cmp	r3, #1
 8001690:	d102      	bne.n	8001698 <fsm_traffic_light+0x368>
			status = MAN_REDL_YELLOWP;
 8001692:	4ba1      	ldr	r3, [pc, #644]	; (8001918 <fsm_traffic_light+0x5e8>)
 8001694:	2216      	movs	r2, #22
 8001696:	601a      	str	r2, [r3, #0]
		}
		// Neu nhan nut SET, chuyen sang trang thai MODE1, cap nhat man_status de setup cho tu MODE1
		// se sang trang thai auto tuong ung voi trang thai manual vua set xong
		if (isButtonPressed(2) == 1) {
 8001698:	2002      	movs	r0, #2
 800169a:	f7ff f94f 	bl	800093c <isButtonPressed>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	f040 81a2 	bne.w	80019ea <fsm_traffic_light+0x6ba>
			man_status = 1;
 80016a6:	4b9d      	ldr	r3, [pc, #628]	; (800191c <fsm_traffic_light+0x5ec>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
			status = MODE1;
 80016ac:	4b9a      	ldr	r3, [pc, #616]	; (8001918 <fsm_traffic_light+0x5e8>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]
		}
		break;
 80016b2:	e19a      	b.n	80019ea <fsm_traffic_light+0x6ba>
	case MAN_REDL_YELLOWP:
		// Setup Landscape_RED va Portrait_YELLOW sang
		redl_yellowp();
 80016b4:	f7ff fa66 	bl	8000b84 <redl_yellowp>
		// Neu nhan nut MODE, chuyen sang MODE3
		if (isButtonPressed(0) == 1) {
 80016b8:	2000      	movs	r0, #0
 80016ba:	f7ff f93f 	bl	800093c <isButtonPressed>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d102      	bne.n	80016ca <fsm_traffic_light+0x39a>
			status = MODE3;
 80016c4:	4b94      	ldr	r3, [pc, #592]	; (8001918 <fsm_traffic_light+0x5e8>)
 80016c6:	2203      	movs	r2, #3
 80016c8:	601a      	str	r2, [r3, #0]
		}
		// Neu nhan nut INC, chuyen sang trang thai MAN_REDP_GREENL
		if (isButtonPressed(1) == 1) {
 80016ca:	2001      	movs	r0, #1
 80016cc:	f7ff f936 	bl	800093c <isButtonPressed>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d102      	bne.n	80016dc <fsm_traffic_light+0x3ac>
			status = MAN_REDP_GREENL;
 80016d6:	4b90      	ldr	r3, [pc, #576]	; (8001918 <fsm_traffic_light+0x5e8>)
 80016d8:	2217      	movs	r2, #23
 80016da:	601a      	str	r2, [r3, #0]
		}
		// Neu nhan nut SET, cap nhat man_status va chuyen sang trang thai MODE1
		if (isButtonPressed(2) == 1) {
 80016dc:	2002      	movs	r0, #2
 80016de:	f7ff f92d 	bl	800093c <isButtonPressed>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	f040 8182 	bne.w	80019ee <fsm_traffic_light+0x6be>
			man_status = 2;
 80016ea:	4b8c      	ldr	r3, [pc, #560]	; (800191c <fsm_traffic_light+0x5ec>)
 80016ec:	2202      	movs	r2, #2
 80016ee:	601a      	str	r2, [r3, #0]
			status = MODE1;
 80016f0:	4b89      	ldr	r3, [pc, #548]	; (8001918 <fsm_traffic_light+0x5e8>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	601a      	str	r2, [r3, #0]
		}
		break;
 80016f6:	e17a      	b.n	80019ee <fsm_traffic_light+0x6be>
	case MAN_REDP_GREENL:
		// Setup Landscape_GREEN va Portrait_RED sang
		redp_greenl();
 80016f8:	f7ff fa62 	bl	8000bc0 <redp_greenl>
		// Neu nhan nut MODE, chuyen sang MODE3
		if (isButtonPressed(0) == 1) {
 80016fc:	2000      	movs	r0, #0
 80016fe:	f7ff f91d 	bl	800093c <isButtonPressed>
 8001702:	4603      	mov	r3, r0
 8001704:	2b01      	cmp	r3, #1
 8001706:	d102      	bne.n	800170e <fsm_traffic_light+0x3de>
			status = MODE3;
 8001708:	4b83      	ldr	r3, [pc, #524]	; (8001918 <fsm_traffic_light+0x5e8>)
 800170a:	2203      	movs	r2, #3
 800170c:	601a      	str	r2, [r3, #0]
		}
		// Neu nhan nut INC, chuyen sang trang thai MAN_REDP_GREENL
		if (isButtonPressed(1) == 1) {
 800170e:	2001      	movs	r0, #1
 8001710:	f7ff f914 	bl	800093c <isButtonPressed>
 8001714:	4603      	mov	r3, r0
 8001716:	2b01      	cmp	r3, #1
 8001718:	d102      	bne.n	8001720 <fsm_traffic_light+0x3f0>
			status = MAN_REDP_YELLOWL;
 800171a:	4b7f      	ldr	r3, [pc, #508]	; (8001918 <fsm_traffic_light+0x5e8>)
 800171c:	2218      	movs	r2, #24
 800171e:	601a      	str	r2, [r3, #0]
		}
		// Neu nhan nut SET, cap nhat man_status va chuyen sang trang thai MODE1
		if (isButtonPressed(2) == 1) {
 8001720:	2002      	movs	r0, #2
 8001722:	f7ff f90b 	bl	800093c <isButtonPressed>
 8001726:	4603      	mov	r3, r0
 8001728:	2b01      	cmp	r3, #1
 800172a:	f040 8162 	bne.w	80019f2 <fsm_traffic_light+0x6c2>
			man_status = 3;
 800172e:	4b7b      	ldr	r3, [pc, #492]	; (800191c <fsm_traffic_light+0x5ec>)
 8001730:	2203      	movs	r2, #3
 8001732:	601a      	str	r2, [r3, #0]
			status = MODE1;
 8001734:	4b78      	ldr	r3, [pc, #480]	; (8001918 <fsm_traffic_light+0x5e8>)
 8001736:	2201      	movs	r2, #1
 8001738:	601a      	str	r2, [r3, #0]
		}
		break;
 800173a:	e15a      	b.n	80019f2 <fsm_traffic_light+0x6c2>
	case MAN_REDP_YELLOWL:
		// Setup Landscape_YELLOW va Portrait_RED sang
		redp_yellowl();
 800173c:	f7ff fa5e 	bl	8000bfc <redp_yellowl>
		// Neu nhan nut MODE, chuyen sang MODE3
		if (isButtonPressed(0) == 1) {
 8001740:	2000      	movs	r0, #0
 8001742:	f7ff f8fb 	bl	800093c <isButtonPressed>
 8001746:	4603      	mov	r3, r0
 8001748:	2b01      	cmp	r3, #1
 800174a:	d102      	bne.n	8001752 <fsm_traffic_light+0x422>
			status = MODE3;
 800174c:	4b72      	ldr	r3, [pc, #456]	; (8001918 <fsm_traffic_light+0x5e8>)
 800174e:	2203      	movs	r2, #3
 8001750:	601a      	str	r2, [r3, #0]
		}
		// Neu nhan nut INC, chuyen sang trang thai MAN_REDP_GREENL
		if (isButtonPressed(1) == 1) {
 8001752:	2001      	movs	r0, #1
 8001754:	f7ff f8f2 	bl	800093c <isButtonPressed>
 8001758:	4603      	mov	r3, r0
 800175a:	2b01      	cmp	r3, #1
 800175c:	d102      	bne.n	8001764 <fsm_traffic_light+0x434>
			status = MAN_REDL_GREENP;
 800175e:	4b6e      	ldr	r3, [pc, #440]	; (8001918 <fsm_traffic_light+0x5e8>)
 8001760:	2215      	movs	r2, #21
 8001762:	601a      	str	r2, [r3, #0]
		}
		// Neu nhan nut SET, cap nhat man_status va chuyen sang trang thai MODE1
		if (isButtonPressed(2) == 1) {
 8001764:	2002      	movs	r0, #2
 8001766:	f7ff f8e9 	bl	800093c <isButtonPressed>
 800176a:	4603      	mov	r3, r0
 800176c:	2b01      	cmp	r3, #1
 800176e:	f040 8142 	bne.w	80019f6 <fsm_traffic_light+0x6c6>
			man_status = 4;
 8001772:	4b6a      	ldr	r3, [pc, #424]	; (800191c <fsm_traffic_light+0x5ec>)
 8001774:	2204      	movs	r2, #4
 8001776:	601a      	str	r2, [r3, #0]
			status = MODE1;
 8001778:	4b67      	ldr	r3, [pc, #412]	; (8001918 <fsm_traffic_light+0x5e8>)
 800177a:	2201      	movs	r2, #1
 800177c:	601a      	str	r2, [r3, #0]
		}
		break;
 800177e:	e13a      	b.n	80019f6 <fsm_traffic_light+0x6c6>
//----------------------------------------------------------------------------------------------
// MODE 3: TUNING MODE
	case MODE3:
		// State ban dau o mode 2 se mac dinh la SET_TIMER_RED
		// Setup cho tat ca cac den RED sang
		toggle_red();
 8001780:	f7ff fa5a 	bl	8000c38 <toggle_red>
		// SetTimer
		clearTimer(0);
 8001784:	2000      	movs	r0, #0
 8001786:	f000 fbe7 	bl	8001f58 <clearTimer>
		clearTimer(1);
 800178a:	2001      	movs	r0, #1
 800178c:	f000 fbe4 	bl	8001f58 <clearTimer>
		setTimer(2, 500);	// Timer blinking
 8001790:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001794:	2002      	movs	r0, #2
 8001796:	f000 fbc1 	bl	8001f1c <setTimer>
		// Update lai gia tri hien thi
		updateClockBufferRed();
 800179a:	f7ff fc07 	bl	8000fac <updateClockBufferRed>
		update();
 800179e:	f7ff fafd 	bl	8000d9c <update>
		// Chuyen ve trang thai SET_TIMER_RED
		status = SET_TIMER_RED;
 80017a2:	4b5d      	ldr	r3, [pc, #372]	; (8001918 <fsm_traffic_light+0x5e8>)
 80017a4:	221f      	movs	r2, #31
 80017a6:	601a      	str	r2, [r3, #0]
		break;
 80017a8:	e12c      	b.n	8001a04 <fsm_traffic_light+0x6d4>

	case SET_TIMER_RED:
		// Neu timer_flag[2] == 1, toggle tat ca cac den RED va setTimer lai
		if (timer_flag[2] == 1) {
 80017aa:	4b5d      	ldr	r3, [pc, #372]	; (8001920 <fsm_traffic_light+0x5f0>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d106      	bne.n	80017c0 <fsm_traffic_light+0x490>
			setTimer(2, 500);
 80017b2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80017b6:	2002      	movs	r0, #2
 80017b8:	f000 fbb0 	bl	8001f1c <setTimer>
			toggle_red();
 80017bc:	f7ff fa3c 	bl	8000c38 <toggle_red>
		}
		// Neu nhan nut MODE, he thong chuyen sang trang thai mode 1
		if (isButtonPressed(0) == 1) {
 80017c0:	2000      	movs	r0, #0
 80017c2:	f7ff f8bb 	bl	800093c <isButtonPressed>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d109      	bne.n	80017e0 <fsm_traffic_light+0x4b0>
			status = MODE1;
 80017cc:	4b52      	ldr	r3, [pc, #328]	; (8001918 <fsm_traffic_light+0x5e8>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	601a      	str	r2, [r3, #0]
			// Cap nhat lai bo ba gia tri thoi gian RED, YELLOW va GREEN
			GREEN = RED - YELLOW;
 80017d2:	4b54      	ldr	r3, [pc, #336]	; (8001924 <fsm_traffic_light+0x5f4>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	4b54      	ldr	r3, [pc, #336]	; (8001928 <fsm_traffic_light+0x5f8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	4a53      	ldr	r2, [pc, #332]	; (800192c <fsm_traffic_light+0x5fc>)
 80017de:	6013      	str	r3, [r2, #0]
		}
		// Neu nhan nut INC, thay doi gia tri thoi gian RED, cap nhat lai bo ba gia tri thoi gian RED, YELLOW va GREEN
		if (isButtonPressed(1) == 1) {
 80017e0:	2001      	movs	r0, #1
 80017e2:	f7ff f8ab 	bl	800093c <isButtonPressed>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d112      	bne.n	8001812 <fsm_traffic_light+0x4e2>
			if (RED >= 99) RED = YELLOW + 1;
 80017ec:	4b4d      	ldr	r3, [pc, #308]	; (8001924 <fsm_traffic_light+0x5f4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b62      	cmp	r3, #98	; 0x62
 80017f2:	dd05      	ble.n	8001800 <fsm_traffic_light+0x4d0>
 80017f4:	4b4c      	ldr	r3, [pc, #304]	; (8001928 <fsm_traffic_light+0x5f8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	4a4a      	ldr	r2, [pc, #296]	; (8001924 <fsm_traffic_light+0x5f4>)
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e004      	b.n	800180a <fsm_traffic_light+0x4da>
			else RED++;
 8001800:	4b48      	ldr	r3, [pc, #288]	; (8001924 <fsm_traffic_light+0x5f4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	4a47      	ldr	r2, [pc, #284]	; (8001924 <fsm_traffic_light+0x5f4>)
 8001808:	6013      	str	r3, [r2, #0]
			updateClockBufferRed();
 800180a:	f7ff fbcf 	bl	8000fac <updateClockBufferRed>
			update();
 800180e:	f7ff fac5 	bl	8000d9c <update>
		}
		// Neu nhan nut SET, chuyen sang trang thai SET_TIMER_YELLOW
		if (isButtonPressed(2) == 1) {
 8001812:	2002      	movs	r0, #2
 8001814:	f7ff f892 	bl	800093c <isButtonPressed>
 8001818:	4603      	mov	r3, r0
 800181a:	2b01      	cmp	r3, #1
 800181c:	f040 80ed 	bne.w	80019fa <fsm_traffic_light+0x6ca>
			// Cap nhat lai bo ba gia tri thoi gian RED, YELLOW va GREEN
			GREEN = RED - YELLOW;
 8001820:	4b40      	ldr	r3, [pc, #256]	; (8001924 <fsm_traffic_light+0x5f4>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b40      	ldr	r3, [pc, #256]	; (8001928 <fsm_traffic_light+0x5f8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	4a40      	ldr	r2, [pc, #256]	; (800192c <fsm_traffic_light+0x5fc>)
 800182c:	6013      	str	r3, [r2, #0]
			status = SET_TIMER_YELLOW;
 800182e:	4b3a      	ldr	r3, [pc, #232]	; (8001918 <fsm_traffic_light+0x5e8>)
 8001830:	2220      	movs	r2, #32
 8001832:	601a      	str	r2, [r3, #0]
			setTimer(2, 500);
 8001834:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001838:	2002      	movs	r0, #2
 800183a:	f000 fb6f 	bl	8001f1c <setTimer>
			toggle_yellow();
 800183e:	f7ff fa17 	bl	8000c70 <toggle_yellow>
			updateClockBufferYellow();
 8001842:	f7ff fbc7 	bl	8000fd4 <updateClockBufferYellow>
			update();
 8001846:	f7ff faa9 	bl	8000d9c <update>
		}
		break;
 800184a:	e0d6      	b.n	80019fa <fsm_traffic_light+0x6ca>

	case SET_TIMER_YELLOW:
		// Neu timer_flag[2] == 1, toggle tat ca cac den YELLOW va setTimer lai
		if (timer_flag[2] == 1) {
 800184c:	4b34      	ldr	r3, [pc, #208]	; (8001920 <fsm_traffic_light+0x5f0>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d106      	bne.n	8001862 <fsm_traffic_light+0x532>
			setTimer(2, 500);
 8001854:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001858:	2002      	movs	r0, #2
 800185a:	f000 fb5f 	bl	8001f1c <setTimer>
			toggle_yellow();
 800185e:	f7ff fa07 	bl	8000c70 <toggle_yellow>
		}
		// Neu nhan nut MODE, he thong chuyen sang trang thai mode 1
		if (isButtonPressed(0) == 1) {
 8001862:	2000      	movs	r0, #0
 8001864:	f7ff f86a 	bl	800093c <isButtonPressed>
 8001868:	4603      	mov	r3, r0
 800186a:	2b01      	cmp	r3, #1
 800186c:	d114      	bne.n	8001898 <fsm_traffic_light+0x568>
			status = MODE1;
 800186e:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <fsm_traffic_light+0x5e8>)
 8001870:	2201      	movs	r2, #1
 8001872:	601a      	str	r2, [r3, #0]
			// Cap nhat lai bo ba gia tri thoi gian RED, YELLOW va GREEN
			if (RED <= YELLOW) RED = YELLOW + 1;
 8001874:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <fsm_traffic_light+0x5f4>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b2b      	ldr	r3, [pc, #172]	; (8001928 <fsm_traffic_light+0x5f8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	dc04      	bgt.n	800188a <fsm_traffic_light+0x55a>
 8001880:	4b29      	ldr	r3, [pc, #164]	; (8001928 <fsm_traffic_light+0x5f8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	3301      	adds	r3, #1
 8001886:	4a27      	ldr	r2, [pc, #156]	; (8001924 <fsm_traffic_light+0x5f4>)
 8001888:	6013      	str	r3, [r2, #0]
			GREEN = RED - YELLOW;
 800188a:	4b26      	ldr	r3, [pc, #152]	; (8001924 <fsm_traffic_light+0x5f4>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4b26      	ldr	r3, [pc, #152]	; (8001928 <fsm_traffic_light+0x5f8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	4a25      	ldr	r2, [pc, #148]	; (800192c <fsm_traffic_light+0x5fc>)
 8001896:	6013      	str	r3, [r2, #0]
		}
		// Neu nhan nut INC, thay doi gia tri thoi gian YELLOW, cap nhat lai bo ba gia tri thoi gian RED, YELLOW va GREEN
		if (isButtonPressed(1) == 1) {
 8001898:	2001      	movs	r0, #1
 800189a:	f7ff f84f 	bl	800093c <isButtonPressed>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d110      	bne.n	80018c6 <fsm_traffic_light+0x596>
			if (YELLOW >= 5) YELLOW = 1;
 80018a4:	4b20      	ldr	r3, [pc, #128]	; (8001928 <fsm_traffic_light+0x5f8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	dd03      	ble.n	80018b4 <fsm_traffic_light+0x584>
 80018ac:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <fsm_traffic_light+0x5f8>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	e004      	b.n	80018be <fsm_traffic_light+0x58e>
			else YELLOW++;
 80018b4:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <fsm_traffic_light+0x5f8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	3301      	adds	r3, #1
 80018ba:	4a1b      	ldr	r2, [pc, #108]	; (8001928 <fsm_traffic_light+0x5f8>)
 80018bc:	6013      	str	r3, [r2, #0]
			updateClockBufferYellow();
 80018be:	f7ff fb89 	bl	8000fd4 <updateClockBufferYellow>
			update();
 80018c2:	f7ff fa6b 	bl	8000d9c <update>
		}
		// Neu nhan nut SET, chuyen sang trang thai SET_TIMER_GREEN
		if (isButtonPressed(2) == 1) {
 80018c6:	2002      	movs	r0, #2
 80018c8:	f7ff f838 	bl	800093c <isButtonPressed>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	f040 8095 	bne.w	80019fe <fsm_traffic_light+0x6ce>
			// Cap nhat lai bo ba gia tri thoi gian RED, YELLOW va GREEN
			if (RED <= YELLOW) RED = YELLOW + 1;
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <fsm_traffic_light+0x5f4>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b13      	ldr	r3, [pc, #76]	; (8001928 <fsm_traffic_light+0x5f8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	dc04      	bgt.n	80018ea <fsm_traffic_light+0x5ba>
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <fsm_traffic_light+0x5f8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	3301      	adds	r3, #1
 80018e6:	4a0f      	ldr	r2, [pc, #60]	; (8001924 <fsm_traffic_light+0x5f4>)
 80018e8:	6013      	str	r3, [r2, #0]
			GREEN = RED - YELLOW;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <fsm_traffic_light+0x5f4>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <fsm_traffic_light+0x5f8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	4a0d      	ldr	r2, [pc, #52]	; (800192c <fsm_traffic_light+0x5fc>)
 80018f6:	6013      	str	r3, [r2, #0]
			status = SET_TIMER_GREEN;
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <fsm_traffic_light+0x5e8>)
 80018fa:	2221      	movs	r2, #33	; 0x21
 80018fc:	601a      	str	r2, [r3, #0]
			setTimer(2, 500);
 80018fe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001902:	2002      	movs	r0, #2
 8001904:	f000 fb0a 	bl	8001f1c <setTimer>
			toggle_green();
 8001908:	f7ff f9f2 	bl	8000cf0 <toggle_green>
			updateClockBufferGreen();
 800190c:	f7ff fb76 	bl	8000ffc <updateClockBufferGreen>
			update();
 8001910:	f7ff fa44 	bl	8000d9c <update>
		}
		break;
 8001914:	e073      	b.n	80019fe <fsm_traffic_light+0x6ce>
 8001916:	bf00      	nop
 8001918:	20000118 	.word	0x20000118
 800191c:	20000048 	.word	0x20000048
 8001920:	20000148 	.word	0x20000148
 8001924:	2000004c 	.word	0x2000004c
 8001928:	20000050 	.word	0x20000050
 800192c:	20000054 	.word	0x20000054

	case SET_TIMER_GREEN:
		// Neu timer_flag[2] == 1, toggle tat ca cac den GREEN va setTimer lai
		if (timer_flag[2] == 1) {
 8001930:	4b36      	ldr	r3, [pc, #216]	; (8001a0c <fsm_traffic_light+0x6dc>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d106      	bne.n	8001946 <fsm_traffic_light+0x616>
			setTimer(2, 500);
 8001938:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800193c:	2002      	movs	r0, #2
 800193e:	f000 faed 	bl	8001f1c <setTimer>
			toggle_green();
 8001942:	f7ff f9d5 	bl	8000cf0 <toggle_green>
		}
		// Neu nhan nut MODE, he thong chuyen sang trang thai mode 1
		if (isButtonPressed(0) == 1) {
 8001946:	2000      	movs	r0, #0
 8001948:	f7fe fff8 	bl	800093c <isButtonPressed>
 800194c:	4603      	mov	r3, r0
 800194e:	2b01      	cmp	r3, #1
 8001950:	d109      	bne.n	8001966 <fsm_traffic_light+0x636>
			status = MODE1;
 8001952:	4b2f      	ldr	r3, [pc, #188]	; (8001a10 <fsm_traffic_light+0x6e0>)
 8001954:	2201      	movs	r2, #1
 8001956:	601a      	str	r2, [r3, #0]
			// Cap nhat lai bo ba gia tri thoi gian RED, YELLOW va GREEN
			RED = GREEN + YELLOW;
 8001958:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <fsm_traffic_light+0x6e4>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b2e      	ldr	r3, [pc, #184]	; (8001a18 <fsm_traffic_light+0x6e8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4413      	add	r3, r2
 8001962:	4a2e      	ldr	r2, [pc, #184]	; (8001a1c <fsm_traffic_light+0x6ec>)
 8001964:	6013      	str	r3, [r2, #0]
		}
		// Neu nhan nut INC, thay doi gia tri thoi gian YELLOW, cap nhat lai bo ba gia tri thoi gian RED, YELLOW va GREEN
		if (isButtonPressed(1) == 1) {
 8001966:	2001      	movs	r0, #1
 8001968:	f7fe ffe8 	bl	800093c <isButtonPressed>
 800196c:	4603      	mov	r3, r0
 800196e:	2b01      	cmp	r3, #1
 8001970:	d115      	bne.n	800199e <fsm_traffic_light+0x66e>
			if (GREEN >= RED - YELLOW) GREEN = 1;
 8001972:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <fsm_traffic_light+0x6ec>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <fsm_traffic_light+0x6e8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	1ad2      	subs	r2, r2, r3
 800197c:	4b25      	ldr	r3, [pc, #148]	; (8001a14 <fsm_traffic_light+0x6e4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	dc03      	bgt.n	800198c <fsm_traffic_light+0x65c>
 8001984:	4b23      	ldr	r3, [pc, #140]	; (8001a14 <fsm_traffic_light+0x6e4>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	e004      	b.n	8001996 <fsm_traffic_light+0x666>
			else GREEN++;
 800198c:	4b21      	ldr	r3, [pc, #132]	; (8001a14 <fsm_traffic_light+0x6e4>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	3301      	adds	r3, #1
 8001992:	4a20      	ldr	r2, [pc, #128]	; (8001a14 <fsm_traffic_light+0x6e4>)
 8001994:	6013      	str	r3, [r2, #0]
			updateClockBufferGreen();
 8001996:	f7ff fb31 	bl	8000ffc <updateClockBufferGreen>
			update();
 800199a:	f7ff f9ff 	bl	8000d9c <update>
		}
		// Neu nhan nut SET, chuyen sang trang thai SET_TIMER_GREEN
		if (isButtonPressed(2) == 1) {
 800199e:	2002      	movs	r0, #2
 80019a0:	f7fe ffcc 	bl	800093c <isButtonPressed>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d12b      	bne.n	8001a02 <fsm_traffic_light+0x6d2>
			// Cap nhat lai bo ba gia tri thoi gian RED, YELLOW va GREEN
			RED = GREEN + YELLOW;
 80019aa:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <fsm_traffic_light+0x6e4>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <fsm_traffic_light+0x6e8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	4a19      	ldr	r2, [pc, #100]	; (8001a1c <fsm_traffic_light+0x6ec>)
 80019b6:	6013      	str	r3, [r2, #0]
			status = SET_TIMER_RED;
 80019b8:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <fsm_traffic_light+0x6e0>)
 80019ba:	221f      	movs	r2, #31
 80019bc:	601a      	str	r2, [r3, #0]
			setTimer(2, 500);
 80019be:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80019c2:	2002      	movs	r0, #2
 80019c4:	f000 faaa 	bl	8001f1c <setTimer>
			toggle_red();
 80019c8:	f7ff f936 	bl	8000c38 <toggle_red>
			updateClockBufferRed();
 80019cc:	f7ff faee 	bl	8000fac <updateClockBufferRed>
			update();
 80019d0:	f7ff f9e4 	bl	8000d9c <update>
		}
		break;
 80019d4:	e015      	b.n	8001a02 <fsm_traffic_light+0x6d2>


//--------------------------------------------------------------------------------------
// DEFAULT
	default:
		break;
 80019d6:	bf00      	nop
 80019d8:	e014      	b.n	8001a04 <fsm_traffic_light+0x6d4>
		break;
 80019da:	bf00      	nop
 80019dc:	e012      	b.n	8001a04 <fsm_traffic_light+0x6d4>
		break;
 80019de:	bf00      	nop
 80019e0:	e010      	b.n	8001a04 <fsm_traffic_light+0x6d4>
		break;
 80019e2:	bf00      	nop
 80019e4:	e00e      	b.n	8001a04 <fsm_traffic_light+0x6d4>
		break;
 80019e6:	bf00      	nop
 80019e8:	e00c      	b.n	8001a04 <fsm_traffic_light+0x6d4>
		break;
 80019ea:	bf00      	nop
 80019ec:	e00a      	b.n	8001a04 <fsm_traffic_light+0x6d4>
		break;
 80019ee:	bf00      	nop
 80019f0:	e008      	b.n	8001a04 <fsm_traffic_light+0x6d4>
		break;
 80019f2:	bf00      	nop
 80019f4:	e006      	b.n	8001a04 <fsm_traffic_light+0x6d4>
		break;
 80019f6:	bf00      	nop
 80019f8:	e004      	b.n	8001a04 <fsm_traffic_light+0x6d4>
		break;
 80019fa:	bf00      	nop
 80019fc:	e002      	b.n	8001a04 <fsm_traffic_light+0x6d4>
		break;
 80019fe:	bf00      	nop
 8001a00:	e000      	b.n	8001a04 <fsm_traffic_light+0x6d4>
		break;
 8001a02:	bf00      	nop
	}
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000148 	.word	0x20000148
 8001a10:	20000118 	.word	0x20000118
 8001a14:	20000054 	.word	0x20000054
 8001a18:	20000050 	.word	0x20000050
 8001a1c:	2000004c 	.word	0x2000004c

08001a20 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a08      	ldr	r2, [pc, #32]	; (8001a50 <HAL_UART_RxCpltCallback+0x30>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d10a      	bne.n	8001a48 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 8001a32:	2332      	movs	r3, #50	; 0x32
 8001a34:	2201      	movs	r2, #1
 8001a36:	4907      	ldr	r1, [pc, #28]	; (8001a54 <HAL_UART_RxCpltCallback+0x34>)
 8001a38:	4807      	ldr	r0, [pc, #28]	; (8001a58 <HAL_UART_RxCpltCallback+0x38>)
 8001a3a:	f002 fc42 	bl	80042c2 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4904      	ldr	r1, [pc, #16]	; (8001a54 <HAL_UART_RxCpltCallback+0x34>)
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <HAL_UART_RxCpltCallback+0x38>)
 8001a44:	f002 fccf 	bl	80043e6 <HAL_UART_Receive_IT>
	}
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40004400 	.word	0x40004400
 8001a54:	20000120 	.word	0x20000120
 8001a58:	20000188 	.word	0x20000188

08001a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5e:	b08f      	sub	sp, #60	; 0x3c
 8001a60:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a62:	f000 fc5b 	bl	800231c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a66:	f000 f839 	bl	8001adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a6a:	f000 f9a5 	bl	8001db8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a6e:	f000 f979 	bl	8001d64 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001a72:	f000 f901 	bl	8001c78 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001a76:	f000 f873 	bl	8001b60 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4812      	ldr	r0, [pc, #72]	; (8001ac8 <main+0x6c>)
 8001a7e:	f001 fd6f 	bl	8003560 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001a82:	4812      	ldr	r0, [pc, #72]	; (8001acc <main+0x70>)
 8001a84:	f001 fcc2 	bl	800340c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4911      	ldr	r1, [pc, #68]	; (8001ad0 <main+0x74>)
 8001a8c:	4811      	ldr	r0, [pc, #68]	; (8001ad4 <main+0x78>)
 8001a8e:	f002 fcaa 	bl	80043e6 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  timer_flag[5] = 1;
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <main+0x7c>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	615a      	str	r2, [r3, #20]
  timer_flag[4] = 1;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <main+0x7c>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	611a      	str	r2, [r3, #16]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_traffic_light();
 8001a9e:	f7ff fc47 	bl	8001330 <fsm_traffic_light>
	  fsm_pedestrian_light(htim3);
 8001aa2:	4e09      	ldr	r6, [pc, #36]	; (8001ac8 <main+0x6c>)
 8001aa4:	466d      	mov	r5, sp
 8001aa6:	f106 0410 	add.w	r4, r6, #16
 8001aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ab6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001aba:	e885 0003 	stmia.w	r5, {r0, r1}
 8001abe:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001ac2:	f7ff faaf 	bl	8001024 <fsm_pedestrian_light>
	  fsm_traffic_light();
 8001ac6:	e7ea      	b.n	8001a9e <main+0x42>
 8001ac8:	20000200 	.word	0x20000200
 8001acc:	20000248 	.word	0x20000248
 8001ad0:	20000120 	.word	0x20000120
 8001ad4:	20000188 	.word	0x20000188
 8001ad8:	20000148 	.word	0x20000148

08001adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b090      	sub	sp, #64	; 0x40
 8001ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae2:	f107 0318 	add.w	r3, r7, #24
 8001ae6:	2228      	movs	r2, #40	; 0x28
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 f8fe 	bl	8004cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
 8001afc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001afe:	2302      	movs	r3, #2
 8001b00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b02:	2301      	movs	r3, #1
 8001b04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b06:	2310      	movs	r3, #16
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001b12:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b18:	f107 0318 	add.w	r3, r7, #24
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f001 f80b 	bl	8002b38 <HAL_RCC_OscConfig>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001b28:	f000 f9f2 	bl	8001f10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b30:	2302      	movs	r3, #2
 8001b32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	2102      	movs	r1, #2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f001 fa76 	bl	8003038 <HAL_RCC_ClockConfig>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001b52:	f000 f9dd 	bl	8001f10 <Error_Handler>
  }
}
 8001b56:	bf00      	nop
 8001b58:	3740      	adds	r7, #64	; 0x40
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b60:	b5b0      	push	{r4, r5, r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b66:	f107 0308 	add.w	r3, r7, #8
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b74:	463b      	mov	r3, r7
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b7c:	4b3a      	ldr	r3, [pc, #232]	; (8001c68 <MX_TIM2_Init+0x108>)
 8001b7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8001b84:	4b38      	ldr	r3, [pc, #224]	; (8001c68 <MX_TIM2_Init+0x108>)
 8001b86:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001b8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8c:	4b36      	ldr	r3, [pc, #216]	; (8001c68 <MX_TIM2_Init+0x108>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001b92:	4b35      	ldr	r3, [pc, #212]	; (8001c68 <MX_TIM2_Init+0x108>)
 8001b94:	2209      	movs	r2, #9
 8001b96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b98:	4b33      	ldr	r3, [pc, #204]	; (8001c68 <MX_TIM2_Init+0x108>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9e:	4b32      	ldr	r3, [pc, #200]	; (8001c68 <MX_TIM2_Init+0x108>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ba4:	4830      	ldr	r0, [pc, #192]	; (8001c68 <MX_TIM2_Init+0x108>)
 8001ba6:	f001 fbe1 	bl	800336c <HAL_TIM_Base_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001bb0:	f000 f9ae 	bl	8001f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bba:	f107 0308 	add.w	r3, r7, #8
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4829      	ldr	r0, [pc, #164]	; (8001c68 <MX_TIM2_Init+0x108>)
 8001bc2:	f001 ff35 	bl	8003a30 <HAL_TIM_ConfigClockSource>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001bcc:	f000 f9a0 	bl	8001f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bd8:	463b      	mov	r3, r7
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4822      	ldr	r0, [pc, #136]	; (8001c68 <MX_TIM2_Init+0x108>)
 8001bde:	f002 fab3 	bl	8004148 <HAL_TIMEx_MasterConfigSynchronization>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001be8:	f000 f992 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  TIME_CYCLE = 1/(64e6/(htim2.Init.Prescaler + 1)/(htim2.Init.Period + 1)) * 1000; // Time cycle
 8001bec:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <MX_TIM2_Init+0x108>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fbee 	bl	80003d4 <__aeabi_ui2d>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	a118      	add	r1, pc, #96	; (adr r1, 8001c60 <MX_TIM2_Init+0x100>)
 8001bfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c02:	f7fe fd8b 	bl	800071c <__aeabi_ddiv>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4614      	mov	r4, r2
 8001c0c:	461d      	mov	r5, r3
 8001c0e:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <MX_TIM2_Init+0x108>)
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	3301      	adds	r3, #1
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fbdd 	bl	80003d4 <__aeabi_ui2d>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4620      	mov	r0, r4
 8001c20:	4629      	mov	r1, r5
 8001c22:	f7fe fd7b 	bl	800071c <__aeabi_ddiv>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	f04f 0000 	mov.w	r0, #0
 8001c2e:	490f      	ldr	r1, [pc, #60]	; (8001c6c <MX_TIM2_Init+0x10c>)
 8001c30:	f7fe fd74 	bl	800071c <__aeabi_ddiv>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <MX_TIM2_Init+0x110>)
 8001c42:	f7fe fc41 	bl	80004c8 <__aeabi_dmul>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f7fe fe4d 	bl	80008ec <__aeabi_d2iz>
 8001c52:	4603      	mov	r3, r0
 8001c54:	4a07      	ldr	r2, [pc, #28]	; (8001c74 <MX_TIM2_Init+0x114>)
 8001c56:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c60:	00000000 	.word	0x00000000
 8001c64:	418e8480 	.word	0x418e8480
 8001c68:	20000248 	.word	0x20000248
 8001c6c:	3ff00000 	.word	0x3ff00000
 8001c70:	408f4000 	.word	0x408f4000
 8001c74:	20000290 	.word	0x20000290

08001c78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08e      	sub	sp, #56	; 0x38
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8c:	f107 0320 	add.w	r3, r7, #32
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
 8001ca4:	615a      	str	r2, [r3, #20]
 8001ca6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ca8:	4b2c      	ldr	r3, [pc, #176]	; (8001d5c <MX_TIM3_Init+0xe4>)
 8001caa:	4a2d      	ldr	r2, [pc, #180]	; (8001d60 <MX_TIM3_Init+0xe8>)
 8001cac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001cae:	4b2b      	ldr	r3, [pc, #172]	; (8001d5c <MX_TIM3_Init+0xe4>)
 8001cb0:	223f      	movs	r2, #63	; 0x3f
 8001cb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb4:	4b29      	ldr	r3, [pc, #164]	; (8001d5c <MX_TIM3_Init+0xe4>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001cba:	4b28      	ldr	r3, [pc, #160]	; (8001d5c <MX_TIM3_Init+0xe4>)
 8001cbc:	2263      	movs	r2, #99	; 0x63
 8001cbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc0:	4b26      	ldr	r3, [pc, #152]	; (8001d5c <MX_TIM3_Init+0xe4>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc6:	4b25      	ldr	r3, [pc, #148]	; (8001d5c <MX_TIM3_Init+0xe4>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ccc:	4823      	ldr	r0, [pc, #140]	; (8001d5c <MX_TIM3_Init+0xe4>)
 8001cce:	f001 fb4d 	bl	800336c <HAL_TIM_Base_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001cd8:	f000 f91a 	bl	8001f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ce2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	481c      	ldr	r0, [pc, #112]	; (8001d5c <MX_TIM3_Init+0xe4>)
 8001cea:	f001 fea1 	bl	8003a30 <HAL_TIM_ConfigClockSource>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001cf4:	f000 f90c 	bl	8001f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001cf8:	4818      	ldr	r0, [pc, #96]	; (8001d5c <MX_TIM3_Init+0xe4>)
 8001cfa:	f001 fbd9 	bl	80034b0 <HAL_TIM_PWM_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001d04:	f000 f904 	bl	8001f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d10:	f107 0320 	add.w	r3, r7, #32
 8001d14:	4619      	mov	r1, r3
 8001d16:	4811      	ldr	r0, [pc, #68]	; (8001d5c <MX_TIM3_Init+0xe4>)
 8001d18:	f002 fa16 	bl	8004148 <HAL_TIMEx_MasterConfigSynchronization>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001d22:	f000 f8f5 	bl	8001f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d26:	2360      	movs	r3, #96	; 0x60
 8001d28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	2200      	movs	r2, #0
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4807      	ldr	r0, [pc, #28]	; (8001d5c <MX_TIM3_Init+0xe4>)
 8001d3e:	f001 fdb9 	bl	80038b4 <HAL_TIM_PWM_ConfigChannel>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001d48:	f000 f8e2 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d4c:	4803      	ldr	r0, [pc, #12]	; (8001d5c <MX_TIM3_Init+0xe4>)
 8001d4e:	f000 f9bd 	bl	80020cc <HAL_TIM_MspPostInit>

}
 8001d52:	bf00      	nop
 8001d54:	3738      	adds	r7, #56	; 0x38
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000200 	.word	0x20000200
 8001d60:	40000400 	.word	0x40000400

08001d64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d68:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d6a:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <MX_USART2_UART_Init+0x50>)
 8001d6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001d6e:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d82:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d8a:	220c      	movs	r2, #12
 8001d8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d8e:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d9a:	4805      	ldr	r0, [pc, #20]	; (8001db0 <MX_USART2_UART_Init+0x4c>)
 8001d9c:	f002 fa44 	bl	8004228 <HAL_UART_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001da6:	f000 f8b3 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000188 	.word	0x20000188
 8001db4:	40004400 	.word	0x40004400

08001db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbe:	f107 0310 	add.w	r3, r7, #16
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dcc:	4b45      	ldr	r3, [pc, #276]	; (8001ee4 <MX_GPIO_Init+0x12c>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	4a44      	ldr	r2, [pc, #272]	; (8001ee4 <MX_GPIO_Init+0x12c>)
 8001dd2:	f043 0310 	orr.w	r3, r3, #16
 8001dd6:	6193      	str	r3, [r2, #24]
 8001dd8:	4b42      	ldr	r3, [pc, #264]	; (8001ee4 <MX_GPIO_Init+0x12c>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de4:	4b3f      	ldr	r3, [pc, #252]	; (8001ee4 <MX_GPIO_Init+0x12c>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	4a3e      	ldr	r2, [pc, #248]	; (8001ee4 <MX_GPIO_Init+0x12c>)
 8001dea:	f043 0320 	orr.w	r3, r3, #32
 8001dee:	6193      	str	r3, [r2, #24]
 8001df0:	4b3c      	ldr	r3, [pc, #240]	; (8001ee4 <MX_GPIO_Init+0x12c>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f003 0320 	and.w	r3, r3, #32
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfc:	4b39      	ldr	r3, [pc, #228]	; (8001ee4 <MX_GPIO_Init+0x12c>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	4a38      	ldr	r2, [pc, #224]	; (8001ee4 <MX_GPIO_Init+0x12c>)
 8001e02:	f043 0304 	orr.w	r3, r3, #4
 8001e06:	6193      	str	r3, [r2, #24]
 8001e08:	4b36      	ldr	r3, [pc, #216]	; (8001ee4 <MX_GPIO_Init+0x12c>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e14:	4b33      	ldr	r3, [pc, #204]	; (8001ee4 <MX_GPIO_Init+0x12c>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	4a32      	ldr	r2, [pc, #200]	; (8001ee4 <MX_GPIO_Init+0x12c>)
 8001e1a:	f043 0308 	orr.w	r3, r3, #8
 8001e1e:	6193      	str	r3, [r2, #24]
 8001e20:	4b30      	ldr	r3, [pc, #192]	; (8001ee4 <MX_GPIO_Init+0x12c>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	603b      	str	r3, [r7, #0]
 8001e2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8001e32:	482d      	ldr	r0, [pc, #180]	; (8001ee8 <MX_GPIO_Init+0x130>)
 8001e34:	f000 fe2d 	bl	8002a92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001e3e:	482b      	ldr	r0, [pc, #172]	; (8001eec <MX_GPIO_Init+0x134>)
 8001e40:	f000 fe27 	bl	8002a92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e4a:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <MX_GPIO_Init+0x138>)
 8001e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e52:	f107 0310 	add.w	r3, r7, #16
 8001e56:	4619      	mov	r1, r3
 8001e58:	4826      	ldr	r0, [pc, #152]	; (8001ef4 <MX_GPIO_Init+0x13c>)
 8001e5a:	f000 fc7f 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pins : A1_Pin A2_Pin A0_Pin */
  GPIO_InitStruct.Pin = A1_Pin|A2_Pin|A0_Pin;
 8001e5e:	2392      	movs	r3, #146	; 0x92
 8001e60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e66:	2301      	movs	r3, #1
 8001e68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	f107 0310 	add.w	r3, r7, #16
 8001e6e:	4619      	mov	r1, r3
 8001e70:	481d      	ldr	r0, [pc, #116]	; (8001ee8 <MX_GPIO_Init+0x130>)
 8001e72:	f000 fc73 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D7_Pin|D2_Pin;
 8001e76:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8001e7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2302      	movs	r3, #2
 8001e86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e88:	f107 0310 	add.w	r3, r7, #16
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4816      	ldr	r0, [pc, #88]	; (8001ee8 <MX_GPIO_Init+0x130>)
 8001e90:	f000 fc64 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8001e94:	2301      	movs	r3, #1
 8001e96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8001ea0:	f107 0310 	add.w	r3, r7, #16
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4811      	ldr	r0, [pc, #68]	; (8001eec <MX_GPIO_Init+0x134>)
 8001ea8:	f000 fc58 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8001eac:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001eb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ebe:	f107 0310 	add.w	r3, r7, #16
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4809      	ldr	r0, [pc, #36]	; (8001eec <MX_GPIO_Init+0x134>)
 8001ec6:	f000 fc49 	bl	800275c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2100      	movs	r1, #0
 8001ece:	2028      	movs	r0, #40	; 0x28
 8001ed0:	f000 fb5d 	bl	800258e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ed4:	2028      	movs	r0, #40	; 0x28
 8001ed6:	f000 fb76 	bl	80025c6 <HAL_NVIC_EnableIRQ>

}
 8001eda:	bf00      	nop
 8001edc:	3720      	adds	r7, #32
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40010800 	.word	0x40010800
 8001eec:	40010c00 	.word	0x40010c00
 8001ef0:	10110000 	.word	0x10110000
 8001ef4:	40011000 	.word	0x40011000

08001ef8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	timerRun();
 8001f00:	f000 f842 	bl	8001f88 <timerRun>
	getKeyInput();
 8001f04:	f7fe fd44 	bl	8000990 <getKeyInput>
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f14:	b672      	cpsid	i
}
 8001f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <Error_Handler+0x8>
	...

08001f1c <setTimer>:
// Khoi tao cac mang timer_counter va timer_flag voi so luong phan tu moi mang bang NUM_OF_TIMERS
int timer_counter[NUM_OF_TIMERS] = {0};
int timer_flag[NUM_OF_TIMERS] = {0};

// setTimer (index: Timer duoc xet toi; duration: Thoi gian setTimer (don vi: ms))
void setTimer(int index, int duration) {
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / TIME_CYCLE;
 8001f26:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <setTimer+0x30>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	fb92 f2f3 	sdiv	r2, r2, r3
 8001f30:	4907      	ldr	r1, [pc, #28]	; (8001f50 <setTimer+0x34>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8001f38:	4a06      	ldr	r2, [pc, #24]	; (8001f54 <setTimer+0x38>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	20000290 	.word	0x20000290
 8001f50:	20000124 	.word	0x20000124
 8001f54:	20000148 	.word	0x20000148

08001f58 <clearTimer>:

// clearTimer (timer_flag[index] = 0, timer_counter[index] = 0)
void clearTimer(int index) {
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
	timer_counter[index] = 0;
 8001f60:	4a07      	ldr	r2, [pc, #28]	; (8001f80 <clearTimer+0x28>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2100      	movs	r1, #0
 8001f66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_flag[index] = 0;
 8001f6a:	4a06      	ldr	r2, [pc, #24]	; (8001f84 <clearTimer+0x2c>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2100      	movs	r1, #0
 8001f70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000124 	.word	0x20000124
 8001f84:	20000148 	.word	0x20000148

08001f88 <timerRun>:

// timerRun
void timerRun(){
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
	// Dung vong lap "for" de xet doi voi tung Timer
	// Voi moi Timer, so chu ki timer_counter se dem nguoc, neu timer_counter == 0 thi timer da dem nguoc ve 0, khi do timer_flag se bao gia tri bang 1
	for (int i = 0; i < NUM_OF_TIMERS; i++) {
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	e01c      	b.n	8001fce <timerRun+0x46>
		if (timer_counter[i] > 0){
 8001f94:	4a12      	ldr	r2, [pc, #72]	; (8001fe0 <timerRun+0x58>)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	dd13      	ble.n	8001fc8 <timerRun+0x40>
			timer_counter[i]--;
 8001fa0:	4a0f      	ldr	r2, [pc, #60]	; (8001fe0 <timerRun+0x58>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa8:	1e5a      	subs	r2, r3, #1
 8001faa:	490d      	ldr	r1, [pc, #52]	; (8001fe0 <timerRun+0x58>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0){
 8001fb2:	4a0b      	ldr	r2, [pc, #44]	; (8001fe0 <timerRun+0x58>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	dc04      	bgt.n	8001fc8 <timerRun+0x40>
				timer_flag[i] = 1;
 8001fbe:	4a09      	ldr	r2, [pc, #36]	; (8001fe4 <timerRun+0x5c>)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_TIMERS; i++) {
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	dddf      	ble.n	8001f94 <timerRun+0xc>
			}
		}
	}
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr
 8001fe0:	20000124 	.word	0x20000124
 8001fe4:	20000148 	.word	0x20000148

08001fe8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <HAL_MspInit+0x5c>)
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	4a14      	ldr	r2, [pc, #80]	; (8002044 <HAL_MspInit+0x5c>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6193      	str	r3, [r2, #24]
 8001ffa:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_MspInit+0x5c>)
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002006:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <HAL_MspInit+0x5c>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4a0e      	ldr	r2, [pc, #56]	; (8002044 <HAL_MspInit+0x5c>)
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002010:	61d3      	str	r3, [r2, #28]
 8002012:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <HAL_MspInit+0x5c>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_MspInit+0x60>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	4a04      	ldr	r2, [pc, #16]	; (8002048 <HAL_MspInit+0x60>)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	40021000 	.word	0x40021000
 8002048:	40010000 	.word	0x40010000

0800204c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205c:	d114      	bne.n	8002088 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800205e:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <HAL_TIM_Base_MspInit+0x78>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	4a18      	ldr	r2, [pc, #96]	; (80020c4 <HAL_TIM_Base_MspInit+0x78>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	61d3      	str	r3, [r2, #28]
 800206a:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <HAL_TIM_Base_MspInit+0x78>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002076:	2200      	movs	r2, #0
 8002078:	2100      	movs	r1, #0
 800207a:	201c      	movs	r0, #28
 800207c:	f000 fa87 	bl	800258e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002080:	201c      	movs	r0, #28
 8002082:	f000 faa0 	bl	80025c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002086:	e018      	b.n	80020ba <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a0e      	ldr	r2, [pc, #56]	; (80020c8 <HAL_TIM_Base_MspInit+0x7c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d113      	bne.n	80020ba <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002092:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <HAL_TIM_Base_MspInit+0x78>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	4a0b      	ldr	r2, [pc, #44]	; (80020c4 <HAL_TIM_Base_MspInit+0x78>)
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	61d3      	str	r3, [r2, #28]
 800209e:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <HAL_TIM_Base_MspInit+0x78>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2100      	movs	r1, #0
 80020ae:	201d      	movs	r0, #29
 80020b0:	f000 fa6d 	bl	800258e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020b4:	201d      	movs	r0, #29
 80020b6:	f000 fa86 	bl	80025c6 <HAL_NVIC_EnableIRQ>
}
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000
 80020c8:	40000400 	.word	0x40000400

080020cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	f107 0310 	add.w	r3, r7, #16
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a0f      	ldr	r2, [pc, #60]	; (8002124 <HAL_TIM_MspPostInit+0x58>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d117      	bne.n	800211c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ec:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <HAL_TIM_MspPostInit+0x5c>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	4a0d      	ldr	r2, [pc, #52]	; (8002128 <HAL_TIM_MspPostInit+0x5c>)
 80020f2:	f043 0304 	orr.w	r3, r3, #4
 80020f6:	6193      	str	r3, [r2, #24]
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_TIM_MspPostInit+0x5c>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = D12_Pin;
 8002104:	2340      	movs	r3, #64	; 0x40
 8002106:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210c:	2302      	movs	r3, #2
 800210e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(D12_GPIO_Port, &GPIO_InitStruct);
 8002110:	f107 0310 	add.w	r3, r7, #16
 8002114:	4619      	mov	r1, r3
 8002116:	4805      	ldr	r0, [pc, #20]	; (800212c <HAL_TIM_MspPostInit+0x60>)
 8002118:	f000 fb20 	bl	800275c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800211c:	bf00      	nop
 800211e:	3720      	adds	r7, #32
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40000400 	.word	0x40000400
 8002128:	40021000 	.word	0x40021000
 800212c:	40010800 	.word	0x40010800

08002130 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f107 0310 	add.w	r3, r7, #16
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a19      	ldr	r2, [pc, #100]	; (80021b0 <HAL_UART_MspInit+0x80>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d12b      	bne.n	80021a8 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002150:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <HAL_UART_MspInit+0x84>)
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	4a17      	ldr	r2, [pc, #92]	; (80021b4 <HAL_UART_MspInit+0x84>)
 8002156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800215a:	61d3      	str	r3, [r2, #28]
 800215c:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <HAL_UART_MspInit+0x84>)
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_UART_MspInit+0x84>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	4a11      	ldr	r2, [pc, #68]	; (80021b4 <HAL_UART_MspInit+0x84>)
 800216e:	f043 0304 	orr.w	r3, r3, #4
 8002172:	6193      	str	r3, [r2, #24]
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <HAL_UART_MspInit+0x84>)
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002180:	230c      	movs	r3, #12
 8002182:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002184:	2302      	movs	r3, #2
 8002186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002188:	2302      	movs	r3, #2
 800218a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218c:	f107 0310 	add.w	r3, r7, #16
 8002190:	4619      	mov	r1, r3
 8002192:	4809      	ldr	r0, [pc, #36]	; (80021b8 <HAL_UART_MspInit+0x88>)
 8002194:	f000 fae2 	bl	800275c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002198:	2200      	movs	r2, #0
 800219a:	2100      	movs	r1, #0
 800219c:	2026      	movs	r0, #38	; 0x26
 800219e:	f000 f9f6 	bl	800258e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021a2:	2026      	movs	r0, #38	; 0x26
 80021a4:	f000 fa0f 	bl	80025c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021a8:	bf00      	nop
 80021aa:	3720      	adds	r7, #32
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40004400 	.word	0x40004400
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40010800 	.word	0x40010800

080021bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021c0:	e7fe      	b.n	80021c0 <NMI_Handler+0x4>

080021c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c6:	e7fe      	b.n	80021c6 <HardFault_Handler+0x4>

080021c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021cc:	e7fe      	b.n	80021cc <MemManage_Handler+0x4>

080021ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021d2:	e7fe      	b.n	80021d2 <BusFault_Handler+0x4>

080021d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d8:	e7fe      	b.n	80021d8 <UsageFault_Handler+0x4>

080021da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr

080021e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr

080021f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr

080021fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002202:	f000 f8d1 	bl	80023a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002210:	4802      	ldr	r0, [pc, #8]	; (800221c <TIM2_IRQHandler+0x10>)
 8002212:	f001 fa47 	bl	80036a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000248 	.word	0x20000248

08002220 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002224:	4802      	ldr	r0, [pc, #8]	; (8002230 <TIM3_IRQHandler+0x10>)
 8002226:	f001 fa3d 	bl	80036a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000200 	.word	0x20000200

08002234 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002238:	4802      	ldr	r0, [pc, #8]	; (8002244 <USART2_IRQHandler+0x10>)
 800223a:	f002 f905 	bl	8004448 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000188 	.word	0x20000188

08002248 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800224c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002250:	f000 fc50 	bl	8002af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}

08002258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002260:	4a14      	ldr	r2, [pc, #80]	; (80022b4 <_sbrk+0x5c>)
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <_sbrk+0x60>)
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800226c:	4b13      	ldr	r3, [pc, #76]	; (80022bc <_sbrk+0x64>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d102      	bne.n	800227a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <_sbrk+0x64>)
 8002276:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <_sbrk+0x68>)
 8002278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <_sbrk+0x64>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	429a      	cmp	r2, r3
 8002286:	d207      	bcs.n	8002298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002288:	f002 fd06 	bl	8004c98 <__errno>
 800228c:	4603      	mov	r3, r0
 800228e:	220c      	movs	r2, #12
 8002290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002292:	f04f 33ff 	mov.w	r3, #4294967295
 8002296:	e009      	b.n	80022ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <_sbrk+0x64>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <_sbrk+0x64>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	4a05      	ldr	r2, [pc, #20]	; (80022bc <_sbrk+0x64>)
 80022a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022aa:	68fb      	ldr	r3, [r7, #12]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20005000 	.word	0x20005000
 80022b8:	00000400 	.word	0x00000400
 80022bc:	2000016c 	.word	0x2000016c
 80022c0:	200002a8 	.word	0x200002a8

080022c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022d0:	480c      	ldr	r0, [pc, #48]	; (8002304 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022d2:	490d      	ldr	r1, [pc, #52]	; (8002308 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022d4:	4a0d      	ldr	r2, [pc, #52]	; (800230c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022d8:	e002      	b.n	80022e0 <LoopCopyDataInit>

080022da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022de:	3304      	adds	r3, #4

080022e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e4:	d3f9      	bcc.n	80022da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022e6:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022e8:	4c0a      	ldr	r4, [pc, #40]	; (8002314 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022ec:	e001      	b.n	80022f2 <LoopFillZerobss>

080022ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f0:	3204      	adds	r2, #4

080022f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f4:	d3fb      	bcc.n	80022ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022f6:	f7ff ffe5 	bl	80022c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022fa:	f002 fcd3 	bl	8004ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022fe:	f7ff fbad 	bl	8001a5c <main>
  bx lr
 8002302:	4770      	bx	lr
  ldr r0, =_sdata
 8002304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002308:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 800230c:	080055fc 	.word	0x080055fc
  ldr r2, =_sbss
 8002310:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8002314:	200002a8 	.word	0x200002a8

08002318 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002318:	e7fe      	b.n	8002318 <ADC1_2_IRQHandler>
	...

0800231c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002320:	4b08      	ldr	r3, [pc, #32]	; (8002344 <HAL_Init+0x28>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a07      	ldr	r2, [pc, #28]	; (8002344 <HAL_Init+0x28>)
 8002326:	f043 0310 	orr.w	r3, r3, #16
 800232a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800232c:	2003      	movs	r0, #3
 800232e:	f000 f923 	bl	8002578 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002332:	2000      	movs	r0, #0
 8002334:	f000 f808 	bl	8002348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002338:	f7ff fe56 	bl	8001fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40022000 	.word	0x40022000

08002348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <HAL_InitTick+0x54>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <HAL_InitTick+0x58>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	4619      	mov	r1, r3
 800235a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800235e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002362:	fbb2 f3f3 	udiv	r3, r2, r3
 8002366:	4618      	mov	r0, r3
 8002368:	f000 f93b 	bl	80025e2 <HAL_SYSTICK_Config>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e00e      	b.n	8002394 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b0f      	cmp	r3, #15
 800237a:	d80a      	bhi.n	8002392 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800237c:	2200      	movs	r2, #0
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	f04f 30ff 	mov.w	r0, #4294967295
 8002384:	f000 f903 	bl	800258e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002388:	4a06      	ldr	r2, [pc, #24]	; (80023a4 <HAL_InitTick+0x5c>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	e000      	b.n	8002394 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000058 	.word	0x20000058
 80023a0:	20000060 	.word	0x20000060
 80023a4:	2000005c 	.word	0x2000005c

080023a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023ac:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <HAL_IncTick+0x1c>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <HAL_IncTick+0x20>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4413      	add	r3, r2
 80023b8:	4a03      	ldr	r2, [pc, #12]	; (80023c8 <HAL_IncTick+0x20>)
 80023ba:	6013      	str	r3, [r2, #0]
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	20000060 	.word	0x20000060
 80023c8:	20000294 	.word	0x20000294

080023cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return uwTick;
 80023d0:	4b02      	ldr	r3, [pc, #8]	; (80023dc <HAL_GetTick+0x10>)
 80023d2:	681b      	ldr	r3, [r3, #0]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr
 80023dc:	20000294 	.word	0x20000294

080023e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <__NVIC_SetPriorityGrouping+0x44>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023fc:	4013      	ands	r3, r2
 80023fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800240c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002412:	4a04      	ldr	r2, [pc, #16]	; (8002424 <__NVIC_SetPriorityGrouping+0x44>)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	60d3      	str	r3, [r2, #12]
}
 8002418:	bf00      	nop
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <__NVIC_GetPriorityGrouping+0x18>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	0a1b      	lsrs	r3, r3, #8
 8002432:	f003 0307 	and.w	r3, r3, #7
}
 8002436:	4618      	mov	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002452:	2b00      	cmp	r3, #0
 8002454:	db0b      	blt.n	800246e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	f003 021f 	and.w	r2, r3, #31
 800245c:	4906      	ldr	r1, [pc, #24]	; (8002478 <__NVIC_EnableIRQ+0x34>)
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	2001      	movs	r0, #1
 8002466:	fa00 f202 	lsl.w	r2, r0, r2
 800246a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	e000e100 	.word	0xe000e100

0800247c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	6039      	str	r1, [r7, #0]
 8002486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248c:	2b00      	cmp	r3, #0
 800248e:	db0a      	blt.n	80024a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	b2da      	uxtb	r2, r3
 8002494:	490c      	ldr	r1, [pc, #48]	; (80024c8 <__NVIC_SetPriority+0x4c>)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	0112      	lsls	r2, r2, #4
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	440b      	add	r3, r1
 80024a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024a4:	e00a      	b.n	80024bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	4908      	ldr	r1, [pc, #32]	; (80024cc <__NVIC_SetPriority+0x50>)
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	3b04      	subs	r3, #4
 80024b4:	0112      	lsls	r2, r2, #4
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	440b      	add	r3, r1
 80024ba:	761a      	strb	r2, [r3, #24]
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	e000e100 	.word	0xe000e100
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b089      	sub	sp, #36	; 0x24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f1c3 0307 	rsb	r3, r3, #7
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	bf28      	it	cs
 80024ee:	2304      	movcs	r3, #4
 80024f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3304      	adds	r3, #4
 80024f6:	2b06      	cmp	r3, #6
 80024f8:	d902      	bls.n	8002500 <NVIC_EncodePriority+0x30>
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3b03      	subs	r3, #3
 80024fe:	e000      	b.n	8002502 <NVIC_EncodePriority+0x32>
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	f04f 32ff 	mov.w	r2, #4294967295
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43da      	mvns	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	401a      	ands	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002518:	f04f 31ff 	mov.w	r1, #4294967295
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	fa01 f303 	lsl.w	r3, r1, r3
 8002522:	43d9      	mvns	r1, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002528:	4313      	orrs	r3, r2
         );
}
 800252a:	4618      	mov	r0, r3
 800252c:	3724      	adds	r7, #36	; 0x24
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3b01      	subs	r3, #1
 8002540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002544:	d301      	bcc.n	800254a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002546:	2301      	movs	r3, #1
 8002548:	e00f      	b.n	800256a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800254a:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <SysTick_Config+0x40>)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3b01      	subs	r3, #1
 8002550:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002552:	210f      	movs	r1, #15
 8002554:	f04f 30ff 	mov.w	r0, #4294967295
 8002558:	f7ff ff90 	bl	800247c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <SysTick_Config+0x40>)
 800255e:	2200      	movs	r2, #0
 8002560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002562:	4b04      	ldr	r3, [pc, #16]	; (8002574 <SysTick_Config+0x40>)
 8002564:	2207      	movs	r2, #7
 8002566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	e000e010 	.word	0xe000e010

08002578 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff ff2d 	bl	80023e0 <__NVIC_SetPriorityGrouping>
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800258e:	b580      	push	{r7, lr}
 8002590:	b086      	sub	sp, #24
 8002592:	af00      	add	r7, sp, #0
 8002594:	4603      	mov	r3, r0
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025a0:	f7ff ff42 	bl	8002428 <__NVIC_GetPriorityGrouping>
 80025a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68b9      	ldr	r1, [r7, #8]
 80025aa:	6978      	ldr	r0, [r7, #20]
 80025ac:	f7ff ff90 	bl	80024d0 <NVIC_EncodePriority>
 80025b0:	4602      	mov	r2, r0
 80025b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b6:	4611      	mov	r1, r2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ff5f 	bl	800247c <__NVIC_SetPriority>
}
 80025be:	bf00      	nop
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	4603      	mov	r3, r0
 80025ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff35 	bl	8002444 <__NVIC_EnableIRQ>
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff ffa2 	bl	8002534 <SysTick_Config>
 80025f0:	4603      	mov	r3, r0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b085      	sub	sp, #20
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800260c:	2b02      	cmp	r3, #2
 800260e:	d008      	beq.n	8002622 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2204      	movs	r2, #4
 8002614:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e020      	b.n	8002664 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 020e 	bic.w	r2, r2, #14
 8002630:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0201 	bic.w	r2, r2, #1
 8002640:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264a:	2101      	movs	r1, #1
 800264c:	fa01 f202 	lsl.w	r2, r1, r2
 8002650:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002662:	7bfb      	ldrb	r3, [r7, #15]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr
	...

08002670 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002682:	2b02      	cmp	r3, #2
 8002684:	d005      	beq.n	8002692 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2204      	movs	r2, #4
 800268a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
 8002690:	e051      	b.n	8002736 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 020e 	bic.w	r2, r2, #14
 80026a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0201 	bic.w	r2, r2, #1
 80026b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a22      	ldr	r2, [pc, #136]	; (8002740 <HAL_DMA_Abort_IT+0xd0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d029      	beq.n	8002710 <HAL_DMA_Abort_IT+0xa0>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a20      	ldr	r2, [pc, #128]	; (8002744 <HAL_DMA_Abort_IT+0xd4>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d022      	beq.n	800270c <HAL_DMA_Abort_IT+0x9c>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a1f      	ldr	r2, [pc, #124]	; (8002748 <HAL_DMA_Abort_IT+0xd8>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d01a      	beq.n	8002706 <HAL_DMA_Abort_IT+0x96>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a1d      	ldr	r2, [pc, #116]	; (800274c <HAL_DMA_Abort_IT+0xdc>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d012      	beq.n	8002700 <HAL_DMA_Abort_IT+0x90>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a1c      	ldr	r2, [pc, #112]	; (8002750 <HAL_DMA_Abort_IT+0xe0>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d00a      	beq.n	80026fa <HAL_DMA_Abort_IT+0x8a>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a1a      	ldr	r2, [pc, #104]	; (8002754 <HAL_DMA_Abort_IT+0xe4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d102      	bne.n	80026f4 <HAL_DMA_Abort_IT+0x84>
 80026ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026f2:	e00e      	b.n	8002712 <HAL_DMA_Abort_IT+0xa2>
 80026f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026f8:	e00b      	b.n	8002712 <HAL_DMA_Abort_IT+0xa2>
 80026fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026fe:	e008      	b.n	8002712 <HAL_DMA_Abort_IT+0xa2>
 8002700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002704:	e005      	b.n	8002712 <HAL_DMA_Abort_IT+0xa2>
 8002706:	f44f 7380 	mov.w	r3, #256	; 0x100
 800270a:	e002      	b.n	8002712 <HAL_DMA_Abort_IT+0xa2>
 800270c:	2310      	movs	r3, #16
 800270e:	e000      	b.n	8002712 <HAL_DMA_Abort_IT+0xa2>
 8002710:	2301      	movs	r3, #1
 8002712:	4a11      	ldr	r2, [pc, #68]	; (8002758 <HAL_DMA_Abort_IT+0xe8>)
 8002714:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	4798      	blx	r3
    } 
  }
  return status;
 8002736:	7bfb      	ldrb	r3, [r7, #15]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40020008 	.word	0x40020008
 8002744:	4002001c 	.word	0x4002001c
 8002748:	40020030 	.word	0x40020030
 800274c:	40020044 	.word	0x40020044
 8002750:	40020058 	.word	0x40020058
 8002754:	4002006c 	.word	0x4002006c
 8002758:	40020000 	.word	0x40020000

0800275c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800275c:	b480      	push	{r7}
 800275e:	b08b      	sub	sp, #44	; 0x2c
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002766:	2300      	movs	r3, #0
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800276a:	2300      	movs	r3, #0
 800276c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800276e:	e169      	b.n	8002a44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002770:	2201      	movs	r2, #1
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	69fa      	ldr	r2, [r7, #28]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	429a      	cmp	r2, r3
 800278a:	f040 8158 	bne.w	8002a3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4a9a      	ldr	r2, [pc, #616]	; (80029fc <HAL_GPIO_Init+0x2a0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d05e      	beq.n	8002856 <HAL_GPIO_Init+0xfa>
 8002798:	4a98      	ldr	r2, [pc, #608]	; (80029fc <HAL_GPIO_Init+0x2a0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d875      	bhi.n	800288a <HAL_GPIO_Init+0x12e>
 800279e:	4a98      	ldr	r2, [pc, #608]	; (8002a00 <HAL_GPIO_Init+0x2a4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d058      	beq.n	8002856 <HAL_GPIO_Init+0xfa>
 80027a4:	4a96      	ldr	r2, [pc, #600]	; (8002a00 <HAL_GPIO_Init+0x2a4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d86f      	bhi.n	800288a <HAL_GPIO_Init+0x12e>
 80027aa:	4a96      	ldr	r2, [pc, #600]	; (8002a04 <HAL_GPIO_Init+0x2a8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d052      	beq.n	8002856 <HAL_GPIO_Init+0xfa>
 80027b0:	4a94      	ldr	r2, [pc, #592]	; (8002a04 <HAL_GPIO_Init+0x2a8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d869      	bhi.n	800288a <HAL_GPIO_Init+0x12e>
 80027b6:	4a94      	ldr	r2, [pc, #592]	; (8002a08 <HAL_GPIO_Init+0x2ac>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d04c      	beq.n	8002856 <HAL_GPIO_Init+0xfa>
 80027bc:	4a92      	ldr	r2, [pc, #584]	; (8002a08 <HAL_GPIO_Init+0x2ac>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d863      	bhi.n	800288a <HAL_GPIO_Init+0x12e>
 80027c2:	4a92      	ldr	r2, [pc, #584]	; (8002a0c <HAL_GPIO_Init+0x2b0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d046      	beq.n	8002856 <HAL_GPIO_Init+0xfa>
 80027c8:	4a90      	ldr	r2, [pc, #576]	; (8002a0c <HAL_GPIO_Init+0x2b0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d85d      	bhi.n	800288a <HAL_GPIO_Init+0x12e>
 80027ce:	2b12      	cmp	r3, #18
 80027d0:	d82a      	bhi.n	8002828 <HAL_GPIO_Init+0xcc>
 80027d2:	2b12      	cmp	r3, #18
 80027d4:	d859      	bhi.n	800288a <HAL_GPIO_Init+0x12e>
 80027d6:	a201      	add	r2, pc, #4	; (adr r2, 80027dc <HAL_GPIO_Init+0x80>)
 80027d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027dc:	08002857 	.word	0x08002857
 80027e0:	08002831 	.word	0x08002831
 80027e4:	08002843 	.word	0x08002843
 80027e8:	08002885 	.word	0x08002885
 80027ec:	0800288b 	.word	0x0800288b
 80027f0:	0800288b 	.word	0x0800288b
 80027f4:	0800288b 	.word	0x0800288b
 80027f8:	0800288b 	.word	0x0800288b
 80027fc:	0800288b 	.word	0x0800288b
 8002800:	0800288b 	.word	0x0800288b
 8002804:	0800288b 	.word	0x0800288b
 8002808:	0800288b 	.word	0x0800288b
 800280c:	0800288b 	.word	0x0800288b
 8002810:	0800288b 	.word	0x0800288b
 8002814:	0800288b 	.word	0x0800288b
 8002818:	0800288b 	.word	0x0800288b
 800281c:	0800288b 	.word	0x0800288b
 8002820:	08002839 	.word	0x08002839
 8002824:	0800284d 	.word	0x0800284d
 8002828:	4a79      	ldr	r2, [pc, #484]	; (8002a10 <HAL_GPIO_Init+0x2b4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d013      	beq.n	8002856 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800282e:	e02c      	b.n	800288a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	623b      	str	r3, [r7, #32]
          break;
 8002836:	e029      	b.n	800288c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	3304      	adds	r3, #4
 800283e:	623b      	str	r3, [r7, #32]
          break;
 8002840:	e024      	b.n	800288c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	3308      	adds	r3, #8
 8002848:	623b      	str	r3, [r7, #32]
          break;
 800284a:	e01f      	b.n	800288c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	330c      	adds	r3, #12
 8002852:	623b      	str	r3, [r7, #32]
          break;
 8002854:	e01a      	b.n	800288c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d102      	bne.n	8002864 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800285e:	2304      	movs	r3, #4
 8002860:	623b      	str	r3, [r7, #32]
          break;
 8002862:	e013      	b.n	800288c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d105      	bne.n	8002878 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800286c:	2308      	movs	r3, #8
 800286e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	611a      	str	r2, [r3, #16]
          break;
 8002876:	e009      	b.n	800288c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002878:	2308      	movs	r3, #8
 800287a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	615a      	str	r2, [r3, #20]
          break;
 8002882:	e003      	b.n	800288c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002884:	2300      	movs	r3, #0
 8002886:	623b      	str	r3, [r7, #32]
          break;
 8002888:	e000      	b.n	800288c <HAL_GPIO_Init+0x130>
          break;
 800288a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2bff      	cmp	r3, #255	; 0xff
 8002890:	d801      	bhi.n	8002896 <HAL_GPIO_Init+0x13a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	e001      	b.n	800289a <HAL_GPIO_Init+0x13e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3304      	adds	r3, #4
 800289a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	2bff      	cmp	r3, #255	; 0xff
 80028a0:	d802      	bhi.n	80028a8 <HAL_GPIO_Init+0x14c>
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	e002      	b.n	80028ae <HAL_GPIO_Init+0x152>
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	3b08      	subs	r3, #8
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	210f      	movs	r1, #15
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	fa01 f303 	lsl.w	r3, r1, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	401a      	ands	r2, r3
 80028c0:	6a39      	ldr	r1, [r7, #32]
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	fa01 f303 	lsl.w	r3, r1, r3
 80028c8:	431a      	orrs	r2, r3
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 80b1 	beq.w	8002a3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028dc:	4b4d      	ldr	r3, [pc, #308]	; (8002a14 <HAL_GPIO_Init+0x2b8>)
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	4a4c      	ldr	r2, [pc, #304]	; (8002a14 <HAL_GPIO_Init+0x2b8>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6193      	str	r3, [r2, #24]
 80028e8:	4b4a      	ldr	r3, [pc, #296]	; (8002a14 <HAL_GPIO_Init+0x2b8>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028f4:	4a48      	ldr	r2, [pc, #288]	; (8002a18 <HAL_GPIO_Init+0x2bc>)
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	089b      	lsrs	r3, r3, #2
 80028fa:	3302      	adds	r3, #2
 80028fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002900:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	220f      	movs	r2, #15
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4013      	ands	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a40      	ldr	r2, [pc, #256]	; (8002a1c <HAL_GPIO_Init+0x2c0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d013      	beq.n	8002948 <HAL_GPIO_Init+0x1ec>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a3f      	ldr	r2, [pc, #252]	; (8002a20 <HAL_GPIO_Init+0x2c4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d00d      	beq.n	8002944 <HAL_GPIO_Init+0x1e8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a3e      	ldr	r2, [pc, #248]	; (8002a24 <HAL_GPIO_Init+0x2c8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d007      	beq.n	8002940 <HAL_GPIO_Init+0x1e4>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a3d      	ldr	r2, [pc, #244]	; (8002a28 <HAL_GPIO_Init+0x2cc>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d101      	bne.n	800293c <HAL_GPIO_Init+0x1e0>
 8002938:	2303      	movs	r3, #3
 800293a:	e006      	b.n	800294a <HAL_GPIO_Init+0x1ee>
 800293c:	2304      	movs	r3, #4
 800293e:	e004      	b.n	800294a <HAL_GPIO_Init+0x1ee>
 8002940:	2302      	movs	r3, #2
 8002942:	e002      	b.n	800294a <HAL_GPIO_Init+0x1ee>
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <HAL_GPIO_Init+0x1ee>
 8002948:	2300      	movs	r3, #0
 800294a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800294c:	f002 0203 	and.w	r2, r2, #3
 8002950:	0092      	lsls	r2, r2, #2
 8002952:	4093      	lsls	r3, r2
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800295a:	492f      	ldr	r1, [pc, #188]	; (8002a18 <HAL_GPIO_Init+0x2bc>)
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	089b      	lsrs	r3, r3, #2
 8002960:	3302      	adds	r3, #2
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d006      	beq.n	8002982 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002974:	4b2d      	ldr	r3, [pc, #180]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	492c      	ldr	r1, [pc, #176]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	600b      	str	r3, [r1, #0]
 8002980:	e006      	b.n	8002990 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002982:	4b2a      	ldr	r3, [pc, #168]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	43db      	mvns	r3, r3
 800298a:	4928      	ldr	r1, [pc, #160]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 800298c:	4013      	ands	r3, r2
 800298e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d006      	beq.n	80029aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800299c:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	4922      	ldr	r1, [pc, #136]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]
 80029a8:	e006      	b.n	80029b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029aa:	4b20      	ldr	r3, [pc, #128]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	491e      	ldr	r1, [pc, #120]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d006      	beq.n	80029d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029c4:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	4918      	ldr	r1, [pc, #96]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	608b      	str	r3, [r1, #8]
 80029d0:	e006      	b.n	80029e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029d2:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	43db      	mvns	r3, r3
 80029da:	4914      	ldr	r1, [pc, #80]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029dc:	4013      	ands	r3, r2
 80029de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d021      	beq.n	8002a30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029ec:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	490e      	ldr	r1, [pc, #56]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60cb      	str	r3, [r1, #12]
 80029f8:	e021      	b.n	8002a3e <HAL_GPIO_Init+0x2e2>
 80029fa:	bf00      	nop
 80029fc:	10320000 	.word	0x10320000
 8002a00:	10310000 	.word	0x10310000
 8002a04:	10220000 	.word	0x10220000
 8002a08:	10210000 	.word	0x10210000
 8002a0c:	10120000 	.word	0x10120000
 8002a10:	10110000 	.word	0x10110000
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40010000 	.word	0x40010000
 8002a1c:	40010800 	.word	0x40010800
 8002a20:	40010c00 	.word	0x40010c00
 8002a24:	40011000 	.word	0x40011000
 8002a28:	40011400 	.word	0x40011400
 8002a2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a30:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_GPIO_Init+0x304>)
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	4909      	ldr	r1, [pc, #36]	; (8002a60 <HAL_GPIO_Init+0x304>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	3301      	adds	r3, #1
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f47f ae8e 	bne.w	8002770 <HAL_GPIO_Init+0x14>
  }
}
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
 8002a58:	372c      	adds	r7, #44	; 0x2c
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr
 8002a60:	40010400 	.word	0x40010400

08002a64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	887b      	ldrh	r3, [r7, #2]
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
 8002a80:	e001      	b.n	8002a86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a82:	2300      	movs	r3, #0
 8002a84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	807b      	strh	r3, [r7, #2]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aa2:	787b      	ldrb	r3, [r7, #1]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aa8:	887a      	ldrh	r2, [r7, #2]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002aae:	e003      	b.n	8002ab8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ab0:	887b      	ldrh	r3, [r7, #2]
 8002ab2:	041a      	lsls	r2, r3, #16
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	611a      	str	r2, [r3, #16]
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b085      	sub	sp, #20
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	460b      	mov	r3, r1
 8002acc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ad4:	887a      	ldrh	r2, [r7, #2]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	041a      	lsls	r2, r3, #16
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	43d9      	mvns	r1, r3
 8002ae0:	887b      	ldrh	r3, [r7, #2]
 8002ae2:	400b      	ands	r3, r1
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	611a      	str	r2, [r3, #16]
}
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002afe:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b00:	695a      	ldr	r2, [r3, #20]
 8002b02:	88fb      	ldrh	r3, [r7, #6]
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d006      	beq.n	8002b18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b0a:	4a05      	ldr	r2, [pc, #20]	; (8002b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b0c:	88fb      	ldrh	r3, [r7, #6]
 8002b0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b10:	88fb      	ldrh	r3, [r7, #6]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 f806 	bl	8002b24 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b18:	bf00      	nop
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40010400 	.word	0x40010400

08002b24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e26c      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 8087 	beq.w	8002c66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b58:	4b92      	ldr	r3, [pc, #584]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d00c      	beq.n	8002b7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b64:	4b8f      	ldr	r3, [pc, #572]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 030c 	and.w	r3, r3, #12
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d112      	bne.n	8002b96 <HAL_RCC_OscConfig+0x5e>
 8002b70:	4b8c      	ldr	r3, [pc, #560]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b7c:	d10b      	bne.n	8002b96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7e:	4b89      	ldr	r3, [pc, #548]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d06c      	beq.n	8002c64 <HAL_RCC_OscConfig+0x12c>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d168      	bne.n	8002c64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e246      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b9e:	d106      	bne.n	8002bae <HAL_RCC_OscConfig+0x76>
 8002ba0:	4b80      	ldr	r3, [pc, #512]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a7f      	ldr	r2, [pc, #508]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	e02e      	b.n	8002c0c <HAL_RCC_OscConfig+0xd4>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x98>
 8002bb6:	4b7b      	ldr	r3, [pc, #492]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a7a      	ldr	r2, [pc, #488]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	4b78      	ldr	r3, [pc, #480]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a77      	ldr	r2, [pc, #476]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e01d      	b.n	8002c0c <HAL_RCC_OscConfig+0xd4>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0xbc>
 8002bda:	4b72      	ldr	r3, [pc, #456]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a71      	ldr	r2, [pc, #452]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	4b6f      	ldr	r3, [pc, #444]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a6e      	ldr	r2, [pc, #440]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e00b      	b.n	8002c0c <HAL_RCC_OscConfig+0xd4>
 8002bf4:	4b6b      	ldr	r3, [pc, #428]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a6a      	ldr	r2, [pc, #424]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b68      	ldr	r3, [pc, #416]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a67      	ldr	r2, [pc, #412]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d013      	beq.n	8002c3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7ff fbda 	bl	80023cc <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7ff fbd6 	bl	80023cc <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	; 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e1fa      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	4b5d      	ldr	r3, [pc, #372]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0xe4>
 8002c3a:	e014      	b.n	8002c66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7ff fbc6 	bl	80023cc <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c44:	f7ff fbc2 	bl	80023cc <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	; 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e1e6      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c56:	4b53      	ldr	r3, [pc, #332]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x10c>
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d063      	beq.n	8002d3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c72:	4b4c      	ldr	r3, [pc, #304]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00b      	beq.n	8002c96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c7e:	4b49      	ldr	r3, [pc, #292]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d11c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x18c>
 8002c8a:	4b46      	ldr	r3, [pc, #280]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d116      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c96:	4b43      	ldr	r3, [pc, #268]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <HAL_RCC_OscConfig+0x176>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d001      	beq.n	8002cae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e1ba      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cae:	4b3d      	ldr	r3, [pc, #244]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4939      	ldr	r1, [pc, #228]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc2:	e03a      	b.n	8002d3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d020      	beq.n	8002d0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ccc:	4b36      	ldr	r3, [pc, #216]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd2:	f7ff fb7b 	bl	80023cc <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cda:	f7ff fb77 	bl	80023cc <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e19b      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cec:	4b2d      	ldr	r3, [pc, #180]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf8:	4b2a      	ldr	r3, [pc, #168]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4927      	ldr	r1, [pc, #156]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	600b      	str	r3, [r1, #0]
 8002d0c:	e015      	b.n	8002d3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d0e:	4b26      	ldr	r3, [pc, #152]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7ff fb5a 	bl	80023cc <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1c:	f7ff fb56 	bl	80023cc <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e17a      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2e:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d03a      	beq.n	8002dbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d019      	beq.n	8002d82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4e:	4b17      	ldr	r3, [pc, #92]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d54:	f7ff fb3a 	bl	80023cc <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d5c:	f7ff fb36 	bl	80023cc <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e15a      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	f000 fad8 	bl	8003330 <RCC_Delay>
 8002d80:	e01c      	b.n	8002dbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d82:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d88:	f7ff fb20 	bl	80023cc <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d8e:	e00f      	b.n	8002db0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d90:	f7ff fb1c 	bl	80023cc <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d908      	bls.n	8002db0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e140      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	42420000 	.word	0x42420000
 8002dac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db0:	4b9e      	ldr	r3, [pc, #632]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e9      	bne.n	8002d90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80a6 	beq.w	8002f16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dce:	4b97      	ldr	r3, [pc, #604]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10d      	bne.n	8002df6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dda:	4b94      	ldr	r3, [pc, #592]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	4a93      	ldr	r2, [pc, #588]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de4:	61d3      	str	r3, [r2, #28]
 8002de6:	4b91      	ldr	r3, [pc, #580]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df2:	2301      	movs	r3, #1
 8002df4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df6:	4b8e      	ldr	r3, [pc, #568]	; (8003030 <HAL_RCC_OscConfig+0x4f8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d118      	bne.n	8002e34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e02:	4b8b      	ldr	r3, [pc, #556]	; (8003030 <HAL_RCC_OscConfig+0x4f8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a8a      	ldr	r2, [pc, #552]	; (8003030 <HAL_RCC_OscConfig+0x4f8>)
 8002e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0e:	f7ff fadd 	bl	80023cc <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e16:	f7ff fad9 	bl	80023cc <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b64      	cmp	r3, #100	; 0x64
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e0fd      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e28:	4b81      	ldr	r3, [pc, #516]	; (8003030 <HAL_RCC_OscConfig+0x4f8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f0      	beq.n	8002e16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d106      	bne.n	8002e4a <HAL_RCC_OscConfig+0x312>
 8002e3c:	4b7b      	ldr	r3, [pc, #492]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	4a7a      	ldr	r2, [pc, #488]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	6213      	str	r3, [r2, #32]
 8002e48:	e02d      	b.n	8002ea6 <HAL_RCC_OscConfig+0x36e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x334>
 8002e52:	4b76      	ldr	r3, [pc, #472]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	4a75      	ldr	r2, [pc, #468]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e58:	f023 0301 	bic.w	r3, r3, #1
 8002e5c:	6213      	str	r3, [r2, #32]
 8002e5e:	4b73      	ldr	r3, [pc, #460]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	4a72      	ldr	r2, [pc, #456]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e64:	f023 0304 	bic.w	r3, r3, #4
 8002e68:	6213      	str	r3, [r2, #32]
 8002e6a:	e01c      	b.n	8002ea6 <HAL_RCC_OscConfig+0x36e>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	2b05      	cmp	r3, #5
 8002e72:	d10c      	bne.n	8002e8e <HAL_RCC_OscConfig+0x356>
 8002e74:	4b6d      	ldr	r3, [pc, #436]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	4a6c      	ldr	r2, [pc, #432]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e7a:	f043 0304 	orr.w	r3, r3, #4
 8002e7e:	6213      	str	r3, [r2, #32]
 8002e80:	4b6a      	ldr	r3, [pc, #424]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	4a69      	ldr	r2, [pc, #420]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6213      	str	r3, [r2, #32]
 8002e8c:	e00b      	b.n	8002ea6 <HAL_RCC_OscConfig+0x36e>
 8002e8e:	4b67      	ldr	r3, [pc, #412]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	4a66      	ldr	r2, [pc, #408]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e94:	f023 0301 	bic.w	r3, r3, #1
 8002e98:	6213      	str	r3, [r2, #32]
 8002e9a:	4b64      	ldr	r3, [pc, #400]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	4a63      	ldr	r2, [pc, #396]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002ea0:	f023 0304 	bic.w	r3, r3, #4
 8002ea4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d015      	beq.n	8002eda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eae:	f7ff fa8d 	bl	80023cc <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb4:	e00a      	b.n	8002ecc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb6:	f7ff fa89 	bl	80023cc <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e0ab      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ecc:	4b57      	ldr	r3, [pc, #348]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0ee      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x37e>
 8002ed8:	e014      	b.n	8002f04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eda:	f7ff fa77 	bl	80023cc <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee0:	e00a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee2:	f7ff fa73 	bl	80023cc <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e095      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef8:	4b4c      	ldr	r3, [pc, #304]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1ee      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d105      	bne.n	8002f16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f0a:	4b48      	ldr	r3, [pc, #288]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	4a47      	ldr	r2, [pc, #284]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 8081 	beq.w	8003022 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f20:	4b42      	ldr	r3, [pc, #264]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 030c 	and.w	r3, r3, #12
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d061      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d146      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f34:	4b3f      	ldr	r3, [pc, #252]	; (8003034 <HAL_RCC_OscConfig+0x4fc>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3a:	f7ff fa47 	bl	80023cc <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f42:	f7ff fa43 	bl	80023cc <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e067      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f54:	4b35      	ldr	r3, [pc, #212]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f0      	bne.n	8002f42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f68:	d108      	bne.n	8002f7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f6a:	4b30      	ldr	r3, [pc, #192]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	492d      	ldr	r1, [pc, #180]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f7c:	4b2b      	ldr	r3, [pc, #172]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a19      	ldr	r1, [r3, #32]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	4927      	ldr	r1, [pc, #156]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f94:	4b27      	ldr	r3, [pc, #156]	; (8003034 <HAL_RCC_OscConfig+0x4fc>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9a:	f7ff fa17 	bl	80023cc <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa2:	f7ff fa13 	bl	80023cc <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e037      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fb4:	4b1d      	ldr	r3, [pc, #116]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x46a>
 8002fc0:	e02f      	b.n	8003022 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc2:	4b1c      	ldr	r3, [pc, #112]	; (8003034 <HAL_RCC_OscConfig+0x4fc>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc8:	f7ff fa00 	bl	80023cc <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7ff f9fc 	bl	80023cc <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e020      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe2:	4b12      	ldr	r3, [pc, #72]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x498>
 8002fee:	e018      	b.n	8003022 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e013      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	429a      	cmp	r2, r3
 800300e:	d106      	bne.n	800301e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301a:	429a      	cmp	r2, r3
 800301c:	d001      	beq.n	8003022 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40021000 	.word	0x40021000
 8003030:	40007000 	.word	0x40007000
 8003034:	42420060 	.word	0x42420060

08003038 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0d0      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800304c:	4b6a      	ldr	r3, [pc, #424]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d910      	bls.n	800307c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305a:	4b67      	ldr	r3, [pc, #412]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f023 0207 	bic.w	r2, r3, #7
 8003062:	4965      	ldr	r1, [pc, #404]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	4313      	orrs	r3, r2
 8003068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800306a:	4b63      	ldr	r3, [pc, #396]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d001      	beq.n	800307c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e0b8      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d020      	beq.n	80030ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003094:	4b59      	ldr	r3, [pc, #356]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4a58      	ldr	r2, [pc, #352]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 800309a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800309e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030ac:	4b53      	ldr	r3, [pc, #332]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4a52      	ldr	r2, [pc, #328]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b8:	4b50      	ldr	r3, [pc, #320]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	494d      	ldr	r1, [pc, #308]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d040      	beq.n	8003158 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d107      	bne.n	80030ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	4b47      	ldr	r3, [pc, #284]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d115      	bne.n	8003116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e07f      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d107      	bne.n	8003106 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f6:	4b41      	ldr	r3, [pc, #260]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d109      	bne.n	8003116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e073      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003106:	4b3d      	ldr	r3, [pc, #244]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e06b      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003116:	4b39      	ldr	r3, [pc, #228]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f023 0203 	bic.w	r2, r3, #3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	4936      	ldr	r1, [pc, #216]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 8003124:	4313      	orrs	r3, r2
 8003126:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003128:	f7ff f950 	bl	80023cc <HAL_GetTick>
 800312c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312e:	e00a      	b.n	8003146 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003130:	f7ff f94c 	bl	80023cc <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	f241 3288 	movw	r2, #5000	; 0x1388
 800313e:	4293      	cmp	r3, r2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e053      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003146:	4b2d      	ldr	r3, [pc, #180]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f003 020c 	and.w	r2, r3, #12
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	429a      	cmp	r2, r3
 8003156:	d1eb      	bne.n	8003130 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003158:	4b27      	ldr	r3, [pc, #156]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d210      	bcs.n	8003188 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003166:	4b24      	ldr	r3, [pc, #144]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f023 0207 	bic.w	r2, r3, #7
 800316e:	4922      	ldr	r1, [pc, #136]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	4313      	orrs	r3, r2
 8003174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003176:	4b20      	ldr	r3, [pc, #128]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d001      	beq.n	8003188 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e032      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d008      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003194:	4b19      	ldr	r3, [pc, #100]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4916      	ldr	r1, [pc, #88]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d009      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031b2:	4b12      	ldr	r3, [pc, #72]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	490e      	ldr	r1, [pc, #56]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031c6:	f000 f821 	bl	800320c <HAL_RCC_GetSysClockFreq>
 80031ca:	4602      	mov	r2, r0
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	490a      	ldr	r1, [pc, #40]	; (8003200 <HAL_RCC_ClockConfig+0x1c8>)
 80031d8:	5ccb      	ldrb	r3, [r1, r3]
 80031da:	fa22 f303 	lsr.w	r3, r2, r3
 80031de:	4a09      	ldr	r2, [pc, #36]	; (8003204 <HAL_RCC_ClockConfig+0x1cc>)
 80031e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031e2:	4b09      	ldr	r3, [pc, #36]	; (8003208 <HAL_RCC_ClockConfig+0x1d0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff f8ae 	bl	8002348 <HAL_InitTick>

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40022000 	.word	0x40022000
 80031fc:	40021000 	.word	0x40021000
 8003200:	080055a8 	.word	0x080055a8
 8003204:	20000058 	.word	0x20000058
 8003208:	2000005c 	.word	0x2000005c

0800320c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800320c:	b490      	push	{r4, r7}
 800320e:	b08a      	sub	sp, #40	; 0x28
 8003210:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003212:	4b2a      	ldr	r3, [pc, #168]	; (80032bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003214:	1d3c      	adds	r4, r7, #4
 8003216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003218:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800321c:	f240 2301 	movw	r3, #513	; 0x201
 8003220:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	2300      	movs	r3, #0
 8003228:	61bb      	str	r3, [r7, #24]
 800322a:	2300      	movs	r3, #0
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003236:	4b22      	ldr	r3, [pc, #136]	; (80032c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f003 030c 	and.w	r3, r3, #12
 8003242:	2b04      	cmp	r3, #4
 8003244:	d002      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0x40>
 8003246:	2b08      	cmp	r3, #8
 8003248:	d003      	beq.n	8003252 <HAL_RCC_GetSysClockFreq+0x46>
 800324a:	e02d      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800324c:	4b1d      	ldr	r3, [pc, #116]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800324e:	623b      	str	r3, [r7, #32]
      break;
 8003250:	e02d      	b.n	80032ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	0c9b      	lsrs	r3, r3, #18
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800325e:	4413      	add	r3, r2
 8003260:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003264:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d013      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003270:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	0c5b      	lsrs	r3, r3, #17
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800327e:	4413      	add	r3, r2
 8003280:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003284:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	4a0e      	ldr	r2, [pc, #56]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800328a:	fb02 f203 	mul.w	r2, r2, r3
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
 8003296:	e004      	b.n	80032a2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	4a0b      	ldr	r2, [pc, #44]	; (80032c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800329c:	fb02 f303 	mul.w	r3, r2, r3
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	623b      	str	r3, [r7, #32]
      break;
 80032a6:	e002      	b.n	80032ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032aa:	623b      	str	r3, [r7, #32]
      break;
 80032ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ae:	6a3b      	ldr	r3, [r7, #32]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3728      	adds	r7, #40	; 0x28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc90      	pop	{r4, r7}
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	08005598 	.word	0x08005598
 80032c0:	40021000 	.word	0x40021000
 80032c4:	007a1200 	.word	0x007a1200
 80032c8:	003d0900 	.word	0x003d0900

080032cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d0:	4b02      	ldr	r3, [pc, #8]	; (80032dc <HAL_RCC_GetHCLKFreq+0x10>)
 80032d2:	681b      	ldr	r3, [r3, #0]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr
 80032dc:	20000058 	.word	0x20000058

080032e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032e4:	f7ff fff2 	bl	80032cc <HAL_RCC_GetHCLKFreq>
 80032e8:	4602      	mov	r2, r0
 80032ea:	4b05      	ldr	r3, [pc, #20]	; (8003300 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	0a1b      	lsrs	r3, r3, #8
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	4903      	ldr	r1, [pc, #12]	; (8003304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032f6:	5ccb      	ldrb	r3, [r1, r3]
 80032f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40021000 	.word	0x40021000
 8003304:	080055b8 	.word	0x080055b8

08003308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800330c:	f7ff ffde 	bl	80032cc <HAL_RCC_GetHCLKFreq>
 8003310:	4602      	mov	r2, r0
 8003312:	4b05      	ldr	r3, [pc, #20]	; (8003328 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	0adb      	lsrs	r3, r3, #11
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	4903      	ldr	r1, [pc, #12]	; (800332c <HAL_RCC_GetPCLK2Freq+0x24>)
 800331e:	5ccb      	ldrb	r3, [r1, r3]
 8003320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003324:	4618      	mov	r0, r3
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40021000 	.word	0x40021000
 800332c:	080055b8 	.word	0x080055b8

08003330 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003338:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <RCC_Delay+0x34>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a0a      	ldr	r2, [pc, #40]	; (8003368 <RCC_Delay+0x38>)
 800333e:	fba2 2303 	umull	r2, r3, r2, r3
 8003342:	0a5b      	lsrs	r3, r3, #9
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	fb02 f303 	mul.w	r3, r2, r3
 800334a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800334c:	bf00      	nop
  }
  while (Delay --);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1e5a      	subs	r2, r3, #1
 8003352:	60fa      	str	r2, [r7, #12]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1f9      	bne.n	800334c <RCC_Delay+0x1c>
}
 8003358:	bf00      	nop
 800335a:	bf00      	nop
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr
 8003364:	20000058 	.word	0x20000058
 8003368:	10624dd3 	.word	0x10624dd3

0800336c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e041      	b.n	8003402 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d106      	bne.n	8003398 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7fe fe5a 	bl	800204c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3304      	adds	r3, #4
 80033a8:	4619      	mov	r1, r3
 80033aa:	4610      	mov	r0, r2
 80033ac:	f000 fc28 	bl	8003c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b01      	cmp	r3, #1
 800341e:	d001      	beq.n	8003424 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e03a      	b.n	800349a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a18      	ldr	r2, [pc, #96]	; (80034a4 <HAL_TIM_Base_Start_IT+0x98>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00e      	beq.n	8003464 <HAL_TIM_Base_Start_IT+0x58>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800344e:	d009      	beq.n	8003464 <HAL_TIM_Base_Start_IT+0x58>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a14      	ldr	r2, [pc, #80]	; (80034a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d004      	beq.n	8003464 <HAL_TIM_Base_Start_IT+0x58>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a13      	ldr	r2, [pc, #76]	; (80034ac <HAL_TIM_Base_Start_IT+0xa0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d111      	bne.n	8003488 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b06      	cmp	r3, #6
 8003474:	d010      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003486:	e007      	b.n	8003498 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr
 80034a4:	40012c00 	.word	0x40012c00
 80034a8:	40000400 	.word	0x40000400
 80034ac:	40000800 	.word	0x40000800

080034b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e041      	b.n	8003546 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f839 	bl	800354e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3304      	adds	r3, #4
 80034ec:	4619      	mov	r1, r3
 80034ee:	4610      	mov	r0, r2
 80034f0:	f000 fb86 	bl	8003c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr

08003560 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d109      	bne.n	8003584 <HAL_TIM_PWM_Start+0x24>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b01      	cmp	r3, #1
 800357a:	bf14      	ite	ne
 800357c:	2301      	movne	r3, #1
 800357e:	2300      	moveq	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	e022      	b.n	80035ca <HAL_TIM_PWM_Start+0x6a>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	2b04      	cmp	r3, #4
 8003588:	d109      	bne.n	800359e <HAL_TIM_PWM_Start+0x3e>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b01      	cmp	r3, #1
 8003594:	bf14      	ite	ne
 8003596:	2301      	movne	r3, #1
 8003598:	2300      	moveq	r3, #0
 800359a:	b2db      	uxtb	r3, r3
 800359c:	e015      	b.n	80035ca <HAL_TIM_PWM_Start+0x6a>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d109      	bne.n	80035b8 <HAL_TIM_PWM_Start+0x58>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	bf14      	ite	ne
 80035b0:	2301      	movne	r3, #1
 80035b2:	2300      	moveq	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	e008      	b.n	80035ca <HAL_TIM_PWM_Start+0x6a>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	bf14      	ite	ne
 80035c4:	2301      	movne	r3, #1
 80035c6:	2300      	moveq	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e05e      	b.n	8003690 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d104      	bne.n	80035e2 <HAL_TIM_PWM_Start+0x82>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e0:	e013      	b.n	800360a <HAL_TIM_PWM_Start+0xaa>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d104      	bne.n	80035f2 <HAL_TIM_PWM_Start+0x92>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035f0:	e00b      	b.n	800360a <HAL_TIM_PWM_Start+0xaa>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d104      	bne.n	8003602 <HAL_TIM_PWM_Start+0xa2>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003600:	e003      	b.n	800360a <HAL_TIM_PWM_Start+0xaa>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2202      	movs	r2, #2
 8003606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2201      	movs	r2, #1
 8003610:	6839      	ldr	r1, [r7, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fd74 	bl	8004100 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a1e      	ldr	r2, [pc, #120]	; (8003698 <HAL_TIM_PWM_Start+0x138>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d107      	bne.n	8003632 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003630:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a18      	ldr	r2, [pc, #96]	; (8003698 <HAL_TIM_PWM_Start+0x138>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d00e      	beq.n	800365a <HAL_TIM_PWM_Start+0xfa>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003644:	d009      	beq.n	800365a <HAL_TIM_PWM_Start+0xfa>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a14      	ldr	r2, [pc, #80]	; (800369c <HAL_TIM_PWM_Start+0x13c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d004      	beq.n	800365a <HAL_TIM_PWM_Start+0xfa>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a12      	ldr	r2, [pc, #72]	; (80036a0 <HAL_TIM_PWM_Start+0x140>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d111      	bne.n	800367e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2b06      	cmp	r3, #6
 800366a:	d010      	beq.n	800368e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0201 	orr.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800367c:	e007      	b.n	800368e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 0201 	orr.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40012c00 	.word	0x40012c00
 800369c:	40000400 	.word	0x40000400
 80036a0:	40000800 	.word	0x40000800

080036a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d122      	bne.n	8003700 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d11b      	bne.n	8003700 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0202 	mvn.w	r2, #2
 80036d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fa6f 	bl	8003bca <HAL_TIM_IC_CaptureCallback>
 80036ec:	e005      	b.n	80036fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 fa62 	bl	8003bb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fa71 	bl	8003bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	2b04      	cmp	r3, #4
 800370c:	d122      	bne.n	8003754 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b04      	cmp	r3, #4
 800371a:	d11b      	bne.n	8003754 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f06f 0204 	mvn.w	r2, #4
 8003724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2202      	movs	r2, #2
 800372a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fa45 	bl	8003bca <HAL_TIM_IC_CaptureCallback>
 8003740:	e005      	b.n	800374e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fa38 	bl	8003bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 fa47 	bl	8003bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b08      	cmp	r3, #8
 8003760:	d122      	bne.n	80037a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b08      	cmp	r3, #8
 800376e:	d11b      	bne.n	80037a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f06f 0208 	mvn.w	r2, #8
 8003778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2204      	movs	r2, #4
 800377e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fa1b 	bl	8003bca <HAL_TIM_IC_CaptureCallback>
 8003794:	e005      	b.n	80037a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fa0e 	bl	8003bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 fa1d 	bl	8003bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f003 0310 	and.w	r3, r3, #16
 80037b2:	2b10      	cmp	r3, #16
 80037b4:	d122      	bne.n	80037fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f003 0310 	and.w	r3, r3, #16
 80037c0:	2b10      	cmp	r3, #16
 80037c2:	d11b      	bne.n	80037fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f06f 0210 	mvn.w	r2, #16
 80037cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2208      	movs	r2, #8
 80037d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f9f1 	bl	8003bca <HAL_TIM_IC_CaptureCallback>
 80037e8:	e005      	b.n	80037f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f9e4 	bl	8003bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f9f3 	bl	8003bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b01      	cmp	r3, #1
 8003808:	d10e      	bne.n	8003828 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b01      	cmp	r3, #1
 8003816:	d107      	bne.n	8003828 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f06f 0201 	mvn.w	r2, #1
 8003820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7fe fb68 	bl	8001ef8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003832:	2b80      	cmp	r3, #128	; 0x80
 8003834:	d10e      	bne.n	8003854 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003840:	2b80      	cmp	r3, #128	; 0x80
 8003842:	d107      	bne.n	8003854 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800384c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fce1 	bl	8004216 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385e:	2b40      	cmp	r3, #64	; 0x40
 8003860:	d10e      	bne.n	8003880 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386c:	2b40      	cmp	r3, #64	; 0x40
 800386e:	d107      	bne.n	8003880 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f9b7 	bl	8003bee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b20      	cmp	r3, #32
 800388c:	d10e      	bne.n	80038ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f003 0320 	and.w	r3, r3, #32
 8003898:	2b20      	cmp	r3, #32
 800389a:	d107      	bne.n	80038ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0220 	mvn.w	r2, #32
 80038a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 fcac 	bl	8004204 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038ac:	bf00      	nop
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e0ac      	b.n	8003a28 <HAL_TIM_PWM_ConfigChannel+0x174>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b0c      	cmp	r3, #12
 80038da:	f200 809f 	bhi.w	8003a1c <HAL_TIM_PWM_ConfigChannel+0x168>
 80038de:	a201      	add	r2, pc, #4	; (adr r2, 80038e4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80038e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e4:	08003919 	.word	0x08003919
 80038e8:	08003a1d 	.word	0x08003a1d
 80038ec:	08003a1d 	.word	0x08003a1d
 80038f0:	08003a1d 	.word	0x08003a1d
 80038f4:	08003959 	.word	0x08003959
 80038f8:	08003a1d 	.word	0x08003a1d
 80038fc:	08003a1d 	.word	0x08003a1d
 8003900:	08003a1d 	.word	0x08003a1d
 8003904:	0800399b 	.word	0x0800399b
 8003908:	08003a1d 	.word	0x08003a1d
 800390c:	08003a1d 	.word	0x08003a1d
 8003910:	08003a1d 	.word	0x08003a1d
 8003914:	080039db 	.word	0x080039db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	4618      	mov	r0, r3
 8003920:	f000 f9d0 	bl	8003cc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0208 	orr.w	r2, r2, #8
 8003932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0204 	bic.w	r2, r2, #4
 8003942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6999      	ldr	r1, [r3, #24]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	691a      	ldr	r2, [r3, #16]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	619a      	str	r2, [r3, #24]
      break;
 8003956:	e062      	b.n	8003a1e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	4618      	mov	r0, r3
 8003960:	f000 fa16 	bl	8003d90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6999      	ldr	r1, [r3, #24]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	021a      	lsls	r2, r3, #8
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	619a      	str	r2, [r3, #24]
      break;
 8003998:	e041      	b.n	8003a1e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68b9      	ldr	r1, [r7, #8]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fa5f 	bl	8003e64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69da      	ldr	r2, [r3, #28]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0208 	orr.w	r2, r2, #8
 80039b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69da      	ldr	r2, [r3, #28]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0204 	bic.w	r2, r2, #4
 80039c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69d9      	ldr	r1, [r3, #28]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	61da      	str	r2, [r3, #28]
      break;
 80039d8:	e021      	b.n	8003a1e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 faa9 	bl	8003f38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69da      	ldr	r2, [r3, #28]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69da      	ldr	r2, [r3, #28]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69d9      	ldr	r1, [r3, #28]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	021a      	lsls	r2, r3, #8
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	61da      	str	r2, [r3, #28]
      break;
 8003a1a:	e000      	b.n	8003a1e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003a1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_TIM_ConfigClockSource+0x18>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e0b3      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x180>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a6e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a80:	d03e      	beq.n	8003b00 <HAL_TIM_ConfigClockSource+0xd0>
 8003a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a86:	f200 8087 	bhi.w	8003b98 <HAL_TIM_ConfigClockSource+0x168>
 8003a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a8e:	f000 8085 	beq.w	8003b9c <HAL_TIM_ConfigClockSource+0x16c>
 8003a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a96:	d87f      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x168>
 8003a98:	2b70      	cmp	r3, #112	; 0x70
 8003a9a:	d01a      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0xa2>
 8003a9c:	2b70      	cmp	r3, #112	; 0x70
 8003a9e:	d87b      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x168>
 8003aa0:	2b60      	cmp	r3, #96	; 0x60
 8003aa2:	d050      	beq.n	8003b46 <HAL_TIM_ConfigClockSource+0x116>
 8003aa4:	2b60      	cmp	r3, #96	; 0x60
 8003aa6:	d877      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x168>
 8003aa8:	2b50      	cmp	r3, #80	; 0x50
 8003aaa:	d03c      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0xf6>
 8003aac:	2b50      	cmp	r3, #80	; 0x50
 8003aae:	d873      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x168>
 8003ab0:	2b40      	cmp	r3, #64	; 0x40
 8003ab2:	d058      	beq.n	8003b66 <HAL_TIM_ConfigClockSource+0x136>
 8003ab4:	2b40      	cmp	r3, #64	; 0x40
 8003ab6:	d86f      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x168>
 8003ab8:	2b30      	cmp	r3, #48	; 0x30
 8003aba:	d064      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0x156>
 8003abc:	2b30      	cmp	r3, #48	; 0x30
 8003abe:	d86b      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x168>
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	d060      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0x156>
 8003ac4:	2b20      	cmp	r3, #32
 8003ac6:	d867      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x168>
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d05c      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0x156>
 8003acc:	2b10      	cmp	r3, #16
 8003ace:	d05a      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ad0:	e062      	b.n	8003b98 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	6899      	ldr	r1, [r3, #8]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f000 faee 	bl	80040c2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003af4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	609a      	str	r2, [r3, #8]
      break;
 8003afe:	e04e      	b.n	8003b9e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	6899      	ldr	r1, [r3, #8]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f000 fad7 	bl	80040c2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b22:	609a      	str	r2, [r3, #8]
      break;
 8003b24:	e03b      	b.n	8003b9e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6818      	ldr	r0, [r3, #0]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	6859      	ldr	r1, [r3, #4]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	461a      	mov	r2, r3
 8003b34:	f000 fa4e 	bl	8003fd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2150      	movs	r1, #80	; 0x50
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 faa5 	bl	800408e <TIM_ITRx_SetConfig>
      break;
 8003b44:	e02b      	b.n	8003b9e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	6859      	ldr	r1, [r3, #4]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	461a      	mov	r2, r3
 8003b54:	f000 fa6c 	bl	8004030 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2160      	movs	r1, #96	; 0x60
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fa95 	bl	800408e <TIM_ITRx_SetConfig>
      break;
 8003b64:	e01b      	b.n	8003b9e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6818      	ldr	r0, [r3, #0]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	6859      	ldr	r1, [r3, #4]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	461a      	mov	r2, r3
 8003b74:	f000 fa2e 	bl	8003fd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2140      	movs	r1, #64	; 0x40
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fa85 	bl	800408e <TIM_ITRx_SetConfig>
      break;
 8003b84:	e00b      	b.n	8003b9e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4610      	mov	r0, r2
 8003b92:	f000 fa7c 	bl	800408e <TIM_ITRx_SetConfig>
        break;
 8003b96:	e002      	b.n	8003b9e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003b98:	bf00      	nop
 8003b9a:	e000      	b.n	8003b9e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003b9c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr

08003bca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr

08003bdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr

08003bee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr

08003c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a29      	ldr	r2, [pc, #164]	; (8003cb8 <TIM_Base_SetConfig+0xb8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d00b      	beq.n	8003c30 <TIM_Base_SetConfig+0x30>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c1e:	d007      	beq.n	8003c30 <TIM_Base_SetConfig+0x30>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a26      	ldr	r2, [pc, #152]	; (8003cbc <TIM_Base_SetConfig+0xbc>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d003      	beq.n	8003c30 <TIM_Base_SetConfig+0x30>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a25      	ldr	r2, [pc, #148]	; (8003cc0 <TIM_Base_SetConfig+0xc0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d108      	bne.n	8003c42 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a1c      	ldr	r2, [pc, #112]	; (8003cb8 <TIM_Base_SetConfig+0xb8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00b      	beq.n	8003c62 <TIM_Base_SetConfig+0x62>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c50:	d007      	beq.n	8003c62 <TIM_Base_SetConfig+0x62>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a19      	ldr	r2, [pc, #100]	; (8003cbc <TIM_Base_SetConfig+0xbc>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d003      	beq.n	8003c62 <TIM_Base_SetConfig+0x62>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a18      	ldr	r2, [pc, #96]	; (8003cc0 <TIM_Base_SetConfig+0xc0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d108      	bne.n	8003c74 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a07      	ldr	r2, [pc, #28]	; (8003cb8 <TIM_Base_SetConfig+0xb8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d103      	bne.n	8003ca8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	615a      	str	r2, [r3, #20]
}
 8003cae:	bf00      	nop
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr
 8003cb8:	40012c00 	.word	0x40012c00
 8003cbc:	40000400 	.word	0x40000400
 8003cc0:	40000800 	.word	0x40000800

08003cc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	f023 0201 	bic.w	r2, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0303 	bic.w	r3, r3, #3
 8003cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f023 0302 	bic.w	r3, r3, #2
 8003d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a1c      	ldr	r2, [pc, #112]	; (8003d8c <TIM_OC1_SetConfig+0xc8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d10c      	bne.n	8003d3a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f023 0308 	bic.w	r3, r3, #8
 8003d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f023 0304 	bic.w	r3, r3, #4
 8003d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a13      	ldr	r2, [pc, #76]	; (8003d8c <TIM_OC1_SetConfig+0xc8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d111      	bne.n	8003d66 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	621a      	str	r2, [r3, #32]
}
 8003d80:	bf00      	nop
 8003d82:	371c      	adds	r7, #28
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40012c00 	.word	0x40012c00

08003d90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	f023 0210 	bic.w	r2, r3, #16
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	021b      	lsls	r3, r3, #8
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f023 0320 	bic.w	r3, r3, #32
 8003dda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a1d      	ldr	r2, [pc, #116]	; (8003e60 <TIM_OC2_SetConfig+0xd0>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d10d      	bne.n	8003e0c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a14      	ldr	r2, [pc, #80]	; (8003e60 <TIM_OC2_SetConfig+0xd0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d113      	bne.n	8003e3c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	621a      	str	r2, [r3, #32]
}
 8003e56:	bf00      	nop
 8003e58:	371c      	adds	r7, #28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr
 8003e60:	40012c00 	.word	0x40012c00

08003e64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0303 	bic.w	r3, r3, #3
 8003e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a1d      	ldr	r2, [pc, #116]	; (8003f34 <TIM_OC3_SetConfig+0xd0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d10d      	bne.n	8003ede <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ec8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	021b      	lsls	r3, r3, #8
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003edc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a14      	ldr	r2, [pc, #80]	; (8003f34 <TIM_OC3_SetConfig+0xd0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d113      	bne.n	8003f0e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003eec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	621a      	str	r2, [r3, #32]
}
 8003f28:	bf00      	nop
 8003f2a:	371c      	adds	r7, #28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bc80      	pop	{r7}
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40012c00 	.word	0x40012c00

08003f38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	021b      	lsls	r3, r3, #8
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	031b      	lsls	r3, r3, #12
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a0f      	ldr	r2, [pc, #60]	; (8003fd0 <TIM_OC4_SetConfig+0x98>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d109      	bne.n	8003fac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	019b      	lsls	r3, r3, #6
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	621a      	str	r2, [r3, #32]
}
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr
 8003fd0:	40012c00 	.word	0x40012c00

08003fd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	f023 0201 	bic.w	r2, r3, #1
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4313      	orrs	r3, r2
 8004008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f023 030a 	bic.w	r3, r3, #10
 8004010:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	621a      	str	r2, [r3, #32]
}
 8004026:	bf00      	nop
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr

08004030 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	f023 0210 	bic.w	r2, r3, #16
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800405a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	031b      	lsls	r3, r3, #12
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800406c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	621a      	str	r2, [r3, #32]
}
 8004084:	bf00      	nop
 8004086:	371c      	adds	r7, #28
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr

0800408e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800408e:	b480      	push	{r7}
 8004090:	b085      	sub	sp, #20
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	f043 0307 	orr.w	r3, r3, #7
 80040b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	609a      	str	r2, [r3, #8]
}
 80040b8:	bf00      	nop
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	bc80      	pop	{r7}
 80040c0:	4770      	bx	lr

080040c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b087      	sub	sp, #28
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	60f8      	str	r0, [r7, #12]
 80040ca:	60b9      	str	r1, [r7, #8]
 80040cc:	607a      	str	r2, [r7, #4]
 80040ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	021a      	lsls	r2, r3, #8
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	431a      	orrs	r2, r3
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	609a      	str	r2, [r3, #8]
}
 80040f6:	bf00      	nop
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr

08004100 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f003 031f 	and.w	r3, r3, #31
 8004112:	2201      	movs	r2, #1
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a1a      	ldr	r2, [r3, #32]
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	43db      	mvns	r3, r3
 8004122:	401a      	ands	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a1a      	ldr	r2, [r3, #32]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f003 031f 	and.w	r3, r3, #31
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	fa01 f303 	lsl.w	r3, r1, r3
 8004138:	431a      	orrs	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	621a      	str	r2, [r3, #32]
}
 800413e:	bf00      	nop
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr

08004148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004158:	2b01      	cmp	r3, #1
 800415a:	d101      	bne.n	8004160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800415c:	2302      	movs	r3, #2
 800415e:	e046      	b.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004186:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a16      	ldr	r2, [pc, #88]	; (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d00e      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ac:	d009      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a12      	ldr	r2, [pc, #72]	; (80041fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d004      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a10      	ldr	r2, [pc, #64]	; (8004200 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d10c      	bne.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr
 80041f8:	40012c00 	.word	0x40012c00
 80041fc:	40000400 	.word	0x40000400
 8004200:	40000800 	.word	0x40000800

08004204 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr

08004216 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr

08004228 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e03f      	b.n	80042ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d106      	bne.n	8004254 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7fd ff6e 	bl	8002130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2224      	movs	r2, #36	; 0x24
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800426a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fc85 	bl	8004b7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004280:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695a      	ldr	r2, [r3, #20]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004290:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b08a      	sub	sp, #40	; 0x28
 80042c6:	af02      	add	r7, sp, #8
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	603b      	str	r3, [r7, #0]
 80042ce:	4613      	mov	r3, r2
 80042d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b20      	cmp	r3, #32
 80042e0:	d17c      	bne.n	80043dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <HAL_UART_Transmit+0x2c>
 80042e8:	88fb      	ldrh	r3, [r7, #6]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e075      	b.n	80043de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d101      	bne.n	8004300 <HAL_UART_Transmit+0x3e>
 80042fc:	2302      	movs	r3, #2
 80042fe:	e06e      	b.n	80043de <HAL_UART_Transmit+0x11c>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2221      	movs	r2, #33	; 0x21
 8004312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004316:	f7fe f859 	bl	80023cc <HAL_GetTick>
 800431a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	88fa      	ldrh	r2, [r7, #6]
 8004320:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	88fa      	ldrh	r2, [r7, #6]
 8004326:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004330:	d108      	bne.n	8004344 <HAL_UART_Transmit+0x82>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d104      	bne.n	8004344 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	61bb      	str	r3, [r7, #24]
 8004342:	e003      	b.n	800434c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004348:	2300      	movs	r3, #0
 800434a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004354:	e02a      	b.n	80043ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2200      	movs	r2, #0
 800435e:	2180      	movs	r1, #128	; 0x80
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 fa38 	bl	80047d6 <UART_WaitOnFlagUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e036      	b.n	80043de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10b      	bne.n	800438e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004384:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	3302      	adds	r3, #2
 800438a:	61bb      	str	r3, [r7, #24]
 800438c:	e007      	b.n	800439e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	781a      	ldrb	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	3301      	adds	r3, #1
 800439c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1cf      	bne.n	8004356 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2200      	movs	r2, #0
 80043be:	2140      	movs	r1, #64	; 0x40
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 fa08 	bl	80047d6 <UART_WaitOnFlagUntilTimeout>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e006      	b.n	80043de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	e000      	b.n	80043de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80043dc:	2302      	movs	r3, #2
  }
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3720      	adds	r7, #32
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b084      	sub	sp, #16
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	4613      	mov	r3, r2
 80043f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b20      	cmp	r3, #32
 80043fe:	d11d      	bne.n	800443c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <HAL_UART_Receive_IT+0x26>
 8004406:	88fb      	ldrh	r3, [r7, #6]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e016      	b.n	800443e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <HAL_UART_Receive_IT+0x38>
 800441a:	2302      	movs	r3, #2
 800441c:	e00f      	b.n	800443e <HAL_UART_Receive_IT+0x58>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800442c:	88fb      	ldrh	r3, [r7, #6]
 800442e:	461a      	mov	r2, r3
 8004430:	68b9      	ldr	r1, [r7, #8]
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 fa19 	bl	800486a <UART_Start_Receive_IT>
 8004438:	4603      	mov	r3, r0
 800443a:	e000      	b.n	800443e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800443c:	2302      	movs	r3, #2
  }
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
	...

08004448 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08a      	sub	sp, #40	; 0x28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004468:	2300      	movs	r3, #0
 800446a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10d      	bne.n	800449a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b00      	cmp	r3, #0
 8004486:	d008      	beq.n	800449a <HAL_UART_IRQHandler+0x52>
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fac9 	bl	8004a2a <UART_Receive_IT>
      return;
 8004498:	e17b      	b.n	8004792 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 80b1 	beq.w	8004604 <HAL_UART_IRQHandler+0x1bc>
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d105      	bne.n	80044b8 <HAL_UART_IRQHandler+0x70>
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 80a6 	beq.w	8004604 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <HAL_UART_IRQHandler+0x90>
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	f043 0201 	orr.w	r2, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	f003 0304 	and.w	r3, r3, #4
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <HAL_UART_IRQHandler+0xb0>
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	f043 0202 	orr.w	r2, r3, #2
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <HAL_UART_IRQHandler+0xd0>
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d005      	beq.n	8004518 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	f043 0204 	orr.w	r2, r3, #4
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00f      	beq.n	8004542 <HAL_UART_IRQHandler+0xfa>
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b00      	cmp	r3, #0
 800452a:	d104      	bne.n	8004536 <HAL_UART_IRQHandler+0xee>
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	f043 0208 	orr.w	r2, r3, #8
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 811e 	beq.w	8004788 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	f003 0320 	and.w	r3, r3, #32
 8004552:	2b00      	cmp	r3, #0
 8004554:	d007      	beq.n	8004566 <HAL_UART_IRQHandler+0x11e>
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	f003 0320 	and.w	r3, r3, #32
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 fa62 	bl	8004a2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004570:	2b00      	cmp	r3, #0
 8004572:	bf14      	ite	ne
 8004574:	2301      	movne	r3, #1
 8004576:	2300      	moveq	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004580:	f003 0308 	and.w	r3, r3, #8
 8004584:	2b00      	cmp	r3, #0
 8004586:	d102      	bne.n	800458e <HAL_UART_IRQHandler+0x146>
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d031      	beq.n	80045f2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f9a4 	bl	80048dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d023      	beq.n	80045ea <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	695a      	ldr	r2, [r3, #20]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045b0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d013      	beq.n	80045e2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	4a76      	ldr	r2, [pc, #472]	; (8004798 <HAL_UART_IRQHandler+0x350>)
 80045c0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fe f852 	bl	8002670 <HAL_DMA_Abort_IT>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d016      	beq.n	8004600 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045dc:	4610      	mov	r0, r2
 80045de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e0:	e00e      	b.n	8004600 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f8e3 	bl	80047ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e8:	e00a      	b.n	8004600 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f8df 	bl	80047ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f0:	e006      	b.n	8004600 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f8db 	bl	80047ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80045fe:	e0c3      	b.n	8004788 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004600:	bf00      	nop
    return;
 8004602:	e0c1      	b.n	8004788 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004608:	2b01      	cmp	r3, #1
 800460a:	f040 80a1 	bne.w	8004750 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	f003 0310 	and.w	r3, r3, #16
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 809b 	beq.w	8004750 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 8095 	beq.w	8004750 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004646:	2b00      	cmp	r3, #0
 8004648:	d04e      	beq.n	80046e8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004654:	8a3b      	ldrh	r3, [r7, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 8098 	beq.w	800478c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004660:	8a3a      	ldrh	r2, [r7, #16]
 8004662:	429a      	cmp	r2, r3
 8004664:	f080 8092 	bcs.w	800478c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	8a3a      	ldrh	r2, [r7, #16]
 800466c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	2b20      	cmp	r3, #32
 8004676:	d02b      	beq.n	80046d0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004686:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695a      	ldr	r2, [r3, #20]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0201 	bic.w	r2, r2, #1
 8004696:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695a      	ldr	r2, [r3, #20]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046a6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0210 	bic.w	r2, r2, #16
 80046c4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fd ff95 	bl	80025fa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046d8:	b29b      	uxth	r3, r3
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	b29b      	uxth	r3, r3
 80046de:	4619      	mov	r1, r3
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f86d 	bl	80047c0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80046e6:	e051      	b.n	800478c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d047      	beq.n	8004790 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004700:	8a7b      	ldrh	r3, [r7, #18]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d044      	beq.n	8004790 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004714:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695a      	ldr	r2, [r3, #20]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0201 	bic.w	r2, r2, #1
 8004724:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0210 	bic.w	r2, r2, #16
 8004742:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004744:	8a7b      	ldrh	r3, [r7, #18]
 8004746:	4619      	mov	r1, r3
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f839 	bl	80047c0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800474e:	e01f      	b.n	8004790 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004756:	2b00      	cmp	r3, #0
 8004758:	d008      	beq.n	800476c <HAL_UART_IRQHandler+0x324>
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f8f9 	bl	800495c <UART_Transmit_IT>
    return;
 800476a:	e012      	b.n	8004792 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00d      	beq.n	8004792 <HAL_UART_IRQHandler+0x34a>
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f93a 	bl	80049fa <UART_EndTransmit_IT>
    return;
 8004786:	e004      	b.n	8004792 <HAL_UART_IRQHandler+0x34a>
    return;
 8004788:	bf00      	nop
 800478a:	e002      	b.n	8004792 <HAL_UART_IRQHandler+0x34a>
      return;
 800478c:	bf00      	nop
 800478e:	e000      	b.n	8004792 <HAL_UART_IRQHandler+0x34a>
      return;
 8004790:	bf00      	nop
  }
}
 8004792:	3728      	adds	r7, #40	; 0x28
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	08004935 	.word	0x08004935

0800479c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	4770      	bx	lr

080047ae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bc80      	pop	{r7}
 80047be:	4770      	bx	lr

080047c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bc80      	pop	{r7}
 80047d4:	4770      	bx	lr

080047d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	603b      	str	r3, [r7, #0]
 80047e2:	4613      	mov	r3, r2
 80047e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047e6:	e02c      	b.n	8004842 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ee:	d028      	beq.n	8004842 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d007      	beq.n	8004806 <UART_WaitOnFlagUntilTimeout+0x30>
 80047f6:	f7fd fde9 	bl	80023cc <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	429a      	cmp	r2, r3
 8004804:	d21d      	bcs.n	8004842 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68da      	ldr	r2, [r3, #12]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004814:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	695a      	ldr	r2, [r3, #20]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0201 	bic.w	r2, r2, #1
 8004824:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2220      	movs	r2, #32
 800482a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e00f      	b.n	8004862 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4013      	ands	r3, r2
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	429a      	cmp	r2, r3
 8004850:	bf0c      	ite	eq
 8004852:	2301      	moveq	r3, #1
 8004854:	2300      	movne	r3, #0
 8004856:	b2db      	uxtb	r3, r3
 8004858:	461a      	mov	r2, r3
 800485a:	79fb      	ldrb	r3, [r7, #7]
 800485c:	429a      	cmp	r2, r3
 800485e:	d0c3      	beq.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800486a:	b480      	push	{r7}
 800486c:	b085      	sub	sp, #20
 800486e:	af00      	add	r7, sp, #0
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	60b9      	str	r1, [r7, #8]
 8004874:	4613      	mov	r3, r2
 8004876:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	88fa      	ldrh	r2, [r7, #6]
 8004882:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	88fa      	ldrh	r2, [r7, #6]
 8004888:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2222      	movs	r2, #34	; 0x22
 8004894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048ae:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695a      	ldr	r2, [r3, #20]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0201 	orr.w	r2, r2, #1
 80048be:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0220 	orr.w	r2, r2, #32
 80048ce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr

080048dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048f2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695a      	ldr	r2, [r3, #20]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0201 	bic.w	r2, r2, #1
 8004902:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004908:	2b01      	cmp	r3, #1
 800490a:	d107      	bne.n	800491c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0210 	bic.w	r2, r2, #16
 800491a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	631a      	str	r2, [r3, #48]	; 0x30
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	bc80      	pop	{r7}
 8004932:	4770      	bx	lr

08004934 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f7ff ff2d 	bl	80047ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004954:	bf00      	nop
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b21      	cmp	r3, #33	; 0x21
 800496e:	d13e      	bne.n	80049ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004978:	d114      	bne.n	80049a4 <UART_Transmit_IT+0x48>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d110      	bne.n	80049a4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	461a      	mov	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004996:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	1c9a      	adds	r2, r3, #2
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	621a      	str	r2, [r3, #32]
 80049a2:	e008      	b.n	80049b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	1c59      	adds	r1, r3, #1
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6211      	str	r1, [r2, #32]
 80049ae:	781a      	ldrb	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29b      	uxth	r3, r3
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	4619      	mov	r1, r3
 80049c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10f      	bne.n	80049ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	e000      	b.n	80049f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049ee:	2302      	movs	r3, #2
  }
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc80      	pop	{r7}
 80049f8:	4770      	bx	lr

080049fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68da      	ldr	r2, [r3, #12]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7ff febe 	bl	800479c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b086      	sub	sp, #24
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b22      	cmp	r3, #34	; 0x22
 8004a3c:	f040 8099 	bne.w	8004b72 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a48:	d117      	bne.n	8004a7a <UART_Receive_IT+0x50>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d113      	bne.n	8004a7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a52:	2300      	movs	r3, #0
 8004a54:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a72:	1c9a      	adds	r2, r3, #2
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	629a      	str	r2, [r3, #40]	; 0x28
 8004a78:	e026      	b.n	8004ac8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004a80:	2300      	movs	r3, #0
 8004a82:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a8c:	d007      	beq.n	8004a9e <UART_Receive_IT+0x74>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10a      	bne.n	8004aac <UART_Receive_IT+0x82>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	701a      	strb	r2, [r3, #0]
 8004aaa:	e008      	b.n	8004abe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d148      	bne.n	8004b6e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0220 	bic.w	r2, r2, #32
 8004aea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004afa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	695a      	ldr	r2, [r3, #20]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0201 	bic.w	r2, r2, #1
 8004b0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d123      	bne.n	8004b64 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 0210 	bic.w	r2, r2, #16
 8004b30:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	2b10      	cmp	r3, #16
 8004b3e:	d10a      	bne.n	8004b56 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b40:	2300      	movs	r3, #0
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff fe2f 	bl	80047c0 <HAL_UARTEx_RxEventCallback>
 8004b62:	e002      	b.n	8004b6a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f7fc ff5b 	bl	8001a20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	e002      	b.n	8004b74 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	e000      	b.n	8004b74 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004b72:	2302      	movs	r3, #2
  }
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3718      	adds	r7, #24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004bb6:	f023 030c 	bic.w	r3, r3, #12
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6812      	ldr	r2, [r2, #0]
 8004bbe:	68b9      	ldr	r1, [r7, #8]
 8004bc0:	430b      	orrs	r3, r1
 8004bc2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699a      	ldr	r2, [r3, #24]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a2c      	ldr	r2, [pc, #176]	; (8004c90 <UART_SetConfig+0x114>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d103      	bne.n	8004bec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004be4:	f7fe fb90 	bl	8003308 <HAL_RCC_GetPCLK2Freq>
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	e002      	b.n	8004bf2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004bec:	f7fe fb78 	bl	80032e0 <HAL_RCC_GetPCLK1Freq>
 8004bf0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009a      	lsls	r2, r3, #2
 8004bfc:	441a      	add	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c08:	4a22      	ldr	r2, [pc, #136]	; (8004c94 <UART_SetConfig+0x118>)
 8004c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	0119      	lsls	r1, r3, #4
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4613      	mov	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	009a      	lsls	r2, r3, #2
 8004c1c:	441a      	add	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c28:	4b1a      	ldr	r3, [pc, #104]	; (8004c94 <UART_SetConfig+0x118>)
 8004c2a:	fba3 0302 	umull	r0, r3, r3, r2
 8004c2e:	095b      	lsrs	r3, r3, #5
 8004c30:	2064      	movs	r0, #100	; 0x64
 8004c32:	fb00 f303 	mul.w	r3, r0, r3
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	3332      	adds	r3, #50	; 0x32
 8004c3c:	4a15      	ldr	r2, [pc, #84]	; (8004c94 <UART_SetConfig+0x118>)
 8004c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c42:	095b      	lsrs	r3, r3, #5
 8004c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c48:	4419      	add	r1, r3
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	009a      	lsls	r2, r3, #2
 8004c54:	441a      	add	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c60:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <UART_SetConfig+0x118>)
 8004c62:	fba3 0302 	umull	r0, r3, r3, r2
 8004c66:	095b      	lsrs	r3, r3, #5
 8004c68:	2064      	movs	r0, #100	; 0x64
 8004c6a:	fb00 f303 	mul.w	r3, r0, r3
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	3332      	adds	r3, #50	; 0x32
 8004c74:	4a07      	ldr	r2, [pc, #28]	; (8004c94 <UART_SetConfig+0x118>)
 8004c76:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7a:	095b      	lsrs	r3, r3, #5
 8004c7c:	f003 020f 	and.w	r2, r3, #15
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	440a      	add	r2, r1
 8004c86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c88:	bf00      	nop
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40013800 	.word	0x40013800
 8004c94:	51eb851f 	.word	0x51eb851f

08004c98 <__errno>:
 8004c98:	4b01      	ldr	r3, [pc, #4]	; (8004ca0 <__errno+0x8>)
 8004c9a:	6818      	ldr	r0, [r3, #0]
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	20000064 	.word	0x20000064

08004ca4 <__libc_init_array>:
 8004ca4:	b570      	push	{r4, r5, r6, lr}
 8004ca6:	2600      	movs	r6, #0
 8004ca8:	4d0c      	ldr	r5, [pc, #48]	; (8004cdc <__libc_init_array+0x38>)
 8004caa:	4c0d      	ldr	r4, [pc, #52]	; (8004ce0 <__libc_init_array+0x3c>)
 8004cac:	1b64      	subs	r4, r4, r5
 8004cae:	10a4      	asrs	r4, r4, #2
 8004cb0:	42a6      	cmp	r6, r4
 8004cb2:	d109      	bne.n	8004cc8 <__libc_init_array+0x24>
 8004cb4:	f000 fc5c 	bl	8005570 <_init>
 8004cb8:	2600      	movs	r6, #0
 8004cba:	4d0a      	ldr	r5, [pc, #40]	; (8004ce4 <__libc_init_array+0x40>)
 8004cbc:	4c0a      	ldr	r4, [pc, #40]	; (8004ce8 <__libc_init_array+0x44>)
 8004cbe:	1b64      	subs	r4, r4, r5
 8004cc0:	10a4      	asrs	r4, r4, #2
 8004cc2:	42a6      	cmp	r6, r4
 8004cc4:	d105      	bne.n	8004cd2 <__libc_init_array+0x2e>
 8004cc6:	bd70      	pop	{r4, r5, r6, pc}
 8004cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ccc:	4798      	blx	r3
 8004cce:	3601      	adds	r6, #1
 8004cd0:	e7ee      	b.n	8004cb0 <__libc_init_array+0xc>
 8004cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cd6:	4798      	blx	r3
 8004cd8:	3601      	adds	r6, #1
 8004cda:	e7f2      	b.n	8004cc2 <__libc_init_array+0x1e>
 8004cdc:	080055f4 	.word	0x080055f4
 8004ce0:	080055f4 	.word	0x080055f4
 8004ce4:	080055f4 	.word	0x080055f4
 8004ce8:	080055f8 	.word	0x080055f8

08004cec <memset>:
 8004cec:	4603      	mov	r3, r0
 8004cee:	4402      	add	r2, r0
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d100      	bne.n	8004cf6 <memset+0xa>
 8004cf4:	4770      	bx	lr
 8004cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cfa:	e7f9      	b.n	8004cf0 <memset+0x4>

08004cfc <siprintf>:
 8004cfc:	b40e      	push	{r1, r2, r3}
 8004cfe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d02:	b500      	push	{lr}
 8004d04:	b09c      	sub	sp, #112	; 0x70
 8004d06:	ab1d      	add	r3, sp, #116	; 0x74
 8004d08:	9002      	str	r0, [sp, #8]
 8004d0a:	9006      	str	r0, [sp, #24]
 8004d0c:	9107      	str	r1, [sp, #28]
 8004d0e:	9104      	str	r1, [sp, #16]
 8004d10:	4808      	ldr	r0, [pc, #32]	; (8004d34 <siprintf+0x38>)
 8004d12:	4909      	ldr	r1, [pc, #36]	; (8004d38 <siprintf+0x3c>)
 8004d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d18:	9105      	str	r1, [sp, #20]
 8004d1a:	6800      	ldr	r0, [r0, #0]
 8004d1c:	a902      	add	r1, sp, #8
 8004d1e:	9301      	str	r3, [sp, #4]
 8004d20:	f000 f868 	bl	8004df4 <_svfiprintf_r>
 8004d24:	2200      	movs	r2, #0
 8004d26:	9b02      	ldr	r3, [sp, #8]
 8004d28:	701a      	strb	r2, [r3, #0]
 8004d2a:	b01c      	add	sp, #112	; 0x70
 8004d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d30:	b003      	add	sp, #12
 8004d32:	4770      	bx	lr
 8004d34:	20000064 	.word	0x20000064
 8004d38:	ffff0208 	.word	0xffff0208

08004d3c <__ssputs_r>:
 8004d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d40:	688e      	ldr	r6, [r1, #8]
 8004d42:	4682      	mov	sl, r0
 8004d44:	429e      	cmp	r6, r3
 8004d46:	460c      	mov	r4, r1
 8004d48:	4690      	mov	r8, r2
 8004d4a:	461f      	mov	r7, r3
 8004d4c:	d838      	bhi.n	8004dc0 <__ssputs_r+0x84>
 8004d4e:	898a      	ldrh	r2, [r1, #12]
 8004d50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d54:	d032      	beq.n	8004dbc <__ssputs_r+0x80>
 8004d56:	6825      	ldr	r5, [r4, #0]
 8004d58:	6909      	ldr	r1, [r1, #16]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	eba5 0901 	sub.w	r9, r5, r1
 8004d60:	6965      	ldr	r5, [r4, #20]
 8004d62:	444b      	add	r3, r9
 8004d64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d6c:	106d      	asrs	r5, r5, #1
 8004d6e:	429d      	cmp	r5, r3
 8004d70:	bf38      	it	cc
 8004d72:	461d      	movcc	r5, r3
 8004d74:	0553      	lsls	r3, r2, #21
 8004d76:	d531      	bpl.n	8004ddc <__ssputs_r+0xa0>
 8004d78:	4629      	mov	r1, r5
 8004d7a:	f000 fb53 	bl	8005424 <_malloc_r>
 8004d7e:	4606      	mov	r6, r0
 8004d80:	b950      	cbnz	r0, 8004d98 <__ssputs_r+0x5c>
 8004d82:	230c      	movs	r3, #12
 8004d84:	f04f 30ff 	mov.w	r0, #4294967295
 8004d88:	f8ca 3000 	str.w	r3, [sl]
 8004d8c:	89a3      	ldrh	r3, [r4, #12]
 8004d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d92:	81a3      	strh	r3, [r4, #12]
 8004d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d98:	464a      	mov	r2, r9
 8004d9a:	6921      	ldr	r1, [r4, #16]
 8004d9c:	f000 face 	bl	800533c <memcpy>
 8004da0:	89a3      	ldrh	r3, [r4, #12]
 8004da2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004daa:	81a3      	strh	r3, [r4, #12]
 8004dac:	6126      	str	r6, [r4, #16]
 8004dae:	444e      	add	r6, r9
 8004db0:	6026      	str	r6, [r4, #0]
 8004db2:	463e      	mov	r6, r7
 8004db4:	6165      	str	r5, [r4, #20]
 8004db6:	eba5 0509 	sub.w	r5, r5, r9
 8004dba:	60a5      	str	r5, [r4, #8]
 8004dbc:	42be      	cmp	r6, r7
 8004dbe:	d900      	bls.n	8004dc2 <__ssputs_r+0x86>
 8004dc0:	463e      	mov	r6, r7
 8004dc2:	4632      	mov	r2, r6
 8004dc4:	4641      	mov	r1, r8
 8004dc6:	6820      	ldr	r0, [r4, #0]
 8004dc8:	f000 fac6 	bl	8005358 <memmove>
 8004dcc:	68a3      	ldr	r3, [r4, #8]
 8004dce:	6822      	ldr	r2, [r4, #0]
 8004dd0:	1b9b      	subs	r3, r3, r6
 8004dd2:	4432      	add	r2, r6
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	60a3      	str	r3, [r4, #8]
 8004dd8:	6022      	str	r2, [r4, #0]
 8004dda:	e7db      	b.n	8004d94 <__ssputs_r+0x58>
 8004ddc:	462a      	mov	r2, r5
 8004dde:	f000 fb7b 	bl	80054d8 <_realloc_r>
 8004de2:	4606      	mov	r6, r0
 8004de4:	2800      	cmp	r0, #0
 8004de6:	d1e1      	bne.n	8004dac <__ssputs_r+0x70>
 8004de8:	4650      	mov	r0, sl
 8004dea:	6921      	ldr	r1, [r4, #16]
 8004dec:	f000 face 	bl	800538c <_free_r>
 8004df0:	e7c7      	b.n	8004d82 <__ssputs_r+0x46>
	...

08004df4 <_svfiprintf_r>:
 8004df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df8:	4698      	mov	r8, r3
 8004dfa:	898b      	ldrh	r3, [r1, #12]
 8004dfc:	4607      	mov	r7, r0
 8004dfe:	061b      	lsls	r3, r3, #24
 8004e00:	460d      	mov	r5, r1
 8004e02:	4614      	mov	r4, r2
 8004e04:	b09d      	sub	sp, #116	; 0x74
 8004e06:	d50e      	bpl.n	8004e26 <_svfiprintf_r+0x32>
 8004e08:	690b      	ldr	r3, [r1, #16]
 8004e0a:	b963      	cbnz	r3, 8004e26 <_svfiprintf_r+0x32>
 8004e0c:	2140      	movs	r1, #64	; 0x40
 8004e0e:	f000 fb09 	bl	8005424 <_malloc_r>
 8004e12:	6028      	str	r0, [r5, #0]
 8004e14:	6128      	str	r0, [r5, #16]
 8004e16:	b920      	cbnz	r0, 8004e22 <_svfiprintf_r+0x2e>
 8004e18:	230c      	movs	r3, #12
 8004e1a:	603b      	str	r3, [r7, #0]
 8004e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e20:	e0d1      	b.n	8004fc6 <_svfiprintf_r+0x1d2>
 8004e22:	2340      	movs	r3, #64	; 0x40
 8004e24:	616b      	str	r3, [r5, #20]
 8004e26:	2300      	movs	r3, #0
 8004e28:	9309      	str	r3, [sp, #36]	; 0x24
 8004e2a:	2320      	movs	r3, #32
 8004e2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e30:	2330      	movs	r3, #48	; 0x30
 8004e32:	f04f 0901 	mov.w	r9, #1
 8004e36:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004fe0 <_svfiprintf_r+0x1ec>
 8004e3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e42:	4623      	mov	r3, r4
 8004e44:	469a      	mov	sl, r3
 8004e46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e4a:	b10a      	cbz	r2, 8004e50 <_svfiprintf_r+0x5c>
 8004e4c:	2a25      	cmp	r2, #37	; 0x25
 8004e4e:	d1f9      	bne.n	8004e44 <_svfiprintf_r+0x50>
 8004e50:	ebba 0b04 	subs.w	fp, sl, r4
 8004e54:	d00b      	beq.n	8004e6e <_svfiprintf_r+0x7a>
 8004e56:	465b      	mov	r3, fp
 8004e58:	4622      	mov	r2, r4
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	4638      	mov	r0, r7
 8004e5e:	f7ff ff6d 	bl	8004d3c <__ssputs_r>
 8004e62:	3001      	adds	r0, #1
 8004e64:	f000 80aa 	beq.w	8004fbc <_svfiprintf_r+0x1c8>
 8004e68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e6a:	445a      	add	r2, fp
 8004e6c:	9209      	str	r2, [sp, #36]	; 0x24
 8004e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 80a2 	beq.w	8004fbc <_svfiprintf_r+0x1c8>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e82:	f10a 0a01 	add.w	sl, sl, #1
 8004e86:	9304      	str	r3, [sp, #16]
 8004e88:	9307      	str	r3, [sp, #28]
 8004e8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e8e:	931a      	str	r3, [sp, #104]	; 0x68
 8004e90:	4654      	mov	r4, sl
 8004e92:	2205      	movs	r2, #5
 8004e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e98:	4851      	ldr	r0, [pc, #324]	; (8004fe0 <_svfiprintf_r+0x1ec>)
 8004e9a:	f000 fa41 	bl	8005320 <memchr>
 8004e9e:	9a04      	ldr	r2, [sp, #16]
 8004ea0:	b9d8      	cbnz	r0, 8004eda <_svfiprintf_r+0xe6>
 8004ea2:	06d0      	lsls	r0, r2, #27
 8004ea4:	bf44      	itt	mi
 8004ea6:	2320      	movmi	r3, #32
 8004ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eac:	0711      	lsls	r1, r2, #28
 8004eae:	bf44      	itt	mi
 8004eb0:	232b      	movmi	r3, #43	; 0x2b
 8004eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8004eba:	2b2a      	cmp	r3, #42	; 0x2a
 8004ebc:	d015      	beq.n	8004eea <_svfiprintf_r+0xf6>
 8004ebe:	4654      	mov	r4, sl
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	f04f 0c0a 	mov.w	ip, #10
 8004ec6:	9a07      	ldr	r2, [sp, #28]
 8004ec8:	4621      	mov	r1, r4
 8004eca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ece:	3b30      	subs	r3, #48	; 0x30
 8004ed0:	2b09      	cmp	r3, #9
 8004ed2:	d94e      	bls.n	8004f72 <_svfiprintf_r+0x17e>
 8004ed4:	b1b0      	cbz	r0, 8004f04 <_svfiprintf_r+0x110>
 8004ed6:	9207      	str	r2, [sp, #28]
 8004ed8:	e014      	b.n	8004f04 <_svfiprintf_r+0x110>
 8004eda:	eba0 0308 	sub.w	r3, r0, r8
 8004ede:	fa09 f303 	lsl.w	r3, r9, r3
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	46a2      	mov	sl, r4
 8004ee6:	9304      	str	r3, [sp, #16]
 8004ee8:	e7d2      	b.n	8004e90 <_svfiprintf_r+0x9c>
 8004eea:	9b03      	ldr	r3, [sp, #12]
 8004eec:	1d19      	adds	r1, r3, #4
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	9103      	str	r1, [sp, #12]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	bfbb      	ittet	lt
 8004ef6:	425b      	neglt	r3, r3
 8004ef8:	f042 0202 	orrlt.w	r2, r2, #2
 8004efc:	9307      	strge	r3, [sp, #28]
 8004efe:	9307      	strlt	r3, [sp, #28]
 8004f00:	bfb8      	it	lt
 8004f02:	9204      	strlt	r2, [sp, #16]
 8004f04:	7823      	ldrb	r3, [r4, #0]
 8004f06:	2b2e      	cmp	r3, #46	; 0x2e
 8004f08:	d10c      	bne.n	8004f24 <_svfiprintf_r+0x130>
 8004f0a:	7863      	ldrb	r3, [r4, #1]
 8004f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f0e:	d135      	bne.n	8004f7c <_svfiprintf_r+0x188>
 8004f10:	9b03      	ldr	r3, [sp, #12]
 8004f12:	3402      	adds	r4, #2
 8004f14:	1d1a      	adds	r2, r3, #4
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	9203      	str	r2, [sp, #12]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	bfb8      	it	lt
 8004f1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f22:	9305      	str	r3, [sp, #20]
 8004f24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004ff0 <_svfiprintf_r+0x1fc>
 8004f28:	2203      	movs	r2, #3
 8004f2a:	4650      	mov	r0, sl
 8004f2c:	7821      	ldrb	r1, [r4, #0]
 8004f2e:	f000 f9f7 	bl	8005320 <memchr>
 8004f32:	b140      	cbz	r0, 8004f46 <_svfiprintf_r+0x152>
 8004f34:	2340      	movs	r3, #64	; 0x40
 8004f36:	eba0 000a 	sub.w	r0, r0, sl
 8004f3a:	fa03 f000 	lsl.w	r0, r3, r0
 8004f3e:	9b04      	ldr	r3, [sp, #16]
 8004f40:	3401      	adds	r4, #1
 8004f42:	4303      	orrs	r3, r0
 8004f44:	9304      	str	r3, [sp, #16]
 8004f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f4a:	2206      	movs	r2, #6
 8004f4c:	4825      	ldr	r0, [pc, #148]	; (8004fe4 <_svfiprintf_r+0x1f0>)
 8004f4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f52:	f000 f9e5 	bl	8005320 <memchr>
 8004f56:	2800      	cmp	r0, #0
 8004f58:	d038      	beq.n	8004fcc <_svfiprintf_r+0x1d8>
 8004f5a:	4b23      	ldr	r3, [pc, #140]	; (8004fe8 <_svfiprintf_r+0x1f4>)
 8004f5c:	bb1b      	cbnz	r3, 8004fa6 <_svfiprintf_r+0x1b2>
 8004f5e:	9b03      	ldr	r3, [sp, #12]
 8004f60:	3307      	adds	r3, #7
 8004f62:	f023 0307 	bic.w	r3, r3, #7
 8004f66:	3308      	adds	r3, #8
 8004f68:	9303      	str	r3, [sp, #12]
 8004f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f6c:	4433      	add	r3, r6
 8004f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f70:	e767      	b.n	8004e42 <_svfiprintf_r+0x4e>
 8004f72:	460c      	mov	r4, r1
 8004f74:	2001      	movs	r0, #1
 8004f76:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f7a:	e7a5      	b.n	8004ec8 <_svfiprintf_r+0xd4>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f04f 0c0a 	mov.w	ip, #10
 8004f82:	4619      	mov	r1, r3
 8004f84:	3401      	adds	r4, #1
 8004f86:	9305      	str	r3, [sp, #20]
 8004f88:	4620      	mov	r0, r4
 8004f8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f8e:	3a30      	subs	r2, #48	; 0x30
 8004f90:	2a09      	cmp	r2, #9
 8004f92:	d903      	bls.n	8004f9c <_svfiprintf_r+0x1a8>
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0c5      	beq.n	8004f24 <_svfiprintf_r+0x130>
 8004f98:	9105      	str	r1, [sp, #20]
 8004f9a:	e7c3      	b.n	8004f24 <_svfiprintf_r+0x130>
 8004f9c:	4604      	mov	r4, r0
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fa4:	e7f0      	b.n	8004f88 <_svfiprintf_r+0x194>
 8004fa6:	ab03      	add	r3, sp, #12
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	462a      	mov	r2, r5
 8004fac:	4638      	mov	r0, r7
 8004fae:	4b0f      	ldr	r3, [pc, #60]	; (8004fec <_svfiprintf_r+0x1f8>)
 8004fb0:	a904      	add	r1, sp, #16
 8004fb2:	f3af 8000 	nop.w
 8004fb6:	1c42      	adds	r2, r0, #1
 8004fb8:	4606      	mov	r6, r0
 8004fba:	d1d6      	bne.n	8004f6a <_svfiprintf_r+0x176>
 8004fbc:	89ab      	ldrh	r3, [r5, #12]
 8004fbe:	065b      	lsls	r3, r3, #25
 8004fc0:	f53f af2c 	bmi.w	8004e1c <_svfiprintf_r+0x28>
 8004fc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fc6:	b01d      	add	sp, #116	; 0x74
 8004fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fcc:	ab03      	add	r3, sp, #12
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	462a      	mov	r2, r5
 8004fd2:	4638      	mov	r0, r7
 8004fd4:	4b05      	ldr	r3, [pc, #20]	; (8004fec <_svfiprintf_r+0x1f8>)
 8004fd6:	a904      	add	r1, sp, #16
 8004fd8:	f000 f87c 	bl	80050d4 <_printf_i>
 8004fdc:	e7eb      	b.n	8004fb6 <_svfiprintf_r+0x1c2>
 8004fde:	bf00      	nop
 8004fe0:	080055c0 	.word	0x080055c0
 8004fe4:	080055ca 	.word	0x080055ca
 8004fe8:	00000000 	.word	0x00000000
 8004fec:	08004d3d 	.word	0x08004d3d
 8004ff0:	080055c6 	.word	0x080055c6

08004ff4 <_printf_common>:
 8004ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff8:	4616      	mov	r6, r2
 8004ffa:	4699      	mov	r9, r3
 8004ffc:	688a      	ldr	r2, [r1, #8]
 8004ffe:	690b      	ldr	r3, [r1, #16]
 8005000:	4607      	mov	r7, r0
 8005002:	4293      	cmp	r3, r2
 8005004:	bfb8      	it	lt
 8005006:	4613      	movlt	r3, r2
 8005008:	6033      	str	r3, [r6, #0]
 800500a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800500e:	460c      	mov	r4, r1
 8005010:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005014:	b10a      	cbz	r2, 800501a <_printf_common+0x26>
 8005016:	3301      	adds	r3, #1
 8005018:	6033      	str	r3, [r6, #0]
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	0699      	lsls	r1, r3, #26
 800501e:	bf42      	ittt	mi
 8005020:	6833      	ldrmi	r3, [r6, #0]
 8005022:	3302      	addmi	r3, #2
 8005024:	6033      	strmi	r3, [r6, #0]
 8005026:	6825      	ldr	r5, [r4, #0]
 8005028:	f015 0506 	ands.w	r5, r5, #6
 800502c:	d106      	bne.n	800503c <_printf_common+0x48>
 800502e:	f104 0a19 	add.w	sl, r4, #25
 8005032:	68e3      	ldr	r3, [r4, #12]
 8005034:	6832      	ldr	r2, [r6, #0]
 8005036:	1a9b      	subs	r3, r3, r2
 8005038:	42ab      	cmp	r3, r5
 800503a:	dc28      	bgt.n	800508e <_printf_common+0x9a>
 800503c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005040:	1e13      	subs	r3, r2, #0
 8005042:	6822      	ldr	r2, [r4, #0]
 8005044:	bf18      	it	ne
 8005046:	2301      	movne	r3, #1
 8005048:	0692      	lsls	r2, r2, #26
 800504a:	d42d      	bmi.n	80050a8 <_printf_common+0xb4>
 800504c:	4649      	mov	r1, r9
 800504e:	4638      	mov	r0, r7
 8005050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005054:	47c0      	blx	r8
 8005056:	3001      	adds	r0, #1
 8005058:	d020      	beq.n	800509c <_printf_common+0xa8>
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	68e5      	ldr	r5, [r4, #12]
 800505e:	f003 0306 	and.w	r3, r3, #6
 8005062:	2b04      	cmp	r3, #4
 8005064:	bf18      	it	ne
 8005066:	2500      	movne	r5, #0
 8005068:	6832      	ldr	r2, [r6, #0]
 800506a:	f04f 0600 	mov.w	r6, #0
 800506e:	68a3      	ldr	r3, [r4, #8]
 8005070:	bf08      	it	eq
 8005072:	1aad      	subeq	r5, r5, r2
 8005074:	6922      	ldr	r2, [r4, #16]
 8005076:	bf08      	it	eq
 8005078:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800507c:	4293      	cmp	r3, r2
 800507e:	bfc4      	itt	gt
 8005080:	1a9b      	subgt	r3, r3, r2
 8005082:	18ed      	addgt	r5, r5, r3
 8005084:	341a      	adds	r4, #26
 8005086:	42b5      	cmp	r5, r6
 8005088:	d11a      	bne.n	80050c0 <_printf_common+0xcc>
 800508a:	2000      	movs	r0, #0
 800508c:	e008      	b.n	80050a0 <_printf_common+0xac>
 800508e:	2301      	movs	r3, #1
 8005090:	4652      	mov	r2, sl
 8005092:	4649      	mov	r1, r9
 8005094:	4638      	mov	r0, r7
 8005096:	47c0      	blx	r8
 8005098:	3001      	adds	r0, #1
 800509a:	d103      	bne.n	80050a4 <_printf_common+0xb0>
 800509c:	f04f 30ff 	mov.w	r0, #4294967295
 80050a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a4:	3501      	adds	r5, #1
 80050a6:	e7c4      	b.n	8005032 <_printf_common+0x3e>
 80050a8:	2030      	movs	r0, #48	; 0x30
 80050aa:	18e1      	adds	r1, r4, r3
 80050ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050b6:	4422      	add	r2, r4
 80050b8:	3302      	adds	r3, #2
 80050ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050be:	e7c5      	b.n	800504c <_printf_common+0x58>
 80050c0:	2301      	movs	r3, #1
 80050c2:	4622      	mov	r2, r4
 80050c4:	4649      	mov	r1, r9
 80050c6:	4638      	mov	r0, r7
 80050c8:	47c0      	blx	r8
 80050ca:	3001      	adds	r0, #1
 80050cc:	d0e6      	beq.n	800509c <_printf_common+0xa8>
 80050ce:	3601      	adds	r6, #1
 80050d0:	e7d9      	b.n	8005086 <_printf_common+0x92>
	...

080050d4 <_printf_i>:
 80050d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050d8:	460c      	mov	r4, r1
 80050da:	7e27      	ldrb	r7, [r4, #24]
 80050dc:	4691      	mov	r9, r2
 80050de:	2f78      	cmp	r7, #120	; 0x78
 80050e0:	4680      	mov	r8, r0
 80050e2:	469a      	mov	sl, r3
 80050e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80050e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050ea:	d807      	bhi.n	80050fc <_printf_i+0x28>
 80050ec:	2f62      	cmp	r7, #98	; 0x62
 80050ee:	d80a      	bhi.n	8005106 <_printf_i+0x32>
 80050f0:	2f00      	cmp	r7, #0
 80050f2:	f000 80d9 	beq.w	80052a8 <_printf_i+0x1d4>
 80050f6:	2f58      	cmp	r7, #88	; 0x58
 80050f8:	f000 80a4 	beq.w	8005244 <_printf_i+0x170>
 80050fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005100:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005104:	e03a      	b.n	800517c <_printf_i+0xa8>
 8005106:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800510a:	2b15      	cmp	r3, #21
 800510c:	d8f6      	bhi.n	80050fc <_printf_i+0x28>
 800510e:	a001      	add	r0, pc, #4	; (adr r0, 8005114 <_printf_i+0x40>)
 8005110:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005114:	0800516d 	.word	0x0800516d
 8005118:	08005181 	.word	0x08005181
 800511c:	080050fd 	.word	0x080050fd
 8005120:	080050fd 	.word	0x080050fd
 8005124:	080050fd 	.word	0x080050fd
 8005128:	080050fd 	.word	0x080050fd
 800512c:	08005181 	.word	0x08005181
 8005130:	080050fd 	.word	0x080050fd
 8005134:	080050fd 	.word	0x080050fd
 8005138:	080050fd 	.word	0x080050fd
 800513c:	080050fd 	.word	0x080050fd
 8005140:	0800528f 	.word	0x0800528f
 8005144:	080051b1 	.word	0x080051b1
 8005148:	08005271 	.word	0x08005271
 800514c:	080050fd 	.word	0x080050fd
 8005150:	080050fd 	.word	0x080050fd
 8005154:	080052b1 	.word	0x080052b1
 8005158:	080050fd 	.word	0x080050fd
 800515c:	080051b1 	.word	0x080051b1
 8005160:	080050fd 	.word	0x080050fd
 8005164:	080050fd 	.word	0x080050fd
 8005168:	08005279 	.word	0x08005279
 800516c:	680b      	ldr	r3, [r1, #0]
 800516e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005172:	1d1a      	adds	r2, r3, #4
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	600a      	str	r2, [r1, #0]
 8005178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800517c:	2301      	movs	r3, #1
 800517e:	e0a4      	b.n	80052ca <_printf_i+0x1f6>
 8005180:	6825      	ldr	r5, [r4, #0]
 8005182:	6808      	ldr	r0, [r1, #0]
 8005184:	062e      	lsls	r6, r5, #24
 8005186:	f100 0304 	add.w	r3, r0, #4
 800518a:	d50a      	bpl.n	80051a2 <_printf_i+0xce>
 800518c:	6805      	ldr	r5, [r0, #0]
 800518e:	600b      	str	r3, [r1, #0]
 8005190:	2d00      	cmp	r5, #0
 8005192:	da03      	bge.n	800519c <_printf_i+0xc8>
 8005194:	232d      	movs	r3, #45	; 0x2d
 8005196:	426d      	negs	r5, r5
 8005198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800519c:	230a      	movs	r3, #10
 800519e:	485e      	ldr	r0, [pc, #376]	; (8005318 <_printf_i+0x244>)
 80051a0:	e019      	b.n	80051d6 <_printf_i+0x102>
 80051a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80051a6:	6805      	ldr	r5, [r0, #0]
 80051a8:	600b      	str	r3, [r1, #0]
 80051aa:	bf18      	it	ne
 80051ac:	b22d      	sxthne	r5, r5
 80051ae:	e7ef      	b.n	8005190 <_printf_i+0xbc>
 80051b0:	680b      	ldr	r3, [r1, #0]
 80051b2:	6825      	ldr	r5, [r4, #0]
 80051b4:	1d18      	adds	r0, r3, #4
 80051b6:	6008      	str	r0, [r1, #0]
 80051b8:	0628      	lsls	r0, r5, #24
 80051ba:	d501      	bpl.n	80051c0 <_printf_i+0xec>
 80051bc:	681d      	ldr	r5, [r3, #0]
 80051be:	e002      	b.n	80051c6 <_printf_i+0xf2>
 80051c0:	0669      	lsls	r1, r5, #25
 80051c2:	d5fb      	bpl.n	80051bc <_printf_i+0xe8>
 80051c4:	881d      	ldrh	r5, [r3, #0]
 80051c6:	2f6f      	cmp	r7, #111	; 0x6f
 80051c8:	bf0c      	ite	eq
 80051ca:	2308      	moveq	r3, #8
 80051cc:	230a      	movne	r3, #10
 80051ce:	4852      	ldr	r0, [pc, #328]	; (8005318 <_printf_i+0x244>)
 80051d0:	2100      	movs	r1, #0
 80051d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051d6:	6866      	ldr	r6, [r4, #4]
 80051d8:	2e00      	cmp	r6, #0
 80051da:	bfa8      	it	ge
 80051dc:	6821      	ldrge	r1, [r4, #0]
 80051de:	60a6      	str	r6, [r4, #8]
 80051e0:	bfa4      	itt	ge
 80051e2:	f021 0104 	bicge.w	r1, r1, #4
 80051e6:	6021      	strge	r1, [r4, #0]
 80051e8:	b90d      	cbnz	r5, 80051ee <_printf_i+0x11a>
 80051ea:	2e00      	cmp	r6, #0
 80051ec:	d04d      	beq.n	800528a <_printf_i+0x1b6>
 80051ee:	4616      	mov	r6, r2
 80051f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80051f4:	fb03 5711 	mls	r7, r3, r1, r5
 80051f8:	5dc7      	ldrb	r7, [r0, r7]
 80051fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051fe:	462f      	mov	r7, r5
 8005200:	42bb      	cmp	r3, r7
 8005202:	460d      	mov	r5, r1
 8005204:	d9f4      	bls.n	80051f0 <_printf_i+0x11c>
 8005206:	2b08      	cmp	r3, #8
 8005208:	d10b      	bne.n	8005222 <_printf_i+0x14e>
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	07df      	lsls	r7, r3, #31
 800520e:	d508      	bpl.n	8005222 <_printf_i+0x14e>
 8005210:	6923      	ldr	r3, [r4, #16]
 8005212:	6861      	ldr	r1, [r4, #4]
 8005214:	4299      	cmp	r1, r3
 8005216:	bfde      	ittt	le
 8005218:	2330      	movle	r3, #48	; 0x30
 800521a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800521e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005222:	1b92      	subs	r2, r2, r6
 8005224:	6122      	str	r2, [r4, #16]
 8005226:	464b      	mov	r3, r9
 8005228:	4621      	mov	r1, r4
 800522a:	4640      	mov	r0, r8
 800522c:	f8cd a000 	str.w	sl, [sp]
 8005230:	aa03      	add	r2, sp, #12
 8005232:	f7ff fedf 	bl	8004ff4 <_printf_common>
 8005236:	3001      	adds	r0, #1
 8005238:	d14c      	bne.n	80052d4 <_printf_i+0x200>
 800523a:	f04f 30ff 	mov.w	r0, #4294967295
 800523e:	b004      	add	sp, #16
 8005240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005244:	4834      	ldr	r0, [pc, #208]	; (8005318 <_printf_i+0x244>)
 8005246:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800524a:	680e      	ldr	r6, [r1, #0]
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005252:	061f      	lsls	r7, r3, #24
 8005254:	600e      	str	r6, [r1, #0]
 8005256:	d514      	bpl.n	8005282 <_printf_i+0x1ae>
 8005258:	07d9      	lsls	r1, r3, #31
 800525a:	bf44      	itt	mi
 800525c:	f043 0320 	orrmi.w	r3, r3, #32
 8005260:	6023      	strmi	r3, [r4, #0]
 8005262:	b91d      	cbnz	r5, 800526c <_printf_i+0x198>
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	f023 0320 	bic.w	r3, r3, #32
 800526a:	6023      	str	r3, [r4, #0]
 800526c:	2310      	movs	r3, #16
 800526e:	e7af      	b.n	80051d0 <_printf_i+0xfc>
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	f043 0320 	orr.w	r3, r3, #32
 8005276:	6023      	str	r3, [r4, #0]
 8005278:	2378      	movs	r3, #120	; 0x78
 800527a:	4828      	ldr	r0, [pc, #160]	; (800531c <_printf_i+0x248>)
 800527c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005280:	e7e3      	b.n	800524a <_printf_i+0x176>
 8005282:	065e      	lsls	r6, r3, #25
 8005284:	bf48      	it	mi
 8005286:	b2ad      	uxthmi	r5, r5
 8005288:	e7e6      	b.n	8005258 <_printf_i+0x184>
 800528a:	4616      	mov	r6, r2
 800528c:	e7bb      	b.n	8005206 <_printf_i+0x132>
 800528e:	680b      	ldr	r3, [r1, #0]
 8005290:	6826      	ldr	r6, [r4, #0]
 8005292:	1d1d      	adds	r5, r3, #4
 8005294:	6960      	ldr	r0, [r4, #20]
 8005296:	600d      	str	r5, [r1, #0]
 8005298:	0635      	lsls	r5, r6, #24
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	d501      	bpl.n	80052a2 <_printf_i+0x1ce>
 800529e:	6018      	str	r0, [r3, #0]
 80052a0:	e002      	b.n	80052a8 <_printf_i+0x1d4>
 80052a2:	0671      	lsls	r1, r6, #25
 80052a4:	d5fb      	bpl.n	800529e <_printf_i+0x1ca>
 80052a6:	8018      	strh	r0, [r3, #0]
 80052a8:	2300      	movs	r3, #0
 80052aa:	4616      	mov	r6, r2
 80052ac:	6123      	str	r3, [r4, #16]
 80052ae:	e7ba      	b.n	8005226 <_printf_i+0x152>
 80052b0:	680b      	ldr	r3, [r1, #0]
 80052b2:	1d1a      	adds	r2, r3, #4
 80052b4:	600a      	str	r2, [r1, #0]
 80052b6:	681e      	ldr	r6, [r3, #0]
 80052b8:	2100      	movs	r1, #0
 80052ba:	4630      	mov	r0, r6
 80052bc:	6862      	ldr	r2, [r4, #4]
 80052be:	f000 f82f 	bl	8005320 <memchr>
 80052c2:	b108      	cbz	r0, 80052c8 <_printf_i+0x1f4>
 80052c4:	1b80      	subs	r0, r0, r6
 80052c6:	6060      	str	r0, [r4, #4]
 80052c8:	6863      	ldr	r3, [r4, #4]
 80052ca:	6123      	str	r3, [r4, #16]
 80052cc:	2300      	movs	r3, #0
 80052ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052d2:	e7a8      	b.n	8005226 <_printf_i+0x152>
 80052d4:	4632      	mov	r2, r6
 80052d6:	4649      	mov	r1, r9
 80052d8:	4640      	mov	r0, r8
 80052da:	6923      	ldr	r3, [r4, #16]
 80052dc:	47d0      	blx	sl
 80052de:	3001      	adds	r0, #1
 80052e0:	d0ab      	beq.n	800523a <_printf_i+0x166>
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	079b      	lsls	r3, r3, #30
 80052e6:	d413      	bmi.n	8005310 <_printf_i+0x23c>
 80052e8:	68e0      	ldr	r0, [r4, #12]
 80052ea:	9b03      	ldr	r3, [sp, #12]
 80052ec:	4298      	cmp	r0, r3
 80052ee:	bfb8      	it	lt
 80052f0:	4618      	movlt	r0, r3
 80052f2:	e7a4      	b.n	800523e <_printf_i+0x16a>
 80052f4:	2301      	movs	r3, #1
 80052f6:	4632      	mov	r2, r6
 80052f8:	4649      	mov	r1, r9
 80052fa:	4640      	mov	r0, r8
 80052fc:	47d0      	blx	sl
 80052fe:	3001      	adds	r0, #1
 8005300:	d09b      	beq.n	800523a <_printf_i+0x166>
 8005302:	3501      	adds	r5, #1
 8005304:	68e3      	ldr	r3, [r4, #12]
 8005306:	9903      	ldr	r1, [sp, #12]
 8005308:	1a5b      	subs	r3, r3, r1
 800530a:	42ab      	cmp	r3, r5
 800530c:	dcf2      	bgt.n	80052f4 <_printf_i+0x220>
 800530e:	e7eb      	b.n	80052e8 <_printf_i+0x214>
 8005310:	2500      	movs	r5, #0
 8005312:	f104 0619 	add.w	r6, r4, #25
 8005316:	e7f5      	b.n	8005304 <_printf_i+0x230>
 8005318:	080055d1 	.word	0x080055d1
 800531c:	080055e2 	.word	0x080055e2

08005320 <memchr>:
 8005320:	4603      	mov	r3, r0
 8005322:	b510      	push	{r4, lr}
 8005324:	b2c9      	uxtb	r1, r1
 8005326:	4402      	add	r2, r0
 8005328:	4293      	cmp	r3, r2
 800532a:	4618      	mov	r0, r3
 800532c:	d101      	bne.n	8005332 <memchr+0x12>
 800532e:	2000      	movs	r0, #0
 8005330:	e003      	b.n	800533a <memchr+0x1a>
 8005332:	7804      	ldrb	r4, [r0, #0]
 8005334:	3301      	adds	r3, #1
 8005336:	428c      	cmp	r4, r1
 8005338:	d1f6      	bne.n	8005328 <memchr+0x8>
 800533a:	bd10      	pop	{r4, pc}

0800533c <memcpy>:
 800533c:	440a      	add	r2, r1
 800533e:	4291      	cmp	r1, r2
 8005340:	f100 33ff 	add.w	r3, r0, #4294967295
 8005344:	d100      	bne.n	8005348 <memcpy+0xc>
 8005346:	4770      	bx	lr
 8005348:	b510      	push	{r4, lr}
 800534a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800534e:	4291      	cmp	r1, r2
 8005350:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005354:	d1f9      	bne.n	800534a <memcpy+0xe>
 8005356:	bd10      	pop	{r4, pc}

08005358 <memmove>:
 8005358:	4288      	cmp	r0, r1
 800535a:	b510      	push	{r4, lr}
 800535c:	eb01 0402 	add.w	r4, r1, r2
 8005360:	d902      	bls.n	8005368 <memmove+0x10>
 8005362:	4284      	cmp	r4, r0
 8005364:	4623      	mov	r3, r4
 8005366:	d807      	bhi.n	8005378 <memmove+0x20>
 8005368:	1e43      	subs	r3, r0, #1
 800536a:	42a1      	cmp	r1, r4
 800536c:	d008      	beq.n	8005380 <memmove+0x28>
 800536e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005372:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005376:	e7f8      	b.n	800536a <memmove+0x12>
 8005378:	4601      	mov	r1, r0
 800537a:	4402      	add	r2, r0
 800537c:	428a      	cmp	r2, r1
 800537e:	d100      	bne.n	8005382 <memmove+0x2a>
 8005380:	bd10      	pop	{r4, pc}
 8005382:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005386:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800538a:	e7f7      	b.n	800537c <memmove+0x24>

0800538c <_free_r>:
 800538c:	b538      	push	{r3, r4, r5, lr}
 800538e:	4605      	mov	r5, r0
 8005390:	2900      	cmp	r1, #0
 8005392:	d043      	beq.n	800541c <_free_r+0x90>
 8005394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005398:	1f0c      	subs	r4, r1, #4
 800539a:	2b00      	cmp	r3, #0
 800539c:	bfb8      	it	lt
 800539e:	18e4      	addlt	r4, r4, r3
 80053a0:	f000 f8d0 	bl	8005544 <__malloc_lock>
 80053a4:	4a1e      	ldr	r2, [pc, #120]	; (8005420 <_free_r+0x94>)
 80053a6:	6813      	ldr	r3, [r2, #0]
 80053a8:	4610      	mov	r0, r2
 80053aa:	b933      	cbnz	r3, 80053ba <_free_r+0x2e>
 80053ac:	6063      	str	r3, [r4, #4]
 80053ae:	6014      	str	r4, [r2, #0]
 80053b0:	4628      	mov	r0, r5
 80053b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053b6:	f000 b8cb 	b.w	8005550 <__malloc_unlock>
 80053ba:	42a3      	cmp	r3, r4
 80053bc:	d90a      	bls.n	80053d4 <_free_r+0x48>
 80053be:	6821      	ldr	r1, [r4, #0]
 80053c0:	1862      	adds	r2, r4, r1
 80053c2:	4293      	cmp	r3, r2
 80053c4:	bf01      	itttt	eq
 80053c6:	681a      	ldreq	r2, [r3, #0]
 80053c8:	685b      	ldreq	r3, [r3, #4]
 80053ca:	1852      	addeq	r2, r2, r1
 80053cc:	6022      	streq	r2, [r4, #0]
 80053ce:	6063      	str	r3, [r4, #4]
 80053d0:	6004      	str	r4, [r0, #0]
 80053d2:	e7ed      	b.n	80053b0 <_free_r+0x24>
 80053d4:	461a      	mov	r2, r3
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	b10b      	cbz	r3, 80053de <_free_r+0x52>
 80053da:	42a3      	cmp	r3, r4
 80053dc:	d9fa      	bls.n	80053d4 <_free_r+0x48>
 80053de:	6811      	ldr	r1, [r2, #0]
 80053e0:	1850      	adds	r0, r2, r1
 80053e2:	42a0      	cmp	r0, r4
 80053e4:	d10b      	bne.n	80053fe <_free_r+0x72>
 80053e6:	6820      	ldr	r0, [r4, #0]
 80053e8:	4401      	add	r1, r0
 80053ea:	1850      	adds	r0, r2, r1
 80053ec:	4283      	cmp	r3, r0
 80053ee:	6011      	str	r1, [r2, #0]
 80053f0:	d1de      	bne.n	80053b0 <_free_r+0x24>
 80053f2:	6818      	ldr	r0, [r3, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	4401      	add	r1, r0
 80053f8:	6011      	str	r1, [r2, #0]
 80053fa:	6053      	str	r3, [r2, #4]
 80053fc:	e7d8      	b.n	80053b0 <_free_r+0x24>
 80053fe:	d902      	bls.n	8005406 <_free_r+0x7a>
 8005400:	230c      	movs	r3, #12
 8005402:	602b      	str	r3, [r5, #0]
 8005404:	e7d4      	b.n	80053b0 <_free_r+0x24>
 8005406:	6820      	ldr	r0, [r4, #0]
 8005408:	1821      	adds	r1, r4, r0
 800540a:	428b      	cmp	r3, r1
 800540c:	bf01      	itttt	eq
 800540e:	6819      	ldreq	r1, [r3, #0]
 8005410:	685b      	ldreq	r3, [r3, #4]
 8005412:	1809      	addeq	r1, r1, r0
 8005414:	6021      	streq	r1, [r4, #0]
 8005416:	6063      	str	r3, [r4, #4]
 8005418:	6054      	str	r4, [r2, #4]
 800541a:	e7c9      	b.n	80053b0 <_free_r+0x24>
 800541c:	bd38      	pop	{r3, r4, r5, pc}
 800541e:	bf00      	nop
 8005420:	20000170 	.word	0x20000170

08005424 <_malloc_r>:
 8005424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005426:	1ccd      	adds	r5, r1, #3
 8005428:	f025 0503 	bic.w	r5, r5, #3
 800542c:	3508      	adds	r5, #8
 800542e:	2d0c      	cmp	r5, #12
 8005430:	bf38      	it	cc
 8005432:	250c      	movcc	r5, #12
 8005434:	2d00      	cmp	r5, #0
 8005436:	4606      	mov	r6, r0
 8005438:	db01      	blt.n	800543e <_malloc_r+0x1a>
 800543a:	42a9      	cmp	r1, r5
 800543c:	d903      	bls.n	8005446 <_malloc_r+0x22>
 800543e:	230c      	movs	r3, #12
 8005440:	6033      	str	r3, [r6, #0]
 8005442:	2000      	movs	r0, #0
 8005444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005446:	f000 f87d 	bl	8005544 <__malloc_lock>
 800544a:	4921      	ldr	r1, [pc, #132]	; (80054d0 <_malloc_r+0xac>)
 800544c:	680a      	ldr	r2, [r1, #0]
 800544e:	4614      	mov	r4, r2
 8005450:	b99c      	cbnz	r4, 800547a <_malloc_r+0x56>
 8005452:	4f20      	ldr	r7, [pc, #128]	; (80054d4 <_malloc_r+0xb0>)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	b923      	cbnz	r3, 8005462 <_malloc_r+0x3e>
 8005458:	4621      	mov	r1, r4
 800545a:	4630      	mov	r0, r6
 800545c:	f000 f862 	bl	8005524 <_sbrk_r>
 8005460:	6038      	str	r0, [r7, #0]
 8005462:	4629      	mov	r1, r5
 8005464:	4630      	mov	r0, r6
 8005466:	f000 f85d 	bl	8005524 <_sbrk_r>
 800546a:	1c43      	adds	r3, r0, #1
 800546c:	d123      	bne.n	80054b6 <_malloc_r+0x92>
 800546e:	230c      	movs	r3, #12
 8005470:	4630      	mov	r0, r6
 8005472:	6033      	str	r3, [r6, #0]
 8005474:	f000 f86c 	bl	8005550 <__malloc_unlock>
 8005478:	e7e3      	b.n	8005442 <_malloc_r+0x1e>
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	1b5b      	subs	r3, r3, r5
 800547e:	d417      	bmi.n	80054b0 <_malloc_r+0x8c>
 8005480:	2b0b      	cmp	r3, #11
 8005482:	d903      	bls.n	800548c <_malloc_r+0x68>
 8005484:	6023      	str	r3, [r4, #0]
 8005486:	441c      	add	r4, r3
 8005488:	6025      	str	r5, [r4, #0]
 800548a:	e004      	b.n	8005496 <_malloc_r+0x72>
 800548c:	6863      	ldr	r3, [r4, #4]
 800548e:	42a2      	cmp	r2, r4
 8005490:	bf0c      	ite	eq
 8005492:	600b      	streq	r3, [r1, #0]
 8005494:	6053      	strne	r3, [r2, #4]
 8005496:	4630      	mov	r0, r6
 8005498:	f000 f85a 	bl	8005550 <__malloc_unlock>
 800549c:	f104 000b 	add.w	r0, r4, #11
 80054a0:	1d23      	adds	r3, r4, #4
 80054a2:	f020 0007 	bic.w	r0, r0, #7
 80054a6:	1ac2      	subs	r2, r0, r3
 80054a8:	d0cc      	beq.n	8005444 <_malloc_r+0x20>
 80054aa:	1a1b      	subs	r3, r3, r0
 80054ac:	50a3      	str	r3, [r4, r2]
 80054ae:	e7c9      	b.n	8005444 <_malloc_r+0x20>
 80054b0:	4622      	mov	r2, r4
 80054b2:	6864      	ldr	r4, [r4, #4]
 80054b4:	e7cc      	b.n	8005450 <_malloc_r+0x2c>
 80054b6:	1cc4      	adds	r4, r0, #3
 80054b8:	f024 0403 	bic.w	r4, r4, #3
 80054bc:	42a0      	cmp	r0, r4
 80054be:	d0e3      	beq.n	8005488 <_malloc_r+0x64>
 80054c0:	1a21      	subs	r1, r4, r0
 80054c2:	4630      	mov	r0, r6
 80054c4:	f000 f82e 	bl	8005524 <_sbrk_r>
 80054c8:	3001      	adds	r0, #1
 80054ca:	d1dd      	bne.n	8005488 <_malloc_r+0x64>
 80054cc:	e7cf      	b.n	800546e <_malloc_r+0x4a>
 80054ce:	bf00      	nop
 80054d0:	20000170 	.word	0x20000170
 80054d4:	20000174 	.word	0x20000174

080054d8 <_realloc_r>:
 80054d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054da:	4607      	mov	r7, r0
 80054dc:	4614      	mov	r4, r2
 80054de:	460e      	mov	r6, r1
 80054e0:	b921      	cbnz	r1, 80054ec <_realloc_r+0x14>
 80054e2:	4611      	mov	r1, r2
 80054e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80054e8:	f7ff bf9c 	b.w	8005424 <_malloc_r>
 80054ec:	b922      	cbnz	r2, 80054f8 <_realloc_r+0x20>
 80054ee:	f7ff ff4d 	bl	800538c <_free_r>
 80054f2:	4625      	mov	r5, r4
 80054f4:	4628      	mov	r0, r5
 80054f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054f8:	f000 f830 	bl	800555c <_malloc_usable_size_r>
 80054fc:	42a0      	cmp	r0, r4
 80054fe:	d20f      	bcs.n	8005520 <_realloc_r+0x48>
 8005500:	4621      	mov	r1, r4
 8005502:	4638      	mov	r0, r7
 8005504:	f7ff ff8e 	bl	8005424 <_malloc_r>
 8005508:	4605      	mov	r5, r0
 800550a:	2800      	cmp	r0, #0
 800550c:	d0f2      	beq.n	80054f4 <_realloc_r+0x1c>
 800550e:	4631      	mov	r1, r6
 8005510:	4622      	mov	r2, r4
 8005512:	f7ff ff13 	bl	800533c <memcpy>
 8005516:	4631      	mov	r1, r6
 8005518:	4638      	mov	r0, r7
 800551a:	f7ff ff37 	bl	800538c <_free_r>
 800551e:	e7e9      	b.n	80054f4 <_realloc_r+0x1c>
 8005520:	4635      	mov	r5, r6
 8005522:	e7e7      	b.n	80054f4 <_realloc_r+0x1c>

08005524 <_sbrk_r>:
 8005524:	b538      	push	{r3, r4, r5, lr}
 8005526:	2300      	movs	r3, #0
 8005528:	4d05      	ldr	r5, [pc, #20]	; (8005540 <_sbrk_r+0x1c>)
 800552a:	4604      	mov	r4, r0
 800552c:	4608      	mov	r0, r1
 800552e:	602b      	str	r3, [r5, #0]
 8005530:	f7fc fe92 	bl	8002258 <_sbrk>
 8005534:	1c43      	adds	r3, r0, #1
 8005536:	d102      	bne.n	800553e <_sbrk_r+0x1a>
 8005538:	682b      	ldr	r3, [r5, #0]
 800553a:	b103      	cbz	r3, 800553e <_sbrk_r+0x1a>
 800553c:	6023      	str	r3, [r4, #0]
 800553e:	bd38      	pop	{r3, r4, r5, pc}
 8005540:	20000298 	.word	0x20000298

08005544 <__malloc_lock>:
 8005544:	4801      	ldr	r0, [pc, #4]	; (800554c <__malloc_lock+0x8>)
 8005546:	f000 b811 	b.w	800556c <__retarget_lock_acquire_recursive>
 800554a:	bf00      	nop
 800554c:	200002a0 	.word	0x200002a0

08005550 <__malloc_unlock>:
 8005550:	4801      	ldr	r0, [pc, #4]	; (8005558 <__malloc_unlock+0x8>)
 8005552:	f000 b80c 	b.w	800556e <__retarget_lock_release_recursive>
 8005556:	bf00      	nop
 8005558:	200002a0 	.word	0x200002a0

0800555c <_malloc_usable_size_r>:
 800555c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005560:	1f18      	subs	r0, r3, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	bfbc      	itt	lt
 8005566:	580b      	ldrlt	r3, [r1, r0]
 8005568:	18c0      	addlt	r0, r0, r3
 800556a:	4770      	bx	lr

0800556c <__retarget_lock_acquire_recursive>:
 800556c:	4770      	bx	lr

0800556e <__retarget_lock_release_recursive>:
 800556e:	4770      	bx	lr

08005570 <_init>:
 8005570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005572:	bf00      	nop
 8005574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005576:	bc08      	pop	{r3}
 8005578:	469e      	mov	lr, r3
 800557a:	4770      	bx	lr

0800557c <_fini>:
 800557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557e:	bf00      	nop
 8005580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005582:	bc08      	pop	{r3}
 8005584:	469e      	mov	lr, r3
 8005586:	4770      	bx	lr
